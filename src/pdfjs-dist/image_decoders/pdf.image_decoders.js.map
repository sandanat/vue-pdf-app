{"version":3,"sources":["webpack://pdfjs-dist/image_decoders/pdf.image_decoders/webpack/universalModuleDefinition","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/shared/util.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/shared/compatibility.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/shared/is_node.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/jbig2.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/core_utils.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/primitives.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/base_stream.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/arithmetic_decoder.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/ccitt.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/jpg.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/core/jpx.js","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/webpack/bootstrap","webpack://pdfjs-dist/image_decoders/pdf.image_decoders/src/pdf.image_decoders.js"],"names":["IDENTITY_MATRIX","FONT_IDENTITY_MATRIX","PermissionFlag","PRINT","MODIFY_CONTENTS","COPY","MODIFY_ANNOTATIONS","FILL_INTERACTIVE_FORMS","COPY_FOR_ACCESSIBILITY","ASSEMBLE","PRINT_HIGH_QUALITY","TextRenderingMode","FILL","STROKE","FILL_STROKE","INVISIBLE","FILL_ADD_TO_PATH","STROKE_ADD_TO_PATH","FILL_STROKE_ADD_TO_PATH","ADD_TO_PATH","FILL_STROKE_MASK","ADD_TO_PATH_FLAG","ImageKind","GRAYSCALE_1BPP","RGB_24BPP","RGBA_32BPP","AnnotationType","TEXT","LINK","FREETEXT","LINE","SQUARE","CIRCLE","POLYGON","POLYLINE","HIGHLIGHT","UNDERLINE","SQUIGGLY","STRIKEOUT","STAMP","CARET","INK","POPUP","FILEATTACHMENT","SOUND","MOVIE","WIDGET","SCREEN","PRINTERMARK","TRAPNET","WATERMARK","THREED","REDACT","AnnotationStateModelType","MARKED","REVIEW","AnnotationMarkedState","UNMARKED","AnnotationReviewState","ACCEPTED","REJECTED","CANCELLED","COMPLETED","NONE","AnnotationReplyType","GROUP","REPLY","AnnotationFlag","HIDDEN","NOZOOM","NOROTATE","NOVIEW","READONLY","LOCKED","TOGGLENOVIEW","LOCKEDCONTENTS","AnnotationFieldFlag","REQUIRED","NOEXPORT","MULTILINE","PASSWORD","NOTOGGLETOOFF","RADIO","PUSHBUTTON","COMBO","EDIT","SORT","FILESELECT","MULTISELECT","DONOTSPELLCHECK","DONOTSCROLL","COMB","RICHTEXT","RADIOSINUNISON","COMMITONSELCHANGE","AnnotationBorderStyleType","SOLID","DASHED","BEVELED","INSET","AnnotationActionEventType","E","X","D","U","Fo","Bl","PO","PC","PV","PI","K","F","V","C","DocumentActionEventType","WC","WS","DS","WP","DP","PageActionEventType","O","StreamType","UNKNOWN","FLATE","LZW","DCT","JPX","JBIG","A85","AHX","CCF","RLX","FontType","TYPE1","TYPE1C","CIDFONTTYPE0","CIDFONTTYPE0C","TRUETYPE","CIDFONTTYPE2","TYPE3","OPENTYPE","TYPE0","MMTYPE1","VerbosityLevel","ERRORS","WARNINGS","INFOS","CMapCompressionType","BINARY","STREAM","OPS","dependency","setLineWidth","setLineCap","setLineJoin","setMiterLimit","setDash","setRenderingIntent","setFlatness","setGState","save","restore","transform","moveTo","lineTo","curveTo","curveTo2","curveTo3","closePath","rectangle","stroke","closeStroke","fill","eoFill","fillStroke","eoFillStroke","closeFillStroke","closeEOFillStroke","endPath","clip","eoClip","beginText","endText","setCharSpacing","setWordSpacing","setHScale","setLeading","setFont","setTextRenderingMode","setTextRise","moveText","setLeadingMoveText","setTextMatrix","nextLine","showText","showSpacedText","nextLineShowText","nextLineSetSpacingShowText","setCharWidth","setCharWidthAndBounds","setStrokeColorSpace","setFillColorSpace","setStrokeColor","setStrokeColorN","setFillColor","setFillColorN","setStrokeGray","setFillGray","setStrokeRGBColor","setFillRGBColor","setStrokeCMYKColor","setFillCMYKColor","shadingFill","beginInlineImage","beginImageData","endInlineImage","paintXObject","markPoint","markPointProps","beginMarkedContent","beginMarkedContentProps","endMarkedContent","beginCompat","endCompat","paintFormXObjectBegin","paintFormXObjectEnd","beginGroup","endGroup","beginAnnotations","endAnnotations","beginAnnotation","endAnnotation","paintJpegXObject","paintImageMaskXObject","paintImageMaskXObjectGroup","paintImageXObject","paintInlineImageXObject","paintInlineImageXObjectGroup","paintImageXObjectRepeat","paintImageMaskXObjectRepeat","paintSolidColorImageMask","constructPath","UNSUPPORTED_FEATURES","unknown","forms","javaScript","signatures","smask","shadingPattern","font","errorTilingPattern","errorExtGState","errorXObject","errorFontLoadType3","errorFontState","errorFontMissing","errorFontTranslate","errorColorSpace","errorOperatorList","errorFontToUnicode","errorFontLoadNative","errorFontBuildPath","errorFontGetPath","errorMarkedContent","PasswordResponses","NEED_PASSWORD","INCORRECT_PASSWORD","verbosity","Number","console","unreachable","base","other","url","absoluteUrl","baseUrl","_isValidProtocol","Object","enumerable","configurable","writable","BaseException","constructor","NullCharactersRegExp","warn","str","assert","bytes","length","MAX_ARGUMENT_COUNT","String","strBuf","i","chunkEnd","Math","chunk","arr","resultLength","arrayByteLength","pos","data","item","stringToBytes","itemLength","value","obj","buffer8","view32","IsLittleEndianCached","shadow","isLittleEndian","IsEvalSupportedCached","isEvalSupported","hexNumbers","Array","n","makeHexColor","m1","m2","applyTransform","xt","p","m","yt","applyInverseTransform","d","getAxialAlignedBoundingBox","p1","Util","p2","r","p3","p4","inverseTransform","apply3dTransform","v","singularValueDecompose2dScale","transpose","a","b","c","first","second","sx","sy","normalizeRect","rect","intersect","orderedX","rect1","rect2","orderedY","result","PDFStringTranslateTable","code","match","buf","ii","char","decodeURIComponent","escape","unescape","encodeURIComponent","arr1","arr2","date","buffer","capability","isSettled","get","resolve","reject","contentType","forceDataSchema","URL","type","digits","b1","b2","b3","d1","d2","d3","d4","isNodeJS","process","getContexts","id","decoder","contextCache","cache","contexts","prev","bit","sign","readBits","codeLength","SegmentTypes","CodingTemplates","x","y","RefinementTemplates","coding","reference","ReusedContexts","RefinementReusedContexts","decodingContext","bitmap","OLD_PIXEL_MASK","row","row1","row2","contextLabel","j","pixel","input","decodeMMRBitmap","templateIndex","at","decodeBitmapTemplate0","useskip","template","templateLength","templateX","templateY","changingTemplateEntries","reuseMask","minX","maxX","minY","k","changingEntriesLength","changingTemplateX","changingTemplateY","changingTemplateBit","sbb_left","sbb_top","sbb_right","width","pseudoPixelContext","ltp","sltp","skip","i0","j0","shift","codingTemplate","codingTemplateLength","codingTemplateX","codingTemplateY","referenceTemplate","referenceTemplateLength","referenceTemplateX","referenceTemplateY","referenceWidth","referenceBitmap","referenceHeight","huffman","newSymbols","currentHeight","symbolCodeLength","log2","symbols","tableB1","getStandardTable","symbolWidths","deltaHeight","huffmanTables","decodeInteger","currentWidth","totalWidth","firstSymbol","deltaWidth","numberOfInstances","decodeTextRegion","symbolId","decodeIAID","rdx","rdy","symbol","decodeRefinement","decodeBitmap","bitmapSize","huffmanInput","collectiveBitmap","readUncompressedBitmap","originalEnd","bitmapEnd","numberOfSymbolsDecoded","xMin","bitmapWidth","xMax","symbolBitmap","exportedSymbols","flags","currentFlag","totalSymbolsLength","runLength","stripT","firstS","deltaT","deltaFirstS","currentS","currentT","stripSize","t","applyRefinement","refinement","inputSymbols","symbolWidth","symbolHeight","rdw","rdh","offsetT","offsetS","s2","symbolRow","maxWidth","t2","deltaS","collectiveWidth","patterns","patternBitmap","patternWidth","combinationOperator","regionBitmap","numberOfPatterns","pattern0","patternHeight","bitsPerValue","grayScaleBitPlanes","mmrInput","mg","ng","patternIndex","gridOffsetX","gridOffsetY","regionRow","patternRow","regionY","regionX","segmentHeader","readUint32","start","segmentType","pageAssociationFieldSize","referredFlags","referredToCount","retainBits","position","referredToSegmentNumberSize","referredTo","number","readUint16","genericRegionInfo","readRegionSegmentInformation","genericRegionSegmentFlags","genericRegionMmr","searchPatternLength","searchPattern","segments","readSegmentHeader","segment","header","height","RegionSegmentInformationFieldLength","end","dictionary","dictionaryFlags","atLength","readInt8","args","textRegion","textRegionSegmentFlags","textRegionHuffmanFlags","patternDictionary","patternDictionaryFlags","halftoneRegion","halftoneRegionFlags","genericRegion","pageInfo","resolutionX","resolutionY","pageSegmentFlags","callbackName","visitor","processSegment","chunks","readSegments","processSegments","bitPacked","imgData","q","mask","onPageInformation","rowSize","info","drawBitmap","regionInfo","mask0","offset0","offset","onImmediateGenericRegion","region","onImmediateLosslessGenericRegion","onSymbolDictionary","getSymbolDictionaryHuffmanTables","referredSegments","referredSymbols","decodeSymbolDictionary","onImmediateTextRegion","getTextRegionHuffmanTables","onImmediateLosslessTextRegion","onPatternDictionary","decodePatternDictionary","onImmediateHalftoneRegion","decodeHalftoneRegion","onImmediateLosslessHalftoneRegion","onTables","customTables","decodeTablesSegment","lineData","line","buildTree","node","decodeNode","htOffset","reader","lines","decode","assignPrefixCodes","linesLength","prefixLengthMax","histogram","currentLength","firstCode","currentCode","currentTemp","lowestValue","highestValue","prefixSizeBits","rangeSizeBits","currentRangeLow","prefixLength","rangeLength","standardTablesCache","table","readBit","numBits","byteAlign","next","currentIndex","index","codes","runCodesTable","numberOfRepeats","repeatedLength","symbolIDTable","customIndex","tableFirstS","getCustomHuffmanTable","tableDeltaS","tableDeltaT","tableDeltaHeight","tableDeltaWidth","tableBitmapSize","tableAggregateInstances","params","Columns","Rows","BlackIs1","EndOfBlock","eof","currentByte","endOfBlock","lookForEOFLimit","parseChunks","parseJbig2Chunks","parse","parseJbig2","lookup","initializer","getArray","stopWhenFound","visited","dict","values","ROMAN_NUMBER_MAP","lowerCase","romanBuf","romanStr","ch","positionPattern","component","name","parseInt","parent","isRef","parents","entry","xref","_collectJS","isName","js","isStream","stringToPDFString","list","actions","additionalActionsDicts","key","additionalActions","action","eventType","actionDict","objectSize","XMLEntities","entity","DEFAULT_CSS_FONT_OBLIQUE","DEFAULT_CSS_FONT_WEIGHT","CSS_FONT_WEIGHT_VALUES","fontFamily","weight","fontWeight","cssFontInfo","angle","parseFloat","isNaN","italicAngle","EOF","Name","nameCache","nameValue","_clearCache","Cmd","cmdCache","cmdValue","nonSerializable","assignXref","size","key2","key3","getAsync","getRaw","getKeys","getRawValues","set","has","forEach","callback","empty","emptyDict","merge","mergeSubDicts","mergedDict","Dict","properties","property","subDict","Ref","refCache","toString","gen","refValue","ref","put","remove","clear","putAlias","v1","v2","isEmpty","isDataLoaded","getByte","getBytes","forceClamped","peekByte","peekedByte","peekBytes","getUint16","b0","getInt32","getByteRange","getString","bytesToString","reset","moveStart","makeSubStream","getBaseStreams","QeTable","qe","nmps","nlps","switchFlag","byteIn","bp","cx_index","cx_mps","qeTableIcx","qeIcx","ccittEOL","ccittEOF","twoDimPass","twoDimHoriz","twoDimVert0","twoDimVertR1","twoDimVertL1","twoDimVertR2","twoDimVertL2","twoDimVertR3","twoDimVertL3","twoDimTable","whiteTable1","whiteTable2","blackTable1","blackTable2","blackTable3","options","source","eoblock","code1","readNextChar","refLine","codingLine","columns","refPos","blackPixels","code2","code3","gotEOL","bits","_addPixels","codingPos","a1","_addPixelsNeg","_findTableCode","limitValue","limit","_getTwoDimCode","_getWhiteCode","_getBlackCode","_lookBits","_eatBits","dctZigZag","dctCos1","dctSin1","dctCos3","dctSin3","dctCos6","dctSin6","dctSqrt2","dctSqrt1d2","codeLengths","children","parseDNLMarker","mcusPerLine","frame","progressive","startOffset","bitsData","bitsCount","nextByte","scanLines","maybeScanLines","blockRow","receive","decodeHuffman","diff","receiveAndExtend","rs","s","z","blockOffset","eobrun","e","successiveACState","offsetZ","successiveACNextValue","mcuRow","mcu","mcuCol","blockCol","getBlockBufferOffset","componentsLength","components","spectralStart","decodeFn","successivePrev","mcuExpected","mcuToRead","resetInterval","decodeBlock","h","decodeMcu","fileMarker","findNextFileMarker","partialMsg","qt","blockData","p0","blockBufferOffset","p5","p6","p7","v0","v3","v4","v7","v5","v6","col","blocksPerLine","blocksPerColumn","computationBuffer","quantizeAndInverse","startPos","maxPos","newPos","currentPos","currentMarker","invalid","marker","newMarker","decodeTransform","colorTransform","dnlScanLines","endOffset","array","mcusPerColumn","blocksPerLineForMcu","blocksPerColumnForMcu","blocksBufferSize","jfif","adobe","numSOSMarkers","quantizationTables","huffmanTablesAC","huffmanTablesDC","appData","readDataBlock","version","major","minor","densityUnits","xDensity","yDensity","thumbWidth","thumbHeight","thumbData","flags0","flags1","transformCode","quantizationTablesLength","quantizationTablesEnd","quantizationTableSpec","tableData","sofScanLines","componentsCount","maxH","maxV","componentId","qId","l","quantizationId","quantizationTable","prepareComponents","huffmanLength","huffmanTableSpec","codeLengthSum","huffmanValues","buildHuffmanTable","selectorsCount","componentIndex","tableSpec","spectralEnd","successiveApproximation","processed","decodeScan","ex","nextFileMarker","output","buildComponentData","scaleX","scaleY","_getLinearizedBlockData","isSourcePDF","numComponents","dataLength","xScaleBlockOffset","mask3LSB","componentScaleX","componentScaleY","blocksPerScanline","lastComponentScaleX","_isColorConversionNeeded","_convertYccToRgb","Y","Cb","Cr","_convertYcckToRgb","_convertYcckToCmyk","_convertCmykToRgb","getData","forceRGB","rgbData","grayColor","SubbandsGainLog2","LL","LH","HL","HH","head","headerSize","lbox","tbox","jumpDataLength","method","colorspace","headerType","parseImageProperties","newByte","stream","oldByte","Xsiz","Ysiz","XOsiz","YOsiz","Csiz","parseCodestream","context","doNotRecover","siz","precision","isSigned","XRsiz","YRsiz","calculateComponentDimensions","calculateTileGrids","qcd","sqcd","spqcdSize","scalarExpounded","spqcds","spqcd","qcc","cqcc","cod","scod","blockStyle","precinctsSizes","precinctsSize","PPx","PPy","unsupported","tile","initializeTile","buildPackets","parseTilePackets","transformComponents","tiles","numXtiles","numYtiles","jj","tileComponent","codOrCoc","precinctWidth","dimensions","precinctHeight","isZeroRes","resolution","precinctWidthInSubband","precinctHeightInSubband","numprecinctswide","numprecinctshigh","numprecincts","xcb_","ycb_","codeblockWidth","codeblockHeight","cbx0","subband","cby0","cbx1","cby1","precinctParameters","codeblocks","precincts","codeblock","cbx","cby","tbx0","tby0","tbx1","tby1","pi","pj","precinctNumber","precinct","cbxMin","cbyMin","cbxMax","cbyMax","numcodeblockwide","numcodeblockhigh","precinctCodeblocks","subbands","tileIndex","layersCount","maxDecompositionLevelsCount","packet","createPacket","maxNumPrecinctsInLevel","maxNumPrecincts","resolutions","getPrecinctSizesInImageScale","precinctsIterationSizes","px","py","decompositionLevelsCount","sizeInImageScale","getPrecinctIndexIfExist","posX","pxIndex","precinctIterationSizes","posY","pyIndex","startPrecinctRowIndex","minWidth","minHeight","maxNumWide","maxNumHigh","sizePerComponent","sizePerResolution","minWidthCurrentComponent","minHeightCurrentComponent","maxNumWideCurrentComponent","maxNumHighCurrentComponent","scale","widthCurrentResolution","heightCurrentResolution","blocksDimensions","getBlocksDimensions","buildPrecincts","buildCodeblocks","bscale","resolutionSubbands","progressionOrder","bufferSize","skipNextBit","skipBytes","sopMarkerUsed","ephMarkerUsed","packetsIterator","alignToByte","skipMarkerIfEqual","layerNumber","queue","codeblockColumn","codeblockRow","codeblockIncluded","firstTimeInclusion","inclusionTree","zeroBitPlanesTree","valueReady","codingpasses","readCodingpasses","codingpassesLog2","codedDataLength","packetItem","x0","y0","right","bottom","blockWidth","blockHeight","bitModel","currentCodingpassType","totalLength","dataItem","encodedData","magnitude","bitsDecoded","magnitudeCorrection","reversible","interleave","levelOffset","nb","coefficients","mb","codingStyleParameters","quantizationParameters","guardBits","segmentationSymbolUsed","subbandCoefficients","mu","epsilon","gainLog2","delta","copyCoefficients","items","left","top","resultImages","transformedTiles","transformTile","tile0","out","fourComponents","y0items","y1items","y2items","y3items","component0","alpha01","y1","y2","g","qcdOrQcc","levelsLength","level","currentLevel","incrementValue","nextLevel","stopValue","propagateValues","levelIndex","currentValue","BitModel","UNIFORM_CONTEXT","RUNLENGTH_CONTEXT","LLAndLHContextsLabel","HLContextLabel","HHContextLabel","contextLabelTable","coefficientCount","coefficentsMagnitude","zeroBitPlanes","setDecoder","setNeighborsSignificance","neighborsSignificance","column","runSignificancePropagationPass","coefficentsSign","processingFlags","labels","processedInverseMask","processedMask","firstMagnitudeBitMask","i1","decision","decodeSignBit","significance1","sign1","sign0","contribution","horizontalContribution","decoded","runMagnitudeRefinementPass","width4","index0","indexNext","significance","runCleanupPass","oneRowDown","twoRowsDown","threeRowsDown","iNext","indexBase","checkAllEmpty","allEmpty","hasSignificantCoefficent","i2","checkSegmentationSymbol","calculate","ll","extend","j1","j2","filter","iterate","llWidth","llHeight","llItems","hl_lh_hh","bufferPadding","rowBuffer","numBuffers","colBuffers","currentBuffer","u","len","alpha","beta","gamma","K_","current","pdfjsVersion","pdfjsBuild"],"mappings":"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","file":"pdf.image_decoders.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/image_decoders/pdf.image_decoders\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/image_decoders/pdf.image_decoders\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/image_decoders/pdf.image_decoders\"] = factory();\n})(this, function() {\nreturn ","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport \"./compatibility.js\";\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationStateModelType = {\n  MARKED: \"Marked\",\n  REVIEW: \"Review\",\n};\n\nconst AnnotationMarkedState = {\n  MARKED: \"Marked\",\n  UNMARKED: \"Unmarked\",\n};\n\nconst AnnotationReviewState = {\n  ACCEPTED: \"Accepted\",\n  REJECTED: \"Rejected\",\n  CANCELLED: \"Cancelled\",\n  COMPLETED: \"Completed\",\n  NONE: \"None\",\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst StreamType = {\n  UNKNOWN: \"UNKNOWN\",\n  FLATE: \"FLATE\",\n  LZW: \"LZW\",\n  DCT: \"DCT\",\n  JPX: \"JPX\",\n  JBIG: \"JBIG\",\n  A85: \"A85\",\n  AHX: \"AHX\",\n  CCF: \"CCF\",\n  RLX: \"RLX\", // PDF short name is 'RL', but telemetry requires three chars.\n};\n\nconst FontType = {\n  UNKNOWN: \"UNKNOWN\",\n  TYPE1: \"TYPE1\",\n  TYPE1C: \"TYPE1C\",\n  CIDFONTTYPE0: \"CIDFONTTYPE0\",\n  CIDFONTTYPE0C: \"CIDFONTTYPE0C\",\n  TRUETYPE: \"TRUETYPE\",\n  CIDFONTTYPE2: \"CIDFONTTYPE2\",\n  TYPE3: \"TYPE3\",\n  OPENTYPE: \"OPENTYPE\",\n  TYPE0: \"TYPE0\",\n  MMTYPE1: \"MMTYPE1\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n  STREAM: 2,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  beginAnnotations: 78,\n  endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst UNSUPPORTED_FEATURES = {\n  /** @deprecated unused */\n  unknown: \"unknown\",\n  forms: \"forms\",\n  javaScript: \"javaScript\",\n  signatures: \"signatures\",\n  smask: \"smask\",\n  shadingPattern: \"shadingPattern\",\n  /** @deprecated unused */\n  font: \"font\",\n  errorTilingPattern: \"errorTilingPattern\",\n  errorExtGState: \"errorExtGState\",\n  errorXObject: \"errorXObject\",\n  errorFontLoadType3: \"errorFontLoadType3\",\n  errorFontState: \"errorFontState\",\n  errorFontMissing: \"errorFontMissing\",\n  errorFontTranslate: \"errorFontTranslate\",\n  errorColorSpace: \"errorColorSpace\",\n  errorOperatorList: \"errorOperatorList\",\n  errorFontToUnicode: \"errorFontToUnicode\",\n  errorFontLoadNative: \"errorFontLoadNative\",\n  errorFontBuildPath: \"errorFontBuildPath\",\n  errorFontGetPath: \"errorFontGetPath\",\n  errorMarkedContent: \"errorMarkedContent\",\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.\nfunction isSameOrigin(baseUrl, otherUrl) {\n  let base;\n  try {\n    base = new URL(baseUrl);\n    if (!base.origin || base.origin === \"null\") {\n      return false; // non-HTTP url\n    }\n  } catch (e) {\n    return false;\n  }\n\n  const other = new URL(otherUrl, base);\n  return base.origin === other.origin;\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  if (!url) {\n    return false;\n  }\n  switch (url.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} baseUrl - An absolute URL.\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl) {\n  if (!url) {\n    return null;\n  }\n  try {\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch (ex) {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: true,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = this.constructor.name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg);\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg);\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {}\n\nclass MissingPDFException extends BaseException {}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg);\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {}\n\nconst NullCharactersRegExp = /\\x00/g;\n\n/**\n * @param {string} str\n */\nfunction removeNullCharacters(str) {\n  if (typeof str !== \"string\") {\n    warn(\"The argument for removeNullCharacters must be a string.\");\n    return str;\n  }\n  return str.replace(NullCharactersRegExp, \"\");\n}\n\nfunction bytesToString(bytes) {\n  assert(\n    bytes !== null && typeof bytes === \"object\" && bytes.length !== undefined,\n    \"Invalid argument for bytesToString\"\n  );\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  assert(typeof str === \"string\", \"Invalid argument for stringToBytes\");\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\n/**\n * Gets length of the array (Array, Uint8Array, or string) in bytes.\n * @param {Array<any>|Uint8Array|string} arr\n * @returns {number}\n */\nfunction arrayByteLength(arr) {\n  if (arr.length !== undefined) {\n    return arr.length;\n  }\n  assert(arr.byteLength !== undefined, \"arrayByteLength - invalid argument.\");\n  return arr.byteLength;\n}\n\n/**\n * Combines array items (arrays) into single Uint8Array object.\n * @param {Array<Array<any>|Uint8Array|string>} arr - the array of the arrays\n *   (Array, Uint8Array, or string).\n * @returns {Uint8Array}\n */\nfunction arraysToBytes(arr) {\n  const length = arr.length;\n  // Shortcut: if first and only item is Uint8Array, return it.\n  if (length === 1 && arr[0] instanceof Uint8Array) {\n    return arr[0];\n  }\n  let resultLength = 0;\n  for (let i = 0; i < length; i++) {\n    resultLength += arrayByteLength(arr[i]);\n  }\n  let pos = 0;\n  const data = new Uint8Array(resultLength);\n  for (let i = 0; i < length; i++) {\n    let item = arr[i];\n    if (!(item instanceof Uint8Array)) {\n      if (typeof item === \"string\") {\n        item = stringToBytes(item);\n      } else {\n        item = new Uint8Array(item);\n      }\n    }\n    const itemLength = item.byteLength;\n    data.set(item, pos);\n    pos += itemLength;\n  }\n  return data;\n}\n\nfunction string32(value) {\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\nconst IsLittleEndianCached = {\n  get value() {\n    return shadow(this, \"value\", isLittleEndian());\n  },\n};\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nconst IsEvalSupportedCached = {\n  get value() {\n    return shadow(this, \"value\", isEvalSupported());\n  },\n};\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = Util.applyTransform(r, m);\n    const p2 = Util.applyTransform(r.slice(2, 4), m);\n    const p3 = Util.applyTransform([r[0], r[3]], m);\n    const p4 = Util.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // Apply a generic 3d matrix M on a 3-vector v:\n  //   | a b c |   | X |\n  //   | d e f | x | Y |\n  //   | g h i |   | Z |\n  // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],\n  // with v as [X,Y,Z]\n  static apply3dTransform(m, v) {\n    return [\n      m[0] * v[0] + m[1] * v[1] + m[2] * v[2],\n      m[3] * v[0] + m[4] * v[1] + m[5] * v[2],\n      m[6] * v[0] + m[7] * v[1] + m[8] * v[2],\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'false'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    function compare(a, b) {\n      return a - b;\n    }\n\n    // Order points along the axes\n    const orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);\n    const orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);\n    const result = [];\n\n    rect1 = Util.normalizeRect(rect1);\n    rect2 = Util.normalizeRect(rect2);\n\n    // X: first and second points belong to different rectangles?\n    if (\n      (orderedX[0] === rect1[0] && orderedX[1] === rect2[0]) ||\n      (orderedX[0] === rect2[0] && orderedX[1] === rect1[0])\n    ) {\n      // Intersection must be between second and third points\n      result[0] = orderedX[1];\n      result[2] = orderedX[2];\n    } else {\n      return null;\n    }\n\n    // Y: first and second points belong to different rectangles?\n    if (\n      (orderedY[0] === rect1[1] && orderedY[1] === rect2[1]) ||\n      (orderedY[0] === rect2[1] && orderedY[1] === rect1[1])\n    ) {\n      // Intersection must be between second and third points\n      result[1] = orderedY[1];\n      result[3] = orderedY[2];\n    } else {\n      return null;\n    }\n\n    return result;\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  const length = str.length,\n    strBuf = [];\n  if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n    // UTF16BE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i) << 8) | str.charCodeAt(i + 1))\n      );\n    }\n  } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n    // UTF16LE BOM\n    for (let i = 2; i < length; i += 2) {\n      strBuf.push(\n        String.fromCharCode((str.charCodeAt(i + 1) << 8) | str.charCodeAt(i))\n      );\n    }\n  } else {\n    for (let i = 0; i < length; ++i) {\n      const code = PDFStringTranslateTable[str.charCodeAt(i)];\n      strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n    }\n  }\n  return strBuf.join(\"\");\n}\n\nfunction escapeString(str) {\n  // replace \"(\", \")\", \"\\n\", \"\\r\" and \"\\\"\n  // by \"\\(\", \"\\)\", \"\\\\n\", \"\\\\r\" and \"\\\\\"\n  // in order to write it in a PDF file.\n  return str.replace(/([()\\\\\\n\\r])/g, match => {\n    if (match === \"\\n\") {\n      return \"\\\\n\";\n    } else if (match === \"\\r\") {\n      return \"\\\\r\";\n    }\n    return `\\\\${match}`;\n  });\n}\n\nfunction isAscii(str) {\n  return /^[\\x00-\\x7F]*$/.test(str);\n}\n\nfunction stringToUTF16BEString(str) {\n  const buf = [\"\\xFE\\xFF\"];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    buf.push(\n      String.fromCharCode((char >> 8) & 0xff),\n      String.fromCharCode(char & 0xff)\n    );\n  }\n  return buf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isBool(v) {\n  return typeof v === \"boolean\";\n}\n\nfunction isNum(v) {\n  return typeof v === \"number\";\n}\n\nfunction isString(v) {\n  return typeof v === \"string\";\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v !== null && v.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\n/**\n * Promise Capability object.\n *\n * @typedef {Object} PromiseCapability\n * @property {Promise<any>} promise - A Promise object.\n * @property {boolean} settled - If the Promise has been fulfilled/rejected.\n * @property {function} resolve - Fulfills the Promise.\n * @property {function} reject - Rejects the Promise.\n */\n\n/**\n * Creates a promise capability object.\n * @alias createPromiseCapability\n *\n * @returns {PromiseCapability}\n */\nfunction createPromiseCapability() {\n  const capability = Object.create(null);\n  let isSettled = false;\n\n  Object.defineProperty(capability, \"settled\", {\n    get() {\n      return isSettled;\n    },\n  });\n  capability.promise = new Promise(function (resolve, reject) {\n    capability.resolve = function (data) {\n      isSettled = true;\n      resolve(data);\n    };\n    capability.reject = function (reason) {\n      isSettled = true;\n      reject(reason);\n    };\n  });\n  return capability;\n}\n\nfunction createObjectURL(data, contentType = \"\", forceDataSchema = false) {\n  if (URL.createObjectURL && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n}\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMarkedState,\n  AnnotationReplyType,\n  AnnotationReviewState,\n  AnnotationStateModelType,\n  AnnotationType,\n  arrayByteLength,\n  arraysToBytes,\n  assert,\n  BaseException,\n  bytesToString,\n  CMapCompressionType,\n  createObjectURL,\n  createPromiseCapability,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  escapeString,\n  FONT_IDENTITY_MATRIX,\n  FontType,\n  FormatError,\n  getModificationDate,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isAscii,\n  isBool,\n  IsEvalSupportedCached,\n  IsLittleEndianCached,\n  isNum,\n  isSameOrigin,\n  isString,\n  MissingPDFException,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  removeNullCharacters,\n  setVerbosityLevel,\n  shadow,\n  StreamType,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF16BEString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  UNSUPPORTED_FEATURES,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n","/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNodeJS } from \"./is_node.js\";\n\n// Skip compatibility checks for modern builds and if we already ran the module.\nif (\n  (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"SKIP_BABEL\")) &&\n  (typeof globalThis === \"undefined\" || !globalThis._pdfjsCompatibilityChecked)\n) {\n  // Provides support for globalThis in legacy browsers.\n  // Support: Firefox<65, Chrome<71, Safari<12.1\n  if (typeof globalThis === \"undefined\" || globalThis.Math !== Math) {\n    // eslint-disable-next-line no-global-assign\n    globalThis = require(\"core-js/es/global-this\");\n  }\n  globalThis._pdfjsCompatibilityChecked = true;\n\n  // Support: Node.js\n  (function checkNodeBtoa() {\n    if (globalThis.btoa || !isNodeJS) {\n      return;\n    }\n    globalThis.btoa = function (chars) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(chars, \"binary\").toString(\"base64\");\n    };\n  })();\n\n  // Support: Node.js\n  (function checkNodeAtob() {\n    if (globalThis.atob || !isNodeJS) {\n      return;\n    }\n    globalThis.atob = function (input) {\n      // eslint-disable-next-line no-undef\n      return Buffer.from(input, \"base64\").toString(\"binary\");\n    };\n  })();\n\n  // Provides support for Object.fromEntries in legacy browsers.\n  // Support: Firefox<63, Chrome<73, Safari<12.1, Node.js<12.0.0\n  (function checkObjectFromEntries() {\n    if (Object.fromEntries) {\n      return;\n    }\n    require(\"core-js/es/object/from-entries.js\");\n  })();\n\n  // Provides support for *recent* additions to the Promise specification,\n  // however basic Promise support is assumed to be available natively.\n  // Support: Firefox<71, Chrome<76, Safari<13, Node.js<12.9.0\n  (function checkPromise() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `Promise` shouldn't\n      // need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    if (globalThis.Promise.allSettled) {\n      return;\n    }\n    globalThis.Promise = require(\"core-js/es/promise/index.js\");\n  })();\n\n  // Support: Node.js\n  (function checkReadableStream() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"IMAGE_DECODERS\")) {\n      // The current image decoders are synchronous, hence `ReadableStream`\n      // shouldn't need to be polyfilled for the IMAGE_DECODERS build target.\n      return;\n    }\n    let isReadableStreamSupported = false;\n\n    if (typeof ReadableStream !== \"undefined\") {\n      // MS Edge may say it has ReadableStream but they are not up to spec yet.\n      try {\n        // eslint-disable-next-line no-new\n        new ReadableStream({\n          start(controller) {\n            controller.close();\n          },\n        });\n        isReadableStreamSupported = true;\n      } catch (e) {\n        // The ReadableStream constructor cannot be used.\n      }\n    }\n    if (isReadableStreamSupported) {\n      return;\n    }\n    globalThis.ReadableStream =\n      require(\"web-streams-polyfill/dist/ponyfill.js\").ReadableStream;\n  })();\n}\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nexport { isNodeJS };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseException, shadow } from \"../shared/util.js\";\nimport { log2, readInt8, readUint16, readUint32 } from \"./core_utils.js\";\nimport { ArithmeticDecoder } from \"./arithmetic_decoder.js\";\nimport { CCITTFaxDecoder } from \"./ccitt.js\";\n\nclass Jbig2Error extends BaseException {\n  constructor(msg) {\n    super(`JBIG2 error: ${msg}`);\n  }\n}\n\n// Utility data structures\nclass ContextCache {\n  getContexts(id) {\n    if (id in this) {\n      return this[id];\n    }\n    return (this[id] = new Int8Array(1 << 16));\n  }\n}\n\nclass DecodingContext {\n  constructor(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n  }\n\n  get decoder() {\n    const decoder = new ArithmeticDecoder(this.data, this.start, this.end);\n    return shadow(this, \"decoder\", decoder);\n  }\n\n  get contextCache() {\n    const cache = new ContextCache();\n    return shadow(this, \"contextCache\", cache);\n  }\n}\n\n// Annex A. Arithmetic Integer Decoding Procedure\n// A.2 Procedure for decoding values\nfunction decodeInteger(contextCache, procedure, decoder) {\n  const contexts = contextCache.getContexts(procedure);\n  let prev = 1;\n\n  function readBits(length) {\n    let v = 0;\n    for (let i = 0; i < length; i++) {\n      const bit = decoder.readBit(contexts, prev);\n      prev = prev < 256 ? (prev << 1) | bit : (((prev << 1) | bit) & 511) | 256;\n      v = (v << 1) | bit;\n    }\n    return v >>> 0;\n  }\n\n  const sign = readBits(1);\n  // prettier-ignore\n  /* eslint-disable no-nested-ternary */\n  const value = readBits(1) ?\n                  (readBits(1) ?\n                    (readBits(1) ?\n                      (readBits(1) ?\n                        (readBits(1) ?\n                          (readBits(32) + 4436) :\n                        readBits(12) + 340) :\n                      readBits(8) + 84) :\n                    readBits(6) + 20) :\n                  readBits(4) + 4) :\n                readBits(2);\n  /* eslint-enable no-nested-ternary */\n  if (sign === 0) {\n    return value;\n  } else if (value > 0) {\n    return -value;\n  }\n  return null;\n}\n\n// A.3 The IAID decoding procedure\nfunction decodeIAID(contextCache, decoder, codeLength) {\n  const contexts = contextCache.getContexts(\"IAID\");\n\n  let prev = 1;\n  for (let i = 0; i < codeLength; i++) {\n    const bit = decoder.readBit(contexts, prev);\n    prev = (prev << 1) | bit;\n  }\n  if (codeLength < 31) {\n    return prev & ((1 << codeLength) - 1);\n  }\n  return prev & 0x7fffffff;\n}\n\n// 7.3 Segment types\nconst SegmentTypes = [\n  \"SymbolDictionary\",\n  null,\n  null,\n  null,\n  \"IntermediateTextRegion\",\n  null,\n  \"ImmediateTextRegion\",\n  \"ImmediateLosslessTextRegion\",\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  \"PatternDictionary\",\n  null,\n  null,\n  null,\n  \"IntermediateHalftoneRegion\",\n  null,\n  \"ImmediateHalftoneRegion\",\n  \"ImmediateLosslessHalftoneRegion\",\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  \"IntermediateGenericRegion\",\n  null,\n  \"ImmediateGenericRegion\",\n  \"ImmediateLosslessGenericRegion\",\n  \"IntermediateGenericRefinementRegion\",\n  null,\n  \"ImmediateGenericRefinementRegion\",\n  \"ImmediateLosslessGenericRefinementRegion\",\n  null,\n  null,\n  null,\n  null,\n  \"PageInformation\",\n  \"EndOfPage\",\n  \"EndOfStripe\",\n  \"EndOfFile\",\n  \"Profiles\",\n  \"Tables\",\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  null,\n  \"Extension\",\n];\n\nconst CodingTemplates = [\n  [\n    { x: -1, y: -2 },\n    { x: 0, y: -2 },\n    { x: 1, y: -2 },\n    { x: -2, y: -1 },\n    { x: -1, y: -1 },\n    { x: 0, y: -1 },\n    { x: 1, y: -1 },\n    { x: 2, y: -1 },\n    { x: -4, y: 0 },\n    { x: -3, y: 0 },\n    { x: -2, y: 0 },\n    { x: -1, y: 0 },\n  ],\n  [\n    { x: -1, y: -2 },\n    { x: 0, y: -2 },\n    { x: 1, y: -2 },\n    { x: 2, y: -2 },\n    { x: -2, y: -1 },\n    { x: -1, y: -1 },\n    { x: 0, y: -1 },\n    { x: 1, y: -1 },\n    { x: 2, y: -1 },\n    { x: -3, y: 0 },\n    { x: -2, y: 0 },\n    { x: -1, y: 0 },\n  ],\n  [\n    { x: -1, y: -2 },\n    { x: 0, y: -2 },\n    { x: 1, y: -2 },\n    { x: -2, y: -1 },\n    { x: -1, y: -1 },\n    { x: 0, y: -1 },\n    { x: 1, y: -1 },\n    { x: -2, y: 0 },\n    { x: -1, y: 0 },\n  ],\n  [\n    { x: -3, y: -1 },\n    { x: -2, y: -1 },\n    { x: -1, y: -1 },\n    { x: 0, y: -1 },\n    { x: 1, y: -1 },\n    { x: -4, y: 0 },\n    { x: -3, y: 0 },\n    { x: -2, y: 0 },\n    { x: -1, y: 0 },\n  ],\n];\n\nconst RefinementTemplates = [\n  {\n    coding: [\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: -1, y: 0 },\n    ],\n    reference: [\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: -1, y: 0 },\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: -1, y: 1 },\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n    ],\n  },\n  {\n    coding: [\n      { x: -1, y: -1 },\n      { x: 0, y: -1 },\n      { x: 1, y: -1 },\n      { x: -1, y: 0 },\n    ],\n    reference: [\n      { x: 0, y: -1 },\n      { x: -1, y: 0 },\n      { x: 0, y: 0 },\n      { x: 1, y: 0 },\n      { x: 0, y: 1 },\n      { x: 1, y: 1 },\n    ],\n  },\n];\n\n// See 6.2.5.7 Decoding the bitmap.\nconst ReusedContexts = [\n  0x9b25, // 10011 0110010 0101\n  0x0795, // 0011 110010 101\n  0x00e5, // 001 11001 01\n  0x0195, // 011001 0101\n];\n\nconst RefinementReusedContexts = [\n  0x0020, // '000' + '0' (coding) + '00010000' + '0' (reference)\n  0x0008, // '0000' + '001000'\n];\n\nfunction decodeBitmapTemplate0(width, height, decodingContext) {\n  const decoder = decodingContext.decoder;\n  const contexts = decodingContext.contextCache.getContexts(\"GB\");\n  const bitmap = [];\n  let contextLabel, i, j, pixel, row, row1, row2;\n\n  // ...ooooo....\n  // ..ooooooo... Context template for current pixel (X)\n  // .ooooX...... (concatenate values of 'o'-pixels to get contextLabel)\n  const OLD_PIXEL_MASK = 0x7bf7; // 01111 0111111 0111\n\n  for (i = 0; i < height; i++) {\n    row = bitmap[i] = new Uint8Array(width);\n    row1 = i < 1 ? row : bitmap[i - 1];\n    row2 = i < 2 ? row : bitmap[i - 2];\n\n    // At the beginning of each row:\n    // Fill contextLabel with pixels that are above/right of (X)\n    contextLabel =\n      (row2[0] << 13) |\n      (row2[1] << 12) |\n      (row2[2] << 11) |\n      (row1[0] << 7) |\n      (row1[1] << 6) |\n      (row1[2] << 5) |\n      (row1[3] << 4);\n\n    for (j = 0; j < width; j++) {\n      row[j] = pixel = decoder.readBit(contexts, contextLabel);\n\n      // At each pixel: Clear contextLabel pixels that are shifted\n      // out of the context, then add new ones.\n      contextLabel =\n        ((contextLabel & OLD_PIXEL_MASK) << 1) |\n        (j + 3 < width ? row2[j + 3] << 11 : 0) |\n        (j + 4 < width ? row1[j + 4] << 4 : 0) |\n        pixel;\n    }\n  }\n\n  return bitmap;\n}\n\n// 6.2 Generic Region Decoding Procedure\nfunction decodeBitmap(\n  mmr,\n  width,\n  height,\n  templateIndex,\n  prediction,\n  skip,\n  at,\n  decodingContext\n) {\n  if (mmr) {\n    const input = new Reader(\n      decodingContext.data,\n      decodingContext.start,\n      decodingContext.end\n    );\n    return decodeMMRBitmap(input, width, height, false);\n  }\n\n  // Use optimized version for the most common case\n  if (\n    templateIndex === 0 &&\n    !skip &&\n    !prediction &&\n    at.length === 4 &&\n    at[0].x === 3 &&\n    at[0].y === -1 &&\n    at[1].x === -3 &&\n    at[1].y === -1 &&\n    at[2].x === 2 &&\n    at[2].y === -2 &&\n    at[3].x === -2 &&\n    at[3].y === -2\n  ) {\n    return decodeBitmapTemplate0(width, height, decodingContext);\n  }\n\n  const useskip = !!skip;\n  const template = CodingTemplates[templateIndex].concat(at);\n\n  // Sorting is non-standard, and it is not required. But sorting increases\n  // the number of template bits that can be reused from the previous\n  // contextLabel in the main loop.\n  template.sort(function (a, b) {\n    return a.y - b.y || a.x - b.x;\n  });\n\n  const templateLength = template.length;\n  const templateX = new Int8Array(templateLength);\n  const templateY = new Int8Array(templateLength);\n  const changingTemplateEntries = [];\n  let reuseMask = 0,\n    minX = 0,\n    maxX = 0,\n    minY = 0;\n  let c, k;\n\n  for (k = 0; k < templateLength; k++) {\n    templateX[k] = template[k].x;\n    templateY[k] = template[k].y;\n    minX = Math.min(minX, template[k].x);\n    maxX = Math.max(maxX, template[k].x);\n    minY = Math.min(minY, template[k].y);\n    // Check if the template pixel appears in two consecutive context labels,\n    // so it can be reused. Otherwise, we add it to the list of changing\n    // template entries.\n    if (\n      k < templateLength - 1 &&\n      template[k].y === template[k + 1].y &&\n      template[k].x === template[k + 1].x - 1\n    ) {\n      reuseMask |= 1 << (templateLength - 1 - k);\n    } else {\n      changingTemplateEntries.push(k);\n    }\n  }\n  const changingEntriesLength = changingTemplateEntries.length;\n\n  const changingTemplateX = new Int8Array(changingEntriesLength);\n  const changingTemplateY = new Int8Array(changingEntriesLength);\n  const changingTemplateBit = new Uint16Array(changingEntriesLength);\n  for (c = 0; c < changingEntriesLength; c++) {\n    k = changingTemplateEntries[c];\n    changingTemplateX[c] = template[k].x;\n    changingTemplateY[c] = template[k].y;\n    changingTemplateBit[c] = 1 << (templateLength - 1 - k);\n  }\n\n  // Get the safe bounding box edges from the width, height, minX, maxX, minY\n  const sbb_left = -minX;\n  const sbb_top = -minY;\n  const sbb_right = width - maxX;\n\n  const pseudoPixelContext = ReusedContexts[templateIndex];\n  let row = new Uint8Array(width);\n  const bitmap = [];\n\n  const decoder = decodingContext.decoder;\n  const contexts = decodingContext.contextCache.getContexts(\"GB\");\n\n  let ltp = 0,\n    j,\n    i0,\n    j0,\n    contextLabel = 0,\n    bit,\n    shift;\n  for (let i = 0; i < height; i++) {\n    if (prediction) {\n      const sltp = decoder.readBit(contexts, pseudoPixelContext);\n      ltp ^= sltp;\n      if (ltp) {\n        bitmap.push(row); // duplicate previous row\n        continue;\n      }\n    }\n    row = new Uint8Array(row);\n    bitmap.push(row);\n    for (j = 0; j < width; j++) {\n      if (useskip && skip[i][j]) {\n        row[j] = 0;\n        continue;\n      }\n      // Are we in the middle of a scanline, so we can reuse contextLabel\n      // bits?\n      if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n        // If yes, we can just shift the bits that are reusable and only\n        // fetch the remaining ones.\n        contextLabel = (contextLabel << 1) & reuseMask;\n        for (k = 0; k < changingEntriesLength; k++) {\n          i0 = i + changingTemplateY[k];\n          j0 = j + changingTemplateX[k];\n          bit = bitmap[i0][j0];\n          if (bit) {\n            bit = changingTemplateBit[k];\n            contextLabel |= bit;\n          }\n        }\n      } else {\n        // compute the contextLabel from scratch\n        contextLabel = 0;\n        shift = templateLength - 1;\n        for (k = 0; k < templateLength; k++, shift--) {\n          j0 = j + templateX[k];\n          if (j0 >= 0 && j0 < width) {\n            i0 = i + templateY[k];\n            if (i0 >= 0) {\n              bit = bitmap[i0][j0];\n              if (bit) {\n                contextLabel |= bit << shift;\n              }\n            }\n          }\n        }\n      }\n      const pixel = decoder.readBit(contexts, contextLabel);\n      row[j] = pixel;\n    }\n  }\n  return bitmap;\n}\n\n// 6.3.2 Generic Refinement Region Decoding Procedure\nfunction decodeRefinement(\n  width,\n  height,\n  templateIndex,\n  referenceBitmap,\n  offsetX,\n  offsetY,\n  prediction,\n  at,\n  decodingContext\n) {\n  let codingTemplate = RefinementTemplates[templateIndex].coding;\n  if (templateIndex === 0) {\n    codingTemplate = codingTemplate.concat([at[0]]);\n  }\n  const codingTemplateLength = codingTemplate.length;\n  const codingTemplateX = new Int32Array(codingTemplateLength);\n  const codingTemplateY = new Int32Array(codingTemplateLength);\n  let k;\n  for (k = 0; k < codingTemplateLength; k++) {\n    codingTemplateX[k] = codingTemplate[k].x;\n    codingTemplateY[k] = codingTemplate[k].y;\n  }\n\n  let referenceTemplate = RefinementTemplates[templateIndex].reference;\n  if (templateIndex === 0) {\n    referenceTemplate = referenceTemplate.concat([at[1]]);\n  }\n  const referenceTemplateLength = referenceTemplate.length;\n  const referenceTemplateX = new Int32Array(referenceTemplateLength);\n  const referenceTemplateY = new Int32Array(referenceTemplateLength);\n  for (k = 0; k < referenceTemplateLength; k++) {\n    referenceTemplateX[k] = referenceTemplate[k].x;\n    referenceTemplateY[k] = referenceTemplate[k].y;\n  }\n  const referenceWidth = referenceBitmap[0].length;\n  const referenceHeight = referenceBitmap.length;\n\n  const pseudoPixelContext = RefinementReusedContexts[templateIndex];\n  const bitmap = [];\n\n  const decoder = decodingContext.decoder;\n  const contexts = decodingContext.contextCache.getContexts(\"GR\");\n\n  let ltp = 0;\n  for (let i = 0; i < height; i++) {\n    if (prediction) {\n      const sltp = decoder.readBit(contexts, pseudoPixelContext);\n      ltp ^= sltp;\n      if (ltp) {\n        throw new Jbig2Error(\"prediction is not supported\");\n      }\n    }\n    const row = new Uint8Array(width);\n    bitmap.push(row);\n    for (let j = 0; j < width; j++) {\n      let i0, j0;\n      let contextLabel = 0;\n      for (k = 0; k < codingTemplateLength; k++) {\n        i0 = i + codingTemplateY[k];\n        j0 = j + codingTemplateX[k];\n        if (i0 < 0 || j0 < 0 || j0 >= width) {\n          contextLabel <<= 1; // out of bound pixel\n        } else {\n          contextLabel = (contextLabel << 1) | bitmap[i0][j0];\n        }\n      }\n      for (k = 0; k < referenceTemplateLength; k++) {\n        i0 = i + referenceTemplateY[k] - offsetY;\n        j0 = j + referenceTemplateX[k] - offsetX;\n        if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {\n          contextLabel <<= 1; // out of bound pixel\n        } else {\n          contextLabel = (contextLabel << 1) | referenceBitmap[i0][j0];\n        }\n      }\n      const pixel = decoder.readBit(contexts, contextLabel);\n      row[j] = pixel;\n    }\n  }\n\n  return bitmap;\n}\n\n// 6.5.5 Decoding the symbol dictionary\nfunction decodeSymbolDictionary(\n  huffman,\n  refinement,\n  symbols,\n  numberOfNewSymbols,\n  numberOfExportedSymbols,\n  huffmanTables,\n  templateIndex,\n  at,\n  refinementTemplateIndex,\n  refinementAt,\n  decodingContext,\n  huffmanInput\n) {\n  if (huffman && refinement) {\n    throw new Jbig2Error(\"symbol refinement with Huffman is not supported\");\n  }\n\n  const newSymbols = [];\n  let currentHeight = 0;\n  let symbolCodeLength = log2(symbols.length + numberOfNewSymbols);\n\n  const decoder = decodingContext.decoder;\n  const contextCache = decodingContext.contextCache;\n  let tableB1, symbolWidths;\n  if (huffman) {\n    tableB1 = getStandardTable(1); // standard table B.1\n    symbolWidths = [];\n    symbolCodeLength = Math.max(symbolCodeLength, 1); // 6.5.8.2.3\n  }\n\n  while (newSymbols.length < numberOfNewSymbols) {\n    const deltaHeight = huffman\n      ? huffmanTables.tableDeltaHeight.decode(huffmanInput)\n      : decodeInteger(contextCache, \"IADH\", decoder); // 6.5.6\n    currentHeight += deltaHeight;\n    let currentWidth = 0,\n      totalWidth = 0;\n    const firstSymbol = huffman ? symbolWidths.length : 0;\n    while (true) {\n      const deltaWidth = huffman\n        ? huffmanTables.tableDeltaWidth.decode(huffmanInput)\n        : decodeInteger(contextCache, \"IADW\", decoder); // 6.5.7\n      if (deltaWidth === null) {\n        break; // OOB\n      }\n      currentWidth += deltaWidth;\n      totalWidth += currentWidth;\n      let bitmap;\n      if (refinement) {\n        // 6.5.8.2 Refinement/aggregate-coded symbol bitmap\n        const numberOfInstances = decodeInteger(contextCache, \"IAAI\", decoder);\n        if (numberOfInstances > 1) {\n          bitmap = decodeTextRegion(\n            huffman,\n            refinement,\n            currentWidth,\n            currentHeight,\n            0,\n            numberOfInstances,\n            1, // strip size\n            symbols.concat(newSymbols),\n            symbolCodeLength,\n            0, // transposed\n            0, // ds offset\n            1, // top left 7.4.3.1.1\n            0, // OR operator\n            huffmanTables,\n            refinementTemplateIndex,\n            refinementAt,\n            decodingContext,\n            0,\n            huffmanInput\n          );\n        } else {\n          const symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n          const rdx = decodeInteger(contextCache, \"IARDX\", decoder); // 6.4.11.3\n          const rdy = decodeInteger(contextCache, \"IARDY\", decoder); // 6.4.11.4\n          const symbol =\n            symbolId < symbols.length\n              ? symbols[symbolId]\n              : newSymbols[symbolId - symbols.length];\n          bitmap = decodeRefinement(\n            currentWidth,\n            currentHeight,\n            refinementTemplateIndex,\n            symbol,\n            rdx,\n            rdy,\n            false,\n            refinementAt,\n            decodingContext\n          );\n        }\n        newSymbols.push(bitmap);\n      } else if (huffman) {\n        // Store only symbol width and decode a collective bitmap when the\n        // height class is done.\n        symbolWidths.push(currentWidth);\n      } else {\n        // 6.5.8.1 Direct-coded symbol bitmap\n        bitmap = decodeBitmap(\n          false,\n          currentWidth,\n          currentHeight,\n          templateIndex,\n          false,\n          null,\n          at,\n          decodingContext\n        );\n        newSymbols.push(bitmap);\n      }\n    }\n    if (huffman && !refinement) {\n      // 6.5.9 Height class collective bitmap\n      const bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);\n      huffmanInput.byteAlign();\n      let collectiveBitmap;\n      if (bitmapSize === 0) {\n        // Uncompressed collective bitmap\n        collectiveBitmap = readUncompressedBitmap(\n          huffmanInput,\n          totalWidth,\n          currentHeight\n        );\n      } else {\n        // MMR collective bitmap\n        const originalEnd = huffmanInput.end;\n        const bitmapEnd = huffmanInput.position + bitmapSize;\n        huffmanInput.end = bitmapEnd;\n        collectiveBitmap = decodeMMRBitmap(\n          huffmanInput,\n          totalWidth,\n          currentHeight,\n          false\n        );\n        huffmanInput.end = originalEnd;\n        huffmanInput.position = bitmapEnd;\n      }\n      const numberOfSymbolsDecoded = symbolWidths.length;\n      if (firstSymbol === numberOfSymbolsDecoded - 1) {\n        // collectiveBitmap is a single symbol.\n        newSymbols.push(collectiveBitmap);\n      } else {\n        // Divide collectiveBitmap into symbols.\n        let i,\n          y,\n          xMin = 0,\n          xMax,\n          bitmapWidth,\n          symbolBitmap;\n        for (i = firstSymbol; i < numberOfSymbolsDecoded; i++) {\n          bitmapWidth = symbolWidths[i];\n          xMax = xMin + bitmapWidth;\n          symbolBitmap = [];\n          for (y = 0; y < currentHeight; y++) {\n            symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n          }\n          newSymbols.push(symbolBitmap);\n          xMin = xMax;\n        }\n      }\n    }\n  }\n\n  // 6.5.10 Exported symbols\n  const exportedSymbols = [],\n    flags = [];\n  let currentFlag = false,\n    i,\n    ii;\n  const totalSymbolsLength = symbols.length + numberOfNewSymbols;\n  while (flags.length < totalSymbolsLength) {\n    let runLength = huffman\n      ? tableB1.decode(huffmanInput)\n      : decodeInteger(contextCache, \"IAEX\", decoder);\n    while (runLength--) {\n      flags.push(currentFlag);\n    }\n    currentFlag = !currentFlag;\n  }\n  for (i = 0, ii = symbols.length; i < ii; i++) {\n    if (flags[i]) {\n      exportedSymbols.push(symbols[i]);\n    }\n  }\n  for (let j = 0; j < numberOfNewSymbols; i++, j++) {\n    if (flags[i]) {\n      exportedSymbols.push(newSymbols[j]);\n    }\n  }\n  return exportedSymbols;\n}\n\nfunction decodeTextRegion(\n  huffman,\n  refinement,\n  width,\n  height,\n  defaultPixelValue,\n  numberOfSymbolInstances,\n  stripSize,\n  inputSymbols,\n  symbolCodeLength,\n  transposed,\n  dsOffset,\n  referenceCorner,\n  combinationOperator,\n  huffmanTables,\n  refinementTemplateIndex,\n  refinementAt,\n  decodingContext,\n  logStripSize,\n  huffmanInput\n) {\n  if (huffman && refinement) {\n    throw new Jbig2Error(\"refinement with Huffman is not supported\");\n  }\n\n  // Prepare bitmap\n  const bitmap = [];\n  let i, row;\n  for (i = 0; i < height; i++) {\n    row = new Uint8Array(width);\n    if (defaultPixelValue) {\n      for (let j = 0; j < width; j++) {\n        row[j] = defaultPixelValue;\n      }\n    }\n    bitmap.push(row);\n  }\n\n  const decoder = decodingContext.decoder;\n  const contextCache = decodingContext.contextCache;\n\n  let stripT = huffman\n    ? -huffmanTables.tableDeltaT.decode(huffmanInput)\n    : -decodeInteger(contextCache, \"IADT\", decoder); // 6.4.6\n  let firstS = 0;\n  i = 0;\n  while (i < numberOfSymbolInstances) {\n    const deltaT = huffman\n      ? huffmanTables.tableDeltaT.decode(huffmanInput)\n      : decodeInteger(contextCache, \"IADT\", decoder); // 6.4.6\n    stripT += deltaT;\n\n    const deltaFirstS = huffman\n      ? huffmanTables.tableFirstS.decode(huffmanInput)\n      : decodeInteger(contextCache, \"IAFS\", decoder); // 6.4.7\n    firstS += deltaFirstS;\n    let currentS = firstS;\n    do {\n      let currentT = 0; // 6.4.9\n      if (stripSize > 1) {\n        currentT = huffman\n          ? huffmanInput.readBits(logStripSize)\n          : decodeInteger(contextCache, \"IAIT\", decoder);\n      }\n      const t = stripSize * stripT + currentT;\n      const symbolId = huffman\n        ? huffmanTables.symbolIDTable.decode(huffmanInput)\n        : decodeIAID(contextCache, decoder, symbolCodeLength);\n      const applyRefinement =\n        refinement &&\n        (huffman\n          ? huffmanInput.readBit()\n          : decodeInteger(contextCache, \"IARI\", decoder));\n      let symbolBitmap = inputSymbols[symbolId];\n      let symbolWidth = symbolBitmap[0].length;\n      let symbolHeight = symbolBitmap.length;\n      if (applyRefinement) {\n        const rdw = decodeInteger(contextCache, \"IARDW\", decoder); // 6.4.11.1\n        const rdh = decodeInteger(contextCache, \"IARDH\", decoder); // 6.4.11.2\n        const rdx = decodeInteger(contextCache, \"IARDX\", decoder); // 6.4.11.3\n        const rdy = decodeInteger(contextCache, \"IARDY\", decoder); // 6.4.11.4\n        symbolWidth += rdw;\n        symbolHeight += rdh;\n        symbolBitmap = decodeRefinement(\n          symbolWidth,\n          symbolHeight,\n          refinementTemplateIndex,\n          symbolBitmap,\n          (rdw >> 1) + rdx,\n          (rdh >> 1) + rdy,\n          false,\n          refinementAt,\n          decodingContext\n        );\n      }\n      const offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);\n      const offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);\n      let s2, t2, symbolRow;\n      if (transposed) {\n        // Place Symbol Bitmap from T1,S1\n        for (s2 = 0; s2 < symbolHeight; s2++) {\n          row = bitmap[offsetS + s2];\n          if (!row) {\n            continue;\n          }\n          symbolRow = symbolBitmap[s2];\n          // To ignore Parts of Symbol bitmap which goes\n          // outside bitmap region\n          const maxWidth = Math.min(width - offsetT, symbolWidth);\n          switch (combinationOperator) {\n            case 0: // OR\n              for (t2 = 0; t2 < maxWidth; t2++) {\n                row[offsetT + t2] |= symbolRow[t2];\n              }\n              break;\n            case 2: // XOR\n              for (t2 = 0; t2 < maxWidth; t2++) {\n                row[offsetT + t2] ^= symbolRow[t2];\n              }\n              break;\n            default:\n              throw new Jbig2Error(\n                `operator ${combinationOperator} is not supported`\n              );\n          }\n        }\n        currentS += symbolHeight - 1;\n      } else {\n        for (t2 = 0; t2 < symbolHeight; t2++) {\n          row = bitmap[offsetT + t2];\n          if (!row) {\n            continue;\n          }\n          symbolRow = symbolBitmap[t2];\n          switch (combinationOperator) {\n            case 0: // OR\n              for (s2 = 0; s2 < symbolWidth; s2++) {\n                row[offsetS + s2] |= symbolRow[s2];\n              }\n              break;\n            case 2: // XOR\n              for (s2 = 0; s2 < symbolWidth; s2++) {\n                row[offsetS + s2] ^= symbolRow[s2];\n              }\n              break;\n            default:\n              throw new Jbig2Error(\n                `operator ${combinationOperator} is not supported`\n              );\n          }\n        }\n        currentS += symbolWidth - 1;\n      }\n      i++;\n      const deltaS = huffman\n        ? huffmanTables.tableDeltaS.decode(huffmanInput)\n        : decodeInteger(contextCache, \"IADS\", decoder); // 6.4.8\n      if (deltaS === null) {\n        break; // OOB\n      }\n      currentS += deltaS + dsOffset;\n    } while (true);\n  }\n  return bitmap;\n}\n\nfunction decodePatternDictionary(\n  mmr,\n  patternWidth,\n  patternHeight,\n  maxPatternIndex,\n  template,\n  decodingContext\n) {\n  const at = [];\n  if (!mmr) {\n    at.push({\n      x: -patternWidth,\n      y: 0,\n    });\n    if (template === 0) {\n      at.push(\n        {\n          x: -3,\n          y: -1,\n        },\n        {\n          x: 2,\n          y: -2,\n        },\n        {\n          x: -2,\n          y: -2,\n        }\n      );\n    }\n  }\n  const collectiveWidth = (maxPatternIndex + 1) * patternWidth;\n  const collectiveBitmap = decodeBitmap(\n    mmr,\n    collectiveWidth,\n    patternHeight,\n    template,\n    false,\n    null,\n    at,\n    decodingContext\n  );\n  // Divide collective bitmap into patterns.\n  const patterns = [];\n  for (let i = 0; i <= maxPatternIndex; i++) {\n    const patternBitmap = [];\n    const xMin = patternWidth * i;\n    const xMax = xMin + patternWidth;\n    for (let y = 0; y < patternHeight; y++) {\n      patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));\n    }\n    patterns.push(patternBitmap);\n  }\n  return patterns;\n}\n\nfunction decodeHalftoneRegion(\n  mmr,\n  patterns,\n  template,\n  regionWidth,\n  regionHeight,\n  defaultPixelValue,\n  enableSkip,\n  combinationOperator,\n  gridWidth,\n  gridHeight,\n  gridOffsetX,\n  gridOffsetY,\n  gridVectorX,\n  gridVectorY,\n  decodingContext\n) {\n  const skip = null;\n  if (enableSkip) {\n    throw new Jbig2Error(\"skip is not supported\");\n  }\n  if (combinationOperator !== 0) {\n    throw new Jbig2Error(\n      `operator \"${combinationOperator}\" is not supported in halftone region`\n    );\n  }\n\n  // Prepare bitmap.\n  const regionBitmap = [];\n  let i, j, row;\n  for (i = 0; i < regionHeight; i++) {\n    row = new Uint8Array(regionWidth);\n    if (defaultPixelValue) {\n      for (j = 0; j < regionWidth; j++) {\n        row[j] = defaultPixelValue;\n      }\n    }\n    regionBitmap.push(row);\n  }\n\n  const numberOfPatterns = patterns.length;\n  const pattern0 = patterns[0];\n  const patternWidth = pattern0[0].length,\n    patternHeight = pattern0.length;\n  const bitsPerValue = log2(numberOfPatterns);\n  const at = [];\n  if (!mmr) {\n    at.push({\n      x: template <= 1 ? 3 : 2,\n      y: -1,\n    });\n    if (template === 0) {\n      at.push(\n        {\n          x: -3,\n          y: -1,\n        },\n        {\n          x: 2,\n          y: -2,\n        },\n        {\n          x: -2,\n          y: -2,\n        }\n      );\n    }\n  }\n  // Annex C. Gray-scale Image Decoding Procedure.\n  const grayScaleBitPlanes = [];\n  let mmrInput, bitmap;\n  if (mmr) {\n    // MMR bit planes are in one continuous stream. Only EOFB codes indicate\n    // the end of each bitmap, so EOFBs must be decoded.\n    mmrInput = new Reader(\n      decodingContext.data,\n      decodingContext.start,\n      decodingContext.end\n    );\n  }\n  for (i = bitsPerValue - 1; i >= 0; i--) {\n    if (mmr) {\n      bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);\n    } else {\n      bitmap = decodeBitmap(\n        false,\n        gridWidth,\n        gridHeight,\n        template,\n        false,\n        skip,\n        at,\n        decodingContext\n      );\n    }\n    grayScaleBitPlanes[i] = bitmap;\n  }\n  // 6.6.5.2 Rendering the patterns.\n  let mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;\n  for (mg = 0; mg < gridHeight; mg++) {\n    for (ng = 0; ng < gridWidth; ng++) {\n      bit = 0;\n      patternIndex = 0;\n      for (j = bitsPerValue - 1; j >= 0; j--) {\n        bit = grayScaleBitPlanes[j][mg][ng] ^ bit; // Gray decoding\n        patternIndex |= bit << j;\n      }\n      patternBitmap = patterns[patternIndex];\n      x = (gridOffsetX + mg * gridVectorY + ng * gridVectorX) >> 8;\n      y = (gridOffsetY + mg * gridVectorX - ng * gridVectorY) >> 8;\n      // Draw patternBitmap at (x, y).\n      if (\n        x >= 0 &&\n        x + patternWidth <= regionWidth &&\n        y >= 0 &&\n        y + patternHeight <= regionHeight\n      ) {\n        for (i = 0; i < patternHeight; i++) {\n          regionRow = regionBitmap[y + i];\n          patternRow = patternBitmap[i];\n          for (j = 0; j < patternWidth; j++) {\n            regionRow[x + j] |= patternRow[j];\n          }\n        }\n      } else {\n        let regionX, regionY;\n        for (i = 0; i < patternHeight; i++) {\n          regionY = y + i;\n          if (regionY < 0 || regionY >= regionHeight) {\n            continue;\n          }\n          regionRow = regionBitmap[regionY];\n          patternRow = patternBitmap[i];\n          for (j = 0; j < patternWidth; j++) {\n            regionX = x + j;\n            if (regionX >= 0 && regionX < regionWidth) {\n              regionRow[regionX] |= patternRow[j];\n            }\n          }\n        }\n      }\n    }\n  }\n  return regionBitmap;\n}\n\nfunction readSegmentHeader(data, start) {\n  const segmentHeader = {};\n  segmentHeader.number = readUint32(data, start);\n  const flags = data[start + 4];\n  const segmentType = flags & 0x3f;\n  if (!SegmentTypes[segmentType]) {\n    throw new Jbig2Error(\"invalid segment type: \" + segmentType);\n  }\n  segmentHeader.type = segmentType;\n  segmentHeader.typeName = SegmentTypes[segmentType];\n  segmentHeader.deferredNonRetain = !!(flags & 0x80);\n\n  const pageAssociationFieldSize = !!(flags & 0x40);\n  const referredFlags = data[start + 5];\n  let referredToCount = (referredFlags >> 5) & 7;\n  const retainBits = [referredFlags & 31];\n  let position = start + 6;\n  if (referredFlags === 7) {\n    referredToCount = readUint32(data, position - 1) & 0x1fffffff;\n    position += 3;\n    let bytes = (referredToCount + 7) >> 3;\n    retainBits[0] = data[position++];\n    while (--bytes > 0) {\n      retainBits.push(data[position++]);\n    }\n  } else if (referredFlags === 5 || referredFlags === 6) {\n    throw new Jbig2Error(\"invalid referred-to flags\");\n  }\n\n  segmentHeader.retainBits = retainBits;\n\n  let referredToSegmentNumberSize = 4;\n  if (segmentHeader.number <= 256) {\n    referredToSegmentNumberSize = 1;\n  } else if (segmentHeader.number <= 65536) {\n    referredToSegmentNumberSize = 2;\n  }\n  const referredTo = [];\n  let i, ii;\n  for (i = 0; i < referredToCount; i++) {\n    let number;\n    if (referredToSegmentNumberSize === 1) {\n      number = data[position];\n    } else if (referredToSegmentNumberSize === 2) {\n      number = readUint16(data, position);\n    } else {\n      number = readUint32(data, position);\n    }\n    referredTo.push(number);\n    position += referredToSegmentNumberSize;\n  }\n  segmentHeader.referredTo = referredTo;\n  if (!pageAssociationFieldSize) {\n    segmentHeader.pageAssociation = data[position++];\n  } else {\n    segmentHeader.pageAssociation = readUint32(data, position);\n    position += 4;\n  }\n  segmentHeader.length = readUint32(data, position);\n  position += 4;\n\n  if (segmentHeader.length === 0xffffffff) {\n    // 7.2.7 Segment data length, unknown segment length\n    if (segmentType === 38) {\n      // ImmediateGenericRegion\n      const genericRegionInfo = readRegionSegmentInformation(data, position);\n      const genericRegionSegmentFlags =\n        data[position + RegionSegmentInformationFieldLength];\n      const genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n      // searching for the segment end\n      const searchPatternLength = 6;\n      const searchPattern = new Uint8Array(searchPatternLength);\n      if (!genericRegionMmr) {\n        searchPattern[0] = 0xff;\n        searchPattern[1] = 0xac;\n      }\n      searchPattern[2] = (genericRegionInfo.height >>> 24) & 0xff;\n      searchPattern[3] = (genericRegionInfo.height >> 16) & 0xff;\n      searchPattern[4] = (genericRegionInfo.height >> 8) & 0xff;\n      searchPattern[5] = genericRegionInfo.height & 0xff;\n      for (i = position, ii = data.length; i < ii; i++) {\n        let j = 0;\n        while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n          j++;\n        }\n        if (j === searchPatternLength) {\n          segmentHeader.length = i + searchPatternLength;\n          break;\n        }\n      }\n      if (segmentHeader.length === 0xffffffff) {\n        throw new Jbig2Error(\"segment end was not found\");\n      }\n    } else {\n      throw new Jbig2Error(\"invalid unknown segment length\");\n    }\n  }\n  segmentHeader.headerEnd = position;\n  return segmentHeader;\n}\n\nfunction readSegments(header, data, start, end) {\n  const segments = [];\n  let position = start;\n  while (position < end) {\n    const segmentHeader = readSegmentHeader(data, position);\n    position = segmentHeader.headerEnd;\n    const segment = {\n      header: segmentHeader,\n      data,\n    };\n    if (!header.randomAccess) {\n      segment.start = position;\n      position += segmentHeader.length;\n      segment.end = position;\n    }\n    segments.push(segment);\n    if (segmentHeader.type === 51) {\n      break; // end of file is found\n    }\n  }\n  if (header.randomAccess) {\n    for (let i = 0, ii = segments.length; i < ii; i++) {\n      segments[i].start = position;\n      position += segments[i].header.length;\n      segments[i].end = position;\n    }\n  }\n  return segments;\n}\n\n// 7.4.1 Region segment information field\nfunction readRegionSegmentInformation(data, start) {\n  return {\n    width: readUint32(data, start),\n    height: readUint32(data, start + 4),\n    x: readUint32(data, start + 8),\n    y: readUint32(data, start + 12),\n    combinationOperator: data[start + 16] & 7,\n  };\n}\nconst RegionSegmentInformationFieldLength = 17;\n\nfunction processSegment(segment, visitor) {\n  const header = segment.header;\n\n  const data = segment.data,\n    end = segment.end;\n  let position = segment.start;\n  let args, at, i, atLength;\n  switch (header.type) {\n    case 0: // SymbolDictionary\n      // 7.4.2 Symbol dictionary segment syntax\n      const dictionary = {};\n      const dictionaryFlags = readUint16(data, position); // 7.4.2.1.1\n      dictionary.huffman = !!(dictionaryFlags & 1);\n      dictionary.refinement = !!(dictionaryFlags & 2);\n      dictionary.huffmanDHSelector = (dictionaryFlags >> 2) & 3;\n      dictionary.huffmanDWSelector = (dictionaryFlags >> 4) & 3;\n      dictionary.bitmapSizeSelector = (dictionaryFlags >> 6) & 1;\n      dictionary.aggregationInstancesSelector = (dictionaryFlags >> 7) & 1;\n      dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n      dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n      dictionary.template = (dictionaryFlags >> 10) & 3;\n      dictionary.refinementTemplate = (dictionaryFlags >> 12) & 1;\n      position += 2;\n      if (!dictionary.huffman) {\n        atLength = dictionary.template === 0 ? 4 : 1;\n        at = [];\n        for (i = 0; i < atLength; i++) {\n          at.push({\n            x: readInt8(data, position),\n            y: readInt8(data, position + 1),\n          });\n          position += 2;\n        }\n        dictionary.at = at;\n      }\n      if (dictionary.refinement && !dictionary.refinementTemplate) {\n        at = [];\n        for (i = 0; i < 2; i++) {\n          at.push({\n            x: readInt8(data, position),\n            y: readInt8(data, position + 1),\n          });\n          position += 2;\n        }\n        dictionary.refinementAt = at;\n      }\n      dictionary.numberOfExportedSymbols = readUint32(data, position);\n      position += 4;\n      dictionary.numberOfNewSymbols = readUint32(data, position);\n      position += 4;\n      args = [\n        dictionary,\n        header.number,\n        header.referredTo,\n        data,\n        position,\n        end,\n      ];\n      break;\n    case 6: // ImmediateTextRegion\n    case 7: // ImmediateLosslessTextRegion\n      const textRegion = {};\n      textRegion.info = readRegionSegmentInformation(data, position);\n      position += RegionSegmentInformationFieldLength;\n      const textRegionSegmentFlags = readUint16(data, position);\n      position += 2;\n      textRegion.huffman = !!(textRegionSegmentFlags & 1);\n      textRegion.refinement = !!(textRegionSegmentFlags & 2);\n      textRegion.logStripSize = (textRegionSegmentFlags >> 2) & 3;\n      textRegion.stripSize = 1 << textRegion.logStripSize;\n      textRegion.referenceCorner = (textRegionSegmentFlags >> 4) & 3;\n      textRegion.transposed = !!(textRegionSegmentFlags & 64);\n      textRegion.combinationOperator = (textRegionSegmentFlags >> 7) & 3;\n      textRegion.defaultPixelValue = (textRegionSegmentFlags >> 9) & 1;\n      textRegion.dsOffset = (textRegionSegmentFlags << 17) >> 27;\n      textRegion.refinementTemplate = (textRegionSegmentFlags >> 15) & 1;\n      if (textRegion.huffman) {\n        const textRegionHuffmanFlags = readUint16(data, position);\n        position += 2;\n        textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n        textRegion.huffmanDS = (textRegionHuffmanFlags >> 2) & 3;\n        textRegion.huffmanDT = (textRegionHuffmanFlags >> 4) & 3;\n        textRegion.huffmanRefinementDW = (textRegionHuffmanFlags >> 6) & 3;\n        textRegion.huffmanRefinementDH = (textRegionHuffmanFlags >> 8) & 3;\n        textRegion.huffmanRefinementDX = (textRegionHuffmanFlags >> 10) & 3;\n        textRegion.huffmanRefinementDY = (textRegionHuffmanFlags >> 12) & 3;\n        textRegion.huffmanRefinementSizeSelector = !!(\n          textRegionHuffmanFlags & 0x4000\n        );\n      }\n      if (textRegion.refinement && !textRegion.refinementTemplate) {\n        at = [];\n        for (i = 0; i < 2; i++) {\n          at.push({\n            x: readInt8(data, position),\n            y: readInt8(data, position + 1),\n          });\n          position += 2;\n        }\n        textRegion.refinementAt = at;\n      }\n      textRegion.numberOfSymbolInstances = readUint32(data, position);\n      position += 4;\n      args = [textRegion, header.referredTo, data, position, end];\n      break;\n    case 16: // PatternDictionary\n      // 7.4.4. Pattern dictionary segment syntax\n      const patternDictionary = {};\n      const patternDictionaryFlags = data[position++];\n      patternDictionary.mmr = !!(patternDictionaryFlags & 1);\n      patternDictionary.template = (patternDictionaryFlags >> 1) & 3;\n      patternDictionary.patternWidth = data[position++];\n      patternDictionary.patternHeight = data[position++];\n      patternDictionary.maxPatternIndex = readUint32(data, position);\n      position += 4;\n      args = [patternDictionary, header.number, data, position, end];\n      break;\n    case 22: // ImmediateHalftoneRegion\n    case 23: // ImmediateLosslessHalftoneRegion\n      // 7.4.5 Halftone region segment syntax\n      const halftoneRegion = {};\n      halftoneRegion.info = readRegionSegmentInformation(data, position);\n      position += RegionSegmentInformationFieldLength;\n      const halftoneRegionFlags = data[position++];\n      halftoneRegion.mmr = !!(halftoneRegionFlags & 1);\n      halftoneRegion.template = (halftoneRegionFlags >> 1) & 3;\n      halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);\n      halftoneRegion.combinationOperator = (halftoneRegionFlags >> 4) & 7;\n      halftoneRegion.defaultPixelValue = (halftoneRegionFlags >> 7) & 1;\n      halftoneRegion.gridWidth = readUint32(data, position);\n      position += 4;\n      halftoneRegion.gridHeight = readUint32(data, position);\n      position += 4;\n      halftoneRegion.gridOffsetX = readUint32(data, position) & 0xffffffff;\n      position += 4;\n      halftoneRegion.gridOffsetY = readUint32(data, position) & 0xffffffff;\n      position += 4;\n      halftoneRegion.gridVectorX = readUint16(data, position);\n      position += 2;\n      halftoneRegion.gridVectorY = readUint16(data, position);\n      position += 2;\n      args = [halftoneRegion, header.referredTo, data, position, end];\n      break;\n    case 38: // ImmediateGenericRegion\n    case 39: // ImmediateLosslessGenericRegion\n      const genericRegion = {};\n      genericRegion.info = readRegionSegmentInformation(data, position);\n      position += RegionSegmentInformationFieldLength;\n      const genericRegionSegmentFlags = data[position++];\n      genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n      genericRegion.template = (genericRegionSegmentFlags >> 1) & 3;\n      genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n      if (!genericRegion.mmr) {\n        atLength = genericRegion.template === 0 ? 4 : 1;\n        at = [];\n        for (i = 0; i < atLength; i++) {\n          at.push({\n            x: readInt8(data, position),\n            y: readInt8(data, position + 1),\n          });\n          position += 2;\n        }\n        genericRegion.at = at;\n      }\n      args = [genericRegion, data, position, end];\n      break;\n    case 48: // PageInformation\n      const pageInfo = {\n        width: readUint32(data, position),\n        height: readUint32(data, position + 4),\n        resolutionX: readUint32(data, position + 8),\n        resolutionY: readUint32(data, position + 12),\n      };\n      if (pageInfo.height === 0xffffffff) {\n        delete pageInfo.height;\n      }\n      const pageSegmentFlags = data[position + 16];\n      readUint16(data, position + 17); // pageStripingInformation\n      pageInfo.lossless = !!(pageSegmentFlags & 1);\n      pageInfo.refinement = !!(pageSegmentFlags & 2);\n      pageInfo.defaultPixelValue = (pageSegmentFlags >> 2) & 1;\n      pageInfo.combinationOperator = (pageSegmentFlags >> 3) & 3;\n      pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n      pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n      args = [pageInfo];\n      break;\n    case 49: // EndOfPage\n      break;\n    case 50: // EndOfStripe\n      break;\n    case 51: // EndOfFile\n      break;\n    case 53: // Tables\n      args = [header.number, data, position, end];\n      break;\n    case 62: // 7.4.15 defines 2 extension types which\n      // are comments and can be ignored.\n      break;\n    default:\n      throw new Jbig2Error(\n        `segment type ${header.typeName}(${header.type})` +\n          \" is not implemented\"\n      );\n  }\n  const callbackName = \"on\" + header.typeName;\n  if (callbackName in visitor) {\n    visitor[callbackName].apply(visitor, args);\n  }\n}\n\nfunction processSegments(segments, visitor) {\n  for (let i = 0, ii = segments.length; i < ii; i++) {\n    processSegment(segments[i], visitor);\n  }\n}\n\nfunction parseJbig2Chunks(chunks) {\n  const visitor = new SimpleSegmentVisitor();\n  for (let i = 0, ii = chunks.length; i < ii; i++) {\n    const chunk = chunks[i];\n    const segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n    processSegments(segments, visitor);\n  }\n  return visitor.buffer;\n}\n\nfunction parseJbig2(data) {\n  const end = data.length;\n  let position = 0;\n\n  if (\n    data[position] !== 0x97 ||\n    data[position + 1] !== 0x4a ||\n    data[position + 2] !== 0x42 ||\n    data[position + 3] !== 0x32 ||\n    data[position + 4] !== 0x0d ||\n    data[position + 5] !== 0x0a ||\n    data[position + 6] !== 0x1a ||\n    data[position + 7] !== 0x0a\n  ) {\n    throw new Jbig2Error(\"parseJbig2 - invalid header.\");\n  }\n\n  const header = Object.create(null);\n  position += 8;\n  const flags = data[position++];\n  header.randomAccess = !(flags & 1);\n  if (!(flags & 2)) {\n    header.numberOfPages = readUint32(data, position);\n    position += 4;\n  }\n\n  const segments = readSegments(header, data, position, end);\n  const visitor = new SimpleSegmentVisitor();\n  processSegments(segments, visitor);\n\n  const { width, height } = visitor.currentPageInfo;\n  const bitPacked = visitor.buffer;\n  const imgData = new Uint8ClampedArray(width * height);\n  let q = 0,\n    k = 0;\n  for (let i = 0; i < height; i++) {\n    let mask = 0,\n      buffer;\n    for (let j = 0; j < width; j++) {\n      if (!mask) {\n        mask = 128;\n        buffer = bitPacked[k++];\n      }\n      imgData[q++] = buffer & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  return { imgData, width, height };\n}\n\nclass SimpleSegmentVisitor {\n  onPageInformation(info) {\n    this.currentPageInfo = info;\n    const rowSize = (info.width + 7) >> 3;\n    const buffer = new Uint8ClampedArray(rowSize * info.height);\n    // The contents of ArrayBuffers are initialized to 0.\n    // Fill the buffer with 0xFF only if info.defaultPixelValue is set\n    if (info.defaultPixelValue) {\n      for (let i = 0, ii = buffer.length; i < ii; i++) {\n        buffer[i] = 0xff;\n      }\n    }\n    this.buffer = buffer;\n  }\n\n  drawBitmap(regionInfo, bitmap) {\n    const pageInfo = this.currentPageInfo;\n    const width = regionInfo.width,\n      height = regionInfo.height;\n    const rowSize = (pageInfo.width + 7) >> 3;\n    const combinationOperator = pageInfo.combinationOperatorOverride\n      ? regionInfo.combinationOperator\n      : pageInfo.combinationOperator;\n    const buffer = this.buffer;\n    const mask0 = 128 >> (regionInfo.x & 7);\n    let offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n    let i, j, mask, offset;\n    switch (combinationOperator) {\n      case 0: // OR\n        for (i = 0; i < height; i++) {\n          mask = mask0;\n          offset = offset0;\n          for (j = 0; j < width; j++) {\n            if (bitmap[i][j]) {\n              buffer[offset] |= mask;\n            }\n            mask >>= 1;\n            if (!mask) {\n              mask = 128;\n              offset++;\n            }\n          }\n          offset0 += rowSize;\n        }\n        break;\n      case 2: // XOR\n        for (i = 0; i < height; i++) {\n          mask = mask0;\n          offset = offset0;\n          for (j = 0; j < width; j++) {\n            if (bitmap[i][j]) {\n              buffer[offset] ^= mask;\n            }\n            mask >>= 1;\n            if (!mask) {\n              mask = 128;\n              offset++;\n            }\n          }\n          offset0 += rowSize;\n        }\n        break;\n      default:\n        throw new Jbig2Error(\n          `operator ${combinationOperator} is not supported`\n        );\n    }\n  }\n\n  onImmediateGenericRegion(region, data, start, end) {\n    const regionInfo = region.info;\n    const decodingContext = new DecodingContext(data, start, end);\n    const bitmap = decodeBitmap(\n      region.mmr,\n      regionInfo.width,\n      regionInfo.height,\n      region.template,\n      region.prediction,\n      null,\n      region.at,\n      decodingContext\n    );\n    this.drawBitmap(regionInfo, bitmap);\n  }\n\n  onImmediateLosslessGenericRegion() {\n    this.onImmediateGenericRegion.apply(this, arguments);\n  }\n\n  onSymbolDictionary(\n    dictionary,\n    currentSegment,\n    referredSegments,\n    data,\n    start,\n    end\n  ) {\n    let huffmanTables, huffmanInput;\n    if (dictionary.huffman) {\n      huffmanTables = getSymbolDictionaryHuffmanTables(\n        dictionary,\n        referredSegments,\n        this.customTables\n      );\n      huffmanInput = new Reader(data, start, end);\n    }\n\n    // Combines exported symbols from all referred segments\n    let symbols = this.symbols;\n    if (!symbols) {\n      this.symbols = symbols = {};\n    }\n\n    let inputSymbols = [];\n    for (let i = 0, ii = referredSegments.length; i < ii; i++) {\n      const referredSymbols = symbols[referredSegments[i]];\n      // referredSymbols is undefined when we have a reference to a Tables\n      // segment instead of a SymbolDictionary.\n      if (referredSymbols) {\n        inputSymbols = inputSymbols.concat(referredSymbols);\n      }\n    }\n\n    const decodingContext = new DecodingContext(data, start, end);\n    symbols[currentSegment] = decodeSymbolDictionary(\n      dictionary.huffman,\n      dictionary.refinement,\n      inputSymbols,\n      dictionary.numberOfNewSymbols,\n      dictionary.numberOfExportedSymbols,\n      huffmanTables,\n      dictionary.template,\n      dictionary.at,\n      dictionary.refinementTemplate,\n      dictionary.refinementAt,\n      decodingContext,\n      huffmanInput\n    );\n  }\n\n  onImmediateTextRegion(region, referredSegments, data, start, end) {\n    const regionInfo = region.info;\n    let huffmanTables, huffmanInput;\n\n    // Combines exported symbols from all referred segments\n    const symbols = this.symbols;\n    let inputSymbols = [];\n    for (let i = 0, ii = referredSegments.length; i < ii; i++) {\n      const referredSymbols = symbols[referredSegments[i]];\n      // referredSymbols is undefined when we have a reference to a Tables\n      // segment instead of a SymbolDictionary.\n      if (referredSymbols) {\n        inputSymbols = inputSymbols.concat(referredSymbols);\n      }\n    }\n    const symbolCodeLength = log2(inputSymbols.length);\n    if (region.huffman) {\n      huffmanInput = new Reader(data, start, end);\n      huffmanTables = getTextRegionHuffmanTables(\n        region,\n        referredSegments,\n        this.customTables,\n        inputSymbols.length,\n        huffmanInput\n      );\n    }\n\n    const decodingContext = new DecodingContext(data, start, end);\n    const bitmap = decodeTextRegion(\n      region.huffman,\n      region.refinement,\n      regionInfo.width,\n      regionInfo.height,\n      region.defaultPixelValue,\n      region.numberOfSymbolInstances,\n      region.stripSize,\n      inputSymbols,\n      symbolCodeLength,\n      region.transposed,\n      region.dsOffset,\n      region.referenceCorner,\n      region.combinationOperator,\n      huffmanTables,\n      region.refinementTemplate,\n      region.refinementAt,\n      decodingContext,\n      region.logStripSize,\n      huffmanInput\n    );\n    this.drawBitmap(regionInfo, bitmap);\n  }\n\n  onImmediateLosslessTextRegion() {\n    this.onImmediateTextRegion.apply(this, arguments);\n  }\n\n  onPatternDictionary(dictionary, currentSegment, data, start, end) {\n    let patterns = this.patterns;\n    if (!patterns) {\n      this.patterns = patterns = {};\n    }\n    const decodingContext = new DecodingContext(data, start, end);\n    patterns[currentSegment] = decodePatternDictionary(\n      dictionary.mmr,\n      dictionary.patternWidth,\n      dictionary.patternHeight,\n      dictionary.maxPatternIndex,\n      dictionary.template,\n      decodingContext\n    );\n  }\n\n  onImmediateHalftoneRegion(region, referredSegments, data, start, end) {\n    // HalftoneRegion refers to exactly one PatternDictionary.\n    const patterns = this.patterns[referredSegments[0]];\n    const regionInfo = region.info;\n    const decodingContext = new DecodingContext(data, start, end);\n    const bitmap = decodeHalftoneRegion(\n      region.mmr,\n      patterns,\n      region.template,\n      regionInfo.width,\n      regionInfo.height,\n      region.defaultPixelValue,\n      region.enableSkip,\n      region.combinationOperator,\n      region.gridWidth,\n      region.gridHeight,\n      region.gridOffsetX,\n      region.gridOffsetY,\n      region.gridVectorX,\n      region.gridVectorY,\n      decodingContext\n    );\n    this.drawBitmap(regionInfo, bitmap);\n  }\n\n  onImmediateLosslessHalftoneRegion() {\n    this.onImmediateHalftoneRegion.apply(this, arguments);\n  }\n\n  onTables(currentSegment, data, start, end) {\n    let customTables = this.customTables;\n    if (!customTables) {\n      this.customTables = customTables = {};\n    }\n    customTables[currentSegment] = decodeTablesSegment(data, start, end);\n  }\n}\n\nclass HuffmanLine {\n  constructor(lineData) {\n    if (lineData.length === 2) {\n      // OOB line.\n      this.isOOB = true;\n      this.rangeLow = 0;\n      this.prefixLength = lineData[0];\n      this.rangeLength = 0;\n      this.prefixCode = lineData[1];\n      this.isLowerRange = false;\n    } else {\n      // Normal, upper range or lower range line.\n      // Upper range lines are processed like normal lines.\n      this.isOOB = false;\n      this.rangeLow = lineData[0];\n      this.prefixLength = lineData[1];\n      this.rangeLength = lineData[2];\n      this.prefixCode = lineData[3];\n      this.isLowerRange = lineData[4] === \"lower\";\n    }\n  }\n}\n\nclass HuffmanTreeNode {\n  constructor(line) {\n    this.children = [];\n    if (line) {\n      // Leaf node\n      this.isLeaf = true;\n      this.rangeLength = line.rangeLength;\n      this.rangeLow = line.rangeLow;\n      this.isLowerRange = line.isLowerRange;\n      this.isOOB = line.isOOB;\n    } else {\n      // Intermediate or root node\n      this.isLeaf = false;\n    }\n  }\n\n  buildTree(line, shift) {\n    const bit = (line.prefixCode >> shift) & 1;\n    if (shift <= 0) {\n      // Create a leaf node.\n      this.children[bit] = new HuffmanTreeNode(line);\n    } else {\n      // Create an intermediate node and continue recursively.\n      let node = this.children[bit];\n      if (!node) {\n        this.children[bit] = node = new HuffmanTreeNode(null);\n      }\n      node.buildTree(line, shift - 1);\n    }\n  }\n\n  decodeNode(reader) {\n    if (this.isLeaf) {\n      if (this.isOOB) {\n        return null;\n      }\n      const htOffset = reader.readBits(this.rangeLength);\n      return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);\n    }\n    const node = this.children[reader.readBit()];\n    if (!node) {\n      throw new Jbig2Error(\"invalid Huffman data\");\n    }\n    return node.decodeNode(reader);\n  }\n}\n\nclass HuffmanTable {\n  constructor(lines, prefixCodesDone) {\n    if (!prefixCodesDone) {\n      this.assignPrefixCodes(lines);\n    }\n    // Create Huffman tree.\n    this.rootNode = new HuffmanTreeNode(null);\n    for (let i = 0, ii = lines.length; i < ii; i++) {\n      const line = lines[i];\n      if (line.prefixLength > 0) {\n        this.rootNode.buildTree(line, line.prefixLength - 1);\n      }\n    }\n  }\n\n  decode(reader) {\n    return this.rootNode.decodeNode(reader);\n  }\n\n  assignPrefixCodes(lines) {\n    // Annex B.3 Assigning the prefix codes.\n    const linesLength = lines.length;\n    let prefixLengthMax = 0;\n    for (let i = 0; i < linesLength; i++) {\n      prefixLengthMax = Math.max(prefixLengthMax, lines[i].prefixLength);\n    }\n\n    const histogram = new Uint32Array(prefixLengthMax + 1);\n    for (let i = 0; i < linesLength; i++) {\n      histogram[lines[i].prefixLength]++;\n    }\n    let currentLength = 1,\n      firstCode = 0,\n      currentCode,\n      currentTemp,\n      line;\n    histogram[0] = 0;\n\n    while (currentLength <= prefixLengthMax) {\n      firstCode = (firstCode + histogram[currentLength - 1]) << 1;\n      currentCode = firstCode;\n      currentTemp = 0;\n      while (currentTemp < linesLength) {\n        line = lines[currentTemp];\n        if (line.prefixLength === currentLength) {\n          line.prefixCode = currentCode;\n          currentCode++;\n        }\n        currentTemp++;\n      }\n      currentLength++;\n    }\n  }\n}\n\nfunction decodeTablesSegment(data, start, end) {\n  // Decodes a Tables segment, i.e., a custom Huffman table.\n  // Annex B.2 Code table structure.\n  const flags = data[start];\n  const lowestValue = readUint32(data, start + 1) & 0xffffffff;\n  const highestValue = readUint32(data, start + 5) & 0xffffffff;\n  const reader = new Reader(data, start + 9, end);\n\n  const prefixSizeBits = ((flags >> 1) & 7) + 1;\n  const rangeSizeBits = ((flags >> 4) & 7) + 1;\n  const lines = [];\n  let prefixLength,\n    rangeLength,\n    currentRangeLow = lowestValue;\n\n  // Normal table lines\n  do {\n    prefixLength = reader.readBits(prefixSizeBits);\n    rangeLength = reader.readBits(rangeSizeBits);\n    lines.push(\n      new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0])\n    );\n    currentRangeLow += 1 << rangeLength;\n  } while (currentRangeLow < highestValue);\n\n  // Lower range table line\n  prefixLength = reader.readBits(prefixSizeBits);\n  lines.push(new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, \"lower\"]));\n\n  // Upper range table line\n  prefixLength = reader.readBits(prefixSizeBits);\n  lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));\n\n  if (flags & 1) {\n    // Out-of-band table line\n    prefixLength = reader.readBits(prefixSizeBits);\n    lines.push(new HuffmanLine([prefixLength, 0]));\n  }\n\n  return new HuffmanTable(lines, false);\n}\n\nconst standardTablesCache = {};\n\nfunction getStandardTable(number) {\n  // Annex B.5 Standard Huffman tables.\n  let table = standardTablesCache[number];\n  if (table) {\n    return table;\n  }\n  let lines;\n  switch (number) {\n    case 1:\n      lines = [\n        [0, 1, 4, 0x0],\n        [16, 2, 8, 0x2],\n        [272, 3, 16, 0x6],\n        [65808, 3, 32, 0x7], // upper\n      ];\n      break;\n    case 2:\n      lines = [\n        [0, 1, 0, 0x0],\n        [1, 2, 0, 0x2],\n        [2, 3, 0, 0x6],\n        [3, 4, 3, 0xe],\n        [11, 5, 6, 0x1e],\n        [75, 6, 32, 0x3e], // upper\n        [6, 0x3f], // OOB\n      ];\n      break;\n    case 3:\n      lines = [\n        [-256, 8, 8, 0xfe],\n        [0, 1, 0, 0x0],\n        [1, 2, 0, 0x2],\n        [2, 3, 0, 0x6],\n        [3, 4, 3, 0xe],\n        [11, 5, 6, 0x1e],\n        [-257, 8, 32, 0xff, \"lower\"],\n        [75, 7, 32, 0x7e], // upper\n        [6, 0x3e], // OOB\n      ];\n      break;\n    case 4:\n      lines = [\n        [1, 1, 0, 0x0],\n        [2, 2, 0, 0x2],\n        [3, 3, 0, 0x6],\n        [4, 4, 3, 0xe],\n        [12, 5, 6, 0x1e],\n        [76, 5, 32, 0x1f], // upper\n      ];\n      break;\n    case 5:\n      lines = [\n        [-255, 7, 8, 0x7e],\n        [1, 1, 0, 0x0],\n        [2, 2, 0, 0x2],\n        [3, 3, 0, 0x6],\n        [4, 4, 3, 0xe],\n        [12, 5, 6, 0x1e],\n        [-256, 7, 32, 0x7f, \"lower\"],\n        [76, 6, 32, 0x3e], // upper\n      ];\n      break;\n    case 6:\n      lines = [\n        [-2048, 5, 10, 0x1c],\n        [-1024, 4, 9, 0x8],\n        [-512, 4, 8, 0x9],\n        [-256, 4, 7, 0xa],\n        [-128, 5, 6, 0x1d],\n        [-64, 5, 5, 0x1e],\n        [-32, 4, 5, 0xb],\n        [0, 2, 7, 0x0],\n        [128, 3, 7, 0x2],\n        [256, 3, 8, 0x3],\n        [512, 4, 9, 0xc],\n        [1024, 4, 10, 0xd],\n        [-2049, 6, 32, 0x3e, \"lower\"],\n        [2048, 6, 32, 0x3f], // upper\n      ];\n      break;\n    case 7:\n      lines = [\n        [-1024, 4, 9, 0x8],\n        [-512, 3, 8, 0x0],\n        [-256, 4, 7, 0x9],\n        [-128, 5, 6, 0x1a],\n        [-64, 5, 5, 0x1b],\n        [-32, 4, 5, 0xa],\n        [0, 4, 5, 0xb],\n        [32, 5, 5, 0x1c],\n        [64, 5, 6, 0x1d],\n        [128, 4, 7, 0xc],\n        [256, 3, 8, 0x1],\n        [512, 3, 9, 0x2],\n        [1024, 3, 10, 0x3],\n        [-1025, 5, 32, 0x1e, \"lower\"],\n        [2048, 5, 32, 0x1f], // upper\n      ];\n      break;\n    case 8:\n      lines = [\n        [-15, 8, 3, 0xfc],\n        [-7, 9, 1, 0x1fc],\n        [-5, 8, 1, 0xfd],\n        [-3, 9, 0, 0x1fd],\n        [-2, 7, 0, 0x7c],\n        [-1, 4, 0, 0xa],\n        [0, 2, 1, 0x0],\n        [2, 5, 0, 0x1a],\n        [3, 6, 0, 0x3a],\n        [4, 3, 4, 0x4],\n        [20, 6, 1, 0x3b],\n        [22, 4, 4, 0xb],\n        [38, 4, 5, 0xc],\n        [70, 5, 6, 0x1b],\n        [134, 5, 7, 0x1c],\n        [262, 6, 7, 0x3c],\n        [390, 7, 8, 0x7d],\n        [646, 6, 10, 0x3d],\n        [-16, 9, 32, 0x1fe, \"lower\"],\n        [1670, 9, 32, 0x1ff], // upper\n        [2, 0x1], // OOB\n      ];\n      break;\n    case 9:\n      lines = [\n        [-31, 8, 4, 0xfc],\n        [-15, 9, 2, 0x1fc],\n        [-11, 8, 2, 0xfd],\n        [-7, 9, 1, 0x1fd],\n        [-5, 7, 1, 0x7c],\n        [-3, 4, 1, 0xa],\n        [-1, 3, 1, 0x2],\n        [1, 3, 1, 0x3],\n        [3, 5, 1, 0x1a],\n        [5, 6, 1, 0x3a],\n        [7, 3, 5, 0x4],\n        [39, 6, 2, 0x3b],\n        [43, 4, 5, 0xb],\n        [75, 4, 6, 0xc],\n        [139, 5, 7, 0x1b],\n        [267, 5, 8, 0x1c],\n        [523, 6, 8, 0x3c],\n        [779, 7, 9, 0x7d],\n        [1291, 6, 11, 0x3d],\n        [-32, 9, 32, 0x1fe, \"lower\"],\n        [3339, 9, 32, 0x1ff], // upper\n        [2, 0x0], // OOB\n      ];\n      break;\n    case 10:\n      lines = [\n        [-21, 7, 4, 0x7a],\n        [-5, 8, 0, 0xfc],\n        [-4, 7, 0, 0x7b],\n        [-3, 5, 0, 0x18],\n        [-2, 2, 2, 0x0],\n        [2, 5, 0, 0x19],\n        [3, 6, 0, 0x36],\n        [4, 7, 0, 0x7c],\n        [5, 8, 0, 0xfd],\n        [6, 2, 6, 0x1],\n        [70, 5, 5, 0x1a],\n        [102, 6, 5, 0x37],\n        [134, 6, 6, 0x38],\n        [198, 6, 7, 0x39],\n        [326, 6, 8, 0x3a],\n        [582, 6, 9, 0x3b],\n        [1094, 6, 10, 0x3c],\n        [2118, 7, 11, 0x7d],\n        [-22, 8, 32, 0xfe, \"lower\"],\n        [4166, 8, 32, 0xff], // upper\n        [2, 0x2], // OOB\n      ];\n      break;\n    case 11:\n      lines = [\n        [1, 1, 0, 0x0],\n        [2, 2, 1, 0x2],\n        [4, 4, 0, 0xc],\n        [5, 4, 1, 0xd],\n        [7, 5, 1, 0x1c],\n        [9, 5, 2, 0x1d],\n        [13, 6, 2, 0x3c],\n        [17, 7, 2, 0x7a],\n        [21, 7, 3, 0x7b],\n        [29, 7, 4, 0x7c],\n        [45, 7, 5, 0x7d],\n        [77, 7, 6, 0x7e],\n        [141, 7, 32, 0x7f], // upper\n      ];\n      break;\n    case 12:\n      lines = [\n        [1, 1, 0, 0x0],\n        [2, 2, 0, 0x2],\n        [3, 3, 1, 0x6],\n        [5, 5, 0, 0x1c],\n        [6, 5, 1, 0x1d],\n        [8, 6, 1, 0x3c],\n        [10, 7, 0, 0x7a],\n        [11, 7, 1, 0x7b],\n        [13, 7, 2, 0x7c],\n        [17, 7, 3, 0x7d],\n        [25, 7, 4, 0x7e],\n        [41, 8, 5, 0xfe],\n        [73, 8, 32, 0xff], // upper\n      ];\n      break;\n    case 13:\n      lines = [\n        [1, 1, 0, 0x0],\n        [2, 3, 0, 0x4],\n        [3, 4, 0, 0xc],\n        [4, 5, 0, 0x1c],\n        [5, 4, 1, 0xd],\n        [7, 3, 3, 0x5],\n        [15, 6, 1, 0x3a],\n        [17, 6, 2, 0x3b],\n        [21, 6, 3, 0x3c],\n        [29, 6, 4, 0x3d],\n        [45, 6, 5, 0x3e],\n        [77, 7, 6, 0x7e],\n        [141, 7, 32, 0x7f], // upper\n      ];\n      break;\n    case 14:\n      lines = [\n        [-2, 3, 0, 0x4],\n        [-1, 3, 0, 0x5],\n        [0, 1, 0, 0x0],\n        [1, 3, 0, 0x6],\n        [2, 3, 0, 0x7],\n      ];\n      break;\n    case 15:\n      lines = [\n        [-24, 7, 4, 0x7c],\n        [-8, 6, 2, 0x3c],\n        [-4, 5, 1, 0x1c],\n        [-2, 4, 0, 0xc],\n        [-1, 3, 0, 0x4],\n        [0, 1, 0, 0x0],\n        [1, 3, 0, 0x5],\n        [2, 4, 0, 0xd],\n        [3, 5, 1, 0x1d],\n        [5, 6, 2, 0x3d],\n        [9, 7, 4, 0x7d],\n        [-25, 7, 32, 0x7e, \"lower\"],\n        [25, 7, 32, 0x7f], // upper\n      ];\n      break;\n    default:\n      throw new Jbig2Error(`standard table B.${number} does not exist`);\n  }\n\n  for (let i = 0, ii = lines.length; i < ii; i++) {\n    lines[i] = new HuffmanLine(lines[i]);\n  }\n  table = new HuffmanTable(lines, true);\n  standardTablesCache[number] = table;\n  return table;\n}\n\nclass Reader {\n  constructor(data, start, end) {\n    this.data = data;\n    this.start = start;\n    this.end = end;\n    this.position = start;\n    this.shift = -1;\n    this.currentByte = 0;\n  }\n\n  readBit() {\n    if (this.shift < 0) {\n      if (this.position >= this.end) {\n        throw new Jbig2Error(\"end of data while reading bit\");\n      }\n      this.currentByte = this.data[this.position++];\n      this.shift = 7;\n    }\n    const bit = (this.currentByte >> this.shift) & 1;\n    this.shift--;\n    return bit;\n  }\n\n  readBits(numBits) {\n    let result = 0,\n      i;\n    for (i = numBits - 1; i >= 0; i--) {\n      result |= this.readBit() << i;\n    }\n    return result;\n  }\n\n  byteAlign() {\n    this.shift = -1;\n  }\n\n  next() {\n    if (this.position >= this.end) {\n      return -1;\n    }\n    return this.data[this.position++];\n  }\n}\n\nfunction getCustomHuffmanTable(index, referredTo, customTables) {\n  // Returns a Tables segment that has been earlier decoded.\n  // See 7.4.2.1.6 (symbol dictionary) or 7.4.3.1.6 (text region).\n  let currentIndex = 0;\n  for (let i = 0, ii = referredTo.length; i < ii; i++) {\n    const table = customTables[referredTo[i]];\n    if (table) {\n      if (index === currentIndex) {\n        return table;\n      }\n      currentIndex++;\n    }\n  }\n  throw new Jbig2Error(\"can't find custom Huffman table\");\n}\n\nfunction getTextRegionHuffmanTables(\n  textRegion,\n  referredTo,\n  customTables,\n  numberOfSymbols,\n  reader\n) {\n  // 7.4.3.1.7 Symbol ID Huffman table decoding\n\n  // Read code lengths for RUNCODEs 0...34.\n  const codes = [];\n  for (let i = 0; i <= 34; i++) {\n    const codeLength = reader.readBits(4);\n    codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n  }\n  // Assign Huffman codes for RUNCODEs.\n  const runCodesTable = new HuffmanTable(codes, false);\n\n  // Read a Huffman code using the assignment above.\n  // Interpret the RUNCODE codes and the additional bits (if any).\n  codes.length = 0;\n  for (let i = 0; i < numberOfSymbols; ) {\n    const codeLength = runCodesTable.decode(reader);\n    if (codeLength >= 32) {\n      let repeatedLength, numberOfRepeats, j;\n      switch (codeLength) {\n        case 32:\n          if (i === 0) {\n            throw new Jbig2Error(\"no previous value in symbol ID table\");\n          }\n          numberOfRepeats = reader.readBits(2) + 3;\n          repeatedLength = codes[i - 1].prefixLength;\n          break;\n        case 33:\n          numberOfRepeats = reader.readBits(3) + 3;\n          repeatedLength = 0;\n          break;\n        case 34:\n          numberOfRepeats = reader.readBits(7) + 11;\n          repeatedLength = 0;\n          break;\n        default:\n          throw new Jbig2Error(\"invalid code length in symbol ID table\");\n      }\n      for (j = 0; j < numberOfRepeats; j++) {\n        codes.push(new HuffmanLine([i, repeatedLength, 0, 0]));\n        i++;\n      }\n    } else {\n      codes.push(new HuffmanLine([i, codeLength, 0, 0]));\n      i++;\n    }\n  }\n  reader.byteAlign();\n  const symbolIDTable = new HuffmanTable(codes, false);\n\n  // 7.4.3.1.6 Text region segment Huffman table selection\n\n  let customIndex = 0,\n    tableFirstS,\n    tableDeltaS,\n    tableDeltaT;\n\n  switch (textRegion.huffmanFS) {\n    case 0:\n    case 1:\n      tableFirstS = getStandardTable(textRegion.huffmanFS + 6);\n      break;\n    case 3:\n      tableFirstS = getCustomHuffmanTable(\n        customIndex,\n        referredTo,\n        customTables\n      );\n      customIndex++;\n      break;\n    default:\n      throw new Jbig2Error(\"invalid Huffman FS selector\");\n  }\n\n  switch (textRegion.huffmanDS) {\n    case 0:\n    case 1:\n    case 2:\n      tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);\n      break;\n    case 3:\n      tableDeltaS = getCustomHuffmanTable(\n        customIndex,\n        referredTo,\n        customTables\n      );\n      customIndex++;\n      break;\n    default:\n      throw new Jbig2Error(\"invalid Huffman DS selector\");\n  }\n\n  switch (textRegion.huffmanDT) {\n    case 0:\n    case 1:\n    case 2:\n      tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);\n      break;\n    case 3:\n      tableDeltaT = getCustomHuffmanTable(\n        customIndex,\n        referredTo,\n        customTables\n      );\n      customIndex++;\n      break;\n    default:\n      throw new Jbig2Error(\"invalid Huffman DT selector\");\n  }\n\n  if (textRegion.refinement) {\n    // Load tables RDW, RDH, RDX and RDY.\n    throw new Jbig2Error(\"refinement with Huffman is not supported\");\n  }\n\n  return {\n    symbolIDTable,\n    tableFirstS,\n    tableDeltaS,\n    tableDeltaT,\n  };\n}\n\nfunction getSymbolDictionaryHuffmanTables(\n  dictionary,\n  referredTo,\n  customTables\n) {\n  // 7.4.2.1.6 Symbol dictionary segment Huffman table selection\n\n  let customIndex = 0,\n    tableDeltaHeight,\n    tableDeltaWidth;\n  switch (dictionary.huffmanDHSelector) {\n    case 0:\n    case 1:\n      tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);\n      break;\n    case 3:\n      tableDeltaHeight = getCustomHuffmanTable(\n        customIndex,\n        referredTo,\n        customTables\n      );\n      customIndex++;\n      break;\n    default:\n      throw new Jbig2Error(\"invalid Huffman DH selector\");\n  }\n\n  switch (dictionary.huffmanDWSelector) {\n    case 0:\n    case 1:\n      tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);\n      break;\n    case 3:\n      tableDeltaWidth = getCustomHuffmanTable(\n        customIndex,\n        referredTo,\n        customTables\n      );\n      customIndex++;\n      break;\n    default:\n      throw new Jbig2Error(\"invalid Huffman DW selector\");\n  }\n\n  let tableBitmapSize, tableAggregateInstances;\n  if (dictionary.bitmapSizeSelector) {\n    tableBitmapSize = getCustomHuffmanTable(\n      customIndex,\n      referredTo,\n      customTables\n    );\n    customIndex++;\n  } else {\n    tableBitmapSize = getStandardTable(1);\n  }\n\n  if (dictionary.aggregationInstancesSelector) {\n    tableAggregateInstances = getCustomHuffmanTable(\n      customIndex,\n      referredTo,\n      customTables\n    );\n  } else {\n    tableAggregateInstances = getStandardTable(1);\n  }\n\n  return {\n    tableDeltaHeight,\n    tableDeltaWidth,\n    tableBitmapSize,\n    tableAggregateInstances,\n  };\n}\n\nfunction readUncompressedBitmap(reader, width, height) {\n  const bitmap = [];\n  for (let y = 0; y < height; y++) {\n    const row = new Uint8Array(width);\n    bitmap.push(row);\n    for (let x = 0; x < width; x++) {\n      row[x] = reader.readBit();\n    }\n    reader.byteAlign();\n  }\n  return bitmap;\n}\n\nfunction decodeMMRBitmap(input, width, height, endOfBlock) {\n  // MMR is the same compression algorithm as the PDF filter\n  // CCITTFaxDecode with /K -1.\n  const params = {\n    K: -1,\n    Columns: width,\n    Rows: height,\n    BlackIs1: true,\n    EndOfBlock: endOfBlock,\n  };\n  const decoder = new CCITTFaxDecoder(input, params);\n  const bitmap = [];\n  let currentByte,\n    eof = false;\n\n  for (let y = 0; y < height; y++) {\n    const row = new Uint8Array(width);\n    bitmap.push(row);\n    let shift = -1;\n    for (let x = 0; x < width; x++) {\n      if (shift < 0) {\n        currentByte = decoder.readNextChar();\n        if (currentByte === -1) {\n          // Set the rest of the bits to zero.\n          currentByte = 0;\n          eof = true;\n        }\n        shift = 7;\n      }\n      row[x] = (currentByte >> shift) & 1;\n      shift--;\n    }\n  }\n\n  if (endOfBlock && !eof) {\n    // Read until EOFB has been consumed.\n    const lookForEOFLimit = 5;\n    for (let i = 0; i < lookForEOFLimit; i++) {\n      if (decoder.readNextChar() === -1) {\n        break;\n      }\n    }\n  }\n\n  return bitmap;\n}\n\nclass Jbig2Image {\n  parseChunks(chunks) {\n    return parseJbig2Chunks(chunks);\n  }\n\n  parse(data) {\n    const { imgData, width, height } = parseJbig2(data);\n    this.width = width;\n    this.height = height;\n    return imgData;\n  }\n}\n\nexport { Jbig2Image };\n","/* Copyright 2019 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  BaseException,\n  objectSize,\n  stringToPDFString,\n  warn,\n} from \"../shared/util.js\";\nimport { Dict, isName, isRef, isStream, RefSet } from \"./primitives.js\";\n\nfunction getLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      lookup = Object.create(null);\n      initializer(lookup);\n      initializer = null;\n    }\n    return lookup;\n  };\n}\n\nfunction getArrayLookupTableFactory(initializer) {\n  let lookup;\n  return function () {\n    if (initializer) {\n      let arr = initializer();\n      initializer = null;\n      lookup = Object.create(null);\n      for (let i = 0, ii = arr.length; i < ii; i += 2) {\n        lookup[arr[i]] = arr[i + 1];\n      }\n      arr = null;\n    }\n    return lookup;\n  };\n}\n\nclass MissingDataException extends BaseException {\n  constructor(begin, end) {\n    super(`Missing data [${begin}, ${end})`);\n    this.begin = begin;\n    this.end = end;\n  }\n}\n\nclass XRefEntryException extends BaseException {}\n\nclass XRefParseException extends BaseException {}\n\n/**\n * Get the value of an inheritable property.\n *\n * If the PDF specification explicitly lists a property in a dictionary as\n * inheritable, then the value of the property may be present in the dictionary\n * itself or in one or more parents of the dictionary.\n *\n * If the key is not found in the tree, `undefined` is returned. Otherwise,\n * the value for the key is returned or, if `stopWhenFound` is `false`, a list\n * of values is returned.\n *\n * @param {Dict} dict - Dictionary from where to start the traversal.\n * @param {string} key - The key of the property to find the value for.\n * @param {boolean} getArray - Whether or not the value should be fetched as an\n *   array. The default value is `false`.\n * @param {boolean} stopWhenFound - Whether or not to stop the traversal when\n *   the key is found. If set to `false`, we always walk up the entire parent\n *   chain, for example to be able to find `\\Resources` placed on multiple\n *   levels of the tree. The default value is `true`.\n */\nfunction getInheritableProperty({\n  dict,\n  key,\n  getArray = false,\n  stopWhenFound = true,\n}) {\n  let values;\n  const visited = new RefSet();\n\n  while (dict instanceof Dict && !(dict.objId && visited.has(dict.objId))) {\n    if (dict.objId) {\n      visited.put(dict.objId);\n    }\n    const value = getArray ? dict.getArray(key) : dict.get(key);\n    if (value !== undefined) {\n      if (stopWhenFound) {\n        return value;\n      }\n      if (!values) {\n        values = [];\n      }\n      values.push(value);\n    }\n    dict = dict.get(\"Parent\");\n  }\n  return values;\n}\n\n// prettier-ignore\nconst ROMAN_NUMBER_MAP = [\n  \"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\",\n  \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\",\n  \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"\n];\n\n/**\n * Converts positive integers to (upper case) Roman numerals.\n * @param {number} number - The number that should be converted.\n * @param {boolean} lowerCase - Indicates if the result should be converted\n *   to lower case letters. The default value is `false`.\n * @returns {string} The resulting Roman number.\n */\nfunction toRomanNumerals(number, lowerCase = false) {\n  assert(\n    Number.isInteger(number) && number > 0,\n    \"The number should be a positive integer.\"\n  );\n  const romanBuf = [];\n  let pos;\n  // Thousands\n  while (number >= 1000) {\n    number -= 1000;\n    romanBuf.push(\"M\");\n  }\n  // Hundreds\n  pos = (number / 100) | 0;\n  number %= 100;\n  romanBuf.push(ROMAN_NUMBER_MAP[pos]);\n  // Tens\n  pos = (number / 10) | 0;\n  number %= 10;\n  romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);\n  // Ones\n  romanBuf.push(ROMAN_NUMBER_MAP[20 + number]); // eslint-disable-line unicorn/no-array-push-push\n\n  const romanStr = romanBuf.join(\"\");\n  return lowerCase ? romanStr.toLowerCase() : romanStr;\n}\n\n// Calculate the base 2 logarithm of the number `x`. This differs from the\n// native function in the sense that it returns the ceiling value and that it\n// returns 0 instead of `Infinity`/`NaN` for `x` values smaller than/equal to 0.\nfunction log2(x) {\n  if (x <= 0) {\n    return 0;\n  }\n  return Math.ceil(Math.log2(x));\n}\n\nfunction readInt8(data, offset) {\n  return (data[offset] << 24) >> 24;\n}\n\nfunction readUint16(data, offset) {\n  return (data[offset] << 8) | data[offset + 1];\n}\n\nfunction readUint32(data, offset) {\n  return (\n    ((data[offset] << 24) |\n      (data[offset + 1] << 16) |\n      (data[offset + 2] << 8) |\n      data[offset + 3]) >>>\n    0\n  );\n}\n\n// Checks if ch is one of the following characters: SPACE, TAB, CR or LF.\nfunction isWhiteSpace(ch) {\n  return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n}\n\n/**\n * AcroForm field names use an array like notation to refer to\n * repeated XFA elements e.g. foo.bar[nnn].\n * see: XFA Spec Chapter 3 - Repeated Elements\n *\n * @param {string} path - XFA path name.\n * @returns {Array} - Array of Objects with the name and pos of\n * each part of the path.\n */\nfunction parseXFAPath(path) {\n  const positionPattern = /(.+)\\[([0-9]+)\\]$/;\n  return path.split(\".\").map(component => {\n    const m = component.match(positionPattern);\n    if (m) {\n      return { name: m[1], pos: parseInt(m[2], 10) };\n    }\n    return { name: component, pos: 0 };\n  });\n}\n\nfunction escapePDFName(str) {\n  const buffer = [];\n  let start = 0;\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.charCodeAt(i);\n    // Whitespace or delimiters aren't regular chars, so escape them.\n    if (\n      char < 0x21 ||\n      char > 0x7e ||\n      char === 0x23 /* # */ ||\n      char === 0x28 /* ( */ ||\n      char === 0x29 /* ) */ ||\n      char === 0x3c /* < */ ||\n      char === 0x3e /* > */ ||\n      char === 0x5b /* [ */ ||\n      char === 0x5d /* ] */ ||\n      char === 0x7b /* { */ ||\n      char === 0x7d /* } */ ||\n      char === 0x2f /* / */ ||\n      char === 0x25 /* % */\n    ) {\n      if (start < i) {\n        buffer.push(str.substring(start, i));\n      }\n      buffer.push(`#${char.toString(16)}`);\n      start = i + 1;\n    }\n  }\n\n  if (buffer.length === 0) {\n    return str;\n  }\n\n  if (start < str.length) {\n    buffer.push(str.substring(start, str.length));\n  }\n\n  return buffer.join(\"\");\n}\n\nfunction _collectJS(entry, xref, list, parents) {\n  if (!entry) {\n    return;\n  }\n\n  let parent = null;\n  if (isRef(entry)) {\n    if (parents.has(entry)) {\n      // If we've already found entry then we've a cycle.\n      return;\n    }\n    parent = entry;\n    parents.put(parent);\n    entry = xref.fetch(entry);\n  }\n  if (Array.isArray(entry)) {\n    for (const element of entry) {\n      _collectJS(element, xref, list, parents);\n    }\n  } else if (entry instanceof Dict) {\n    if (isName(entry.get(\"S\"), \"JavaScript\") && entry.has(\"JS\")) {\n      const js = entry.get(\"JS\");\n      let code;\n      if (isStream(js)) {\n        code = js.getString();\n      } else {\n        code = js;\n      }\n      code = stringToPDFString(code);\n      if (code) {\n        list.push(code);\n      }\n    }\n    _collectJS(entry.getRaw(\"Next\"), xref, list, parents);\n  }\n\n  if (parent) {\n    parents.remove(parent);\n  }\n}\n\nfunction collectActions(xref, dict, eventType) {\n  const actions = Object.create(null);\n  const additionalActionsDicts = getInheritableProperty({\n    dict,\n    key: \"AA\",\n    stopWhenFound: false,\n  });\n  if (additionalActionsDicts) {\n    // additionalActionsDicts contains dicts from ancestors\n    // as they're found in the tree from bottom to top.\n    // So the dicts are visited in reverse order to guarantee\n    // that actions from elder ancestors will be overwritten\n    // by ones from younger ancestors.\n    for (let i = additionalActionsDicts.length - 1; i >= 0; i--) {\n      const additionalActions = additionalActionsDicts[i];\n      if (!(additionalActions instanceof Dict)) {\n        continue;\n      }\n      for (const key of additionalActions.getKeys()) {\n        const action = eventType[key];\n        if (!action) {\n          continue;\n        }\n        const actionDict = additionalActions.getRaw(key);\n        const parents = new RefSet();\n        const list = [];\n        _collectJS(actionDict, xref, list, parents);\n        if (list.length > 0) {\n          actions[action] = list;\n        }\n      }\n    }\n  }\n  // Collect the Action if any (we may have one on pushbutton).\n  if (dict.has(\"A\")) {\n    const actionDict = dict.get(\"A\");\n    const parents = new RefSet();\n    const list = [];\n    _collectJS(actionDict, xref, list, parents);\n    if (list.length > 0) {\n      actions.Action = list;\n    }\n  }\n  return objectSize(actions) > 0 ? actions : null;\n}\n\nconst XMLEntities = {\n  /* < */ 0x3c: \"&lt;\",\n  /* > */ 0x3e: \"&gt;\",\n  /* & */ 0x26: \"&amp;\",\n  /* \" */ 0x22: \"&quot;\",\n  /* ' */ 0x27: \"&apos;\",\n};\n\nfunction encodeToXmlString(str) {\n  const buffer = [];\n  let start = 0;\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const char = str.codePointAt(i);\n    if (0x20 <= char && char <= 0x7e) {\n      // ascii\n      const entity = XMLEntities[char];\n      if (entity) {\n        if (start < i) {\n          buffer.push(str.substring(start, i));\n        }\n        buffer.push(entity);\n        start = i + 1;\n      }\n    } else {\n      if (start < i) {\n        buffer.push(str.substring(start, i));\n      }\n      buffer.push(`&#x${char.toString(16).toUpperCase()};`);\n      if (char > 0xd7ff && (char < 0xe000 || char > 0xfffd)) {\n        // char is represented by two u16\n        i++;\n      }\n      start = i + 1;\n    }\n  }\n\n  if (buffer.length === 0) {\n    return str;\n  }\n  if (start < str.length) {\n    buffer.push(str.substring(start, str.length));\n  }\n  return buffer.join(\"\");\n}\n\nfunction validateCSSFont(cssFontInfo) {\n  // See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style.\n  const DEFAULT_CSS_FONT_OBLIQUE = \"14\";\n  // See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight.\n  const DEFAULT_CSS_FONT_WEIGHT = \"400\";\n  const CSS_FONT_WEIGHT_VALUES = new Set([\n    \"100\",\n    \"200\",\n    \"300\",\n    \"400\",\n    \"500\",\n    \"600\",\n    \"700\",\n    \"800\",\n    \"900\",\n    \"1000\",\n    \"normal\",\n    \"bold\",\n    \"bolder\",\n    \"lighter\",\n  ]);\n\n  const { fontFamily, fontWeight, italicAngle } = cssFontInfo;\n\n  // See https://developer.mozilla.org/en-US/docs/Web/CSS/string.\n  if (/^\".*\"$/.test(fontFamily)) {\n    if (/[^\\\\]\"/.test(fontFamily.slice(1, fontFamily.length - 1))) {\n      warn(`XFA - FontFamily contains some unescaped \": ${fontFamily}.`);\n      return false;\n    }\n  } else if (/^'.*'$/.test(fontFamily)) {\n    if (/[^\\\\]'/.test(fontFamily.slice(1, fontFamily.length - 1))) {\n      warn(`XFA - FontFamily contains some unescaped ': ${fontFamily}.`);\n      return false;\n    }\n  } else {\n    // See https://developer.mozilla.org/en-US/docs/Web/CSS/custom-ident.\n    for (const ident of fontFamily.split(/[ \\t]+/)) {\n      if (\n        /^([0-9]|(-([0-9]|-)))/.test(ident) ||\n        !/^[a-zA-Z0-9\\-_\\\\]+$/.test(ident)\n      ) {\n        warn(\n          `XFA - FontFamily contains some invalid <custom-ident>: ${fontFamily}.`\n        );\n        return false;\n      }\n    }\n  }\n\n  const weight = fontWeight ? fontWeight.toString() : \"\";\n  cssFontInfo.fontWeight = CSS_FONT_WEIGHT_VALUES.has(weight)\n    ? weight\n    : DEFAULT_CSS_FONT_WEIGHT;\n\n  const angle = parseFloat(italicAngle);\n  cssFontInfo.italicAngle =\n    isNaN(angle) || angle < -90 || angle > 90\n      ? DEFAULT_CSS_FONT_OBLIQUE\n      : italicAngle.toString();\n\n  return true;\n}\n\nexport {\n  collectActions,\n  encodeToXmlString,\n  escapePDFName,\n  getArrayLookupTableFactory,\n  getInheritableProperty,\n  getLookupTableFactory,\n  isWhiteSpace,\n  log2,\n  MissingDataException,\n  parseXFAPath,\n  readInt8,\n  readUint16,\n  readUint32,\n  toRomanNumerals,\n  validateCSSFont,\n  XRefEntryException,\n  XRefParseException,\n};\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, shadow, unreachable } from \"../shared/util.js\";\nimport { BaseStream } from \"./base_stream.js\";\n\nconst EOF = {};\n\nconst Name = (function NameClosure() {\n  let nameCache = Object.create(null);\n\n  // eslint-disable-next-line no-shadow\n  class Name {\n    constructor(name) {\n      this.name = name;\n    }\n\n    static get(name) {\n      const nameValue = nameCache[name];\n      // eslint-disable-next-line no-restricted-syntax\n      return nameValue ? nameValue : (nameCache[name] = new Name(name));\n    }\n\n    static _clearCache() {\n      nameCache = Object.create(null);\n    }\n  }\n\n  return Name;\n})();\n\nconst Cmd = (function CmdClosure() {\n  let cmdCache = Object.create(null);\n\n  // eslint-disable-next-line no-shadow\n  class Cmd {\n    constructor(cmd) {\n      this.cmd = cmd;\n    }\n\n    static get(cmd) {\n      const cmdValue = cmdCache[cmd];\n      // eslint-disable-next-line no-restricted-syntax\n      return cmdValue ? cmdValue : (cmdCache[cmd] = new Cmd(cmd));\n    }\n\n    static _clearCache() {\n      cmdCache = Object.create(null);\n    }\n  }\n\n  return Cmd;\n})();\n\nconst nonSerializable = function nonSerializableClosure() {\n  return nonSerializable; // Creating closure on some variable.\n};\n\nclass Dict {\n  constructor(xref = null) {\n    // Map should only be used internally, use functions below to access.\n    this._map = Object.create(null);\n    this.xref = xref;\n    this.objId = null;\n    this.suppressEncryption = false;\n    this.__nonSerializable__ = nonSerializable; // Disable cloning of the Dict.\n  }\n\n  assignXref(newXref) {\n    this.xref = newXref;\n  }\n\n  get size() {\n    return Object.keys(this._map).length;\n  }\n\n  // Automatically dereferences Ref objects.\n  get(key1, key2, key3) {\n    let value = this._map[key1];\n    if (value === undefined && key2 !== undefined) {\n      value = this._map[key2];\n      if (value === undefined && key3 !== undefined) {\n        value = this._map[key3];\n      }\n    }\n    if (value instanceof Ref && this.xref) {\n      return this.xref.fetch(value, this.suppressEncryption);\n    }\n    return value;\n  }\n\n  // Same as get(), but returns a promise and uses fetchIfRefAsync().\n  async getAsync(key1, key2, key3) {\n    let value = this._map[key1];\n    if (value === undefined && key2 !== undefined) {\n      value = this._map[key2];\n      if (value === undefined && key3 !== undefined) {\n        value = this._map[key3];\n      }\n    }\n    if (value instanceof Ref && this.xref) {\n      return this.xref.fetchAsync(value, this.suppressEncryption);\n    }\n    return value;\n  }\n\n  // Same as get(), but dereferences all elements if the result is an Array.\n  getArray(key1, key2, key3) {\n    let value = this._map[key1];\n    if (value === undefined && key2 !== undefined) {\n      value = this._map[key2];\n      if (value === undefined && key3 !== undefined) {\n        value = this._map[key3];\n      }\n    }\n    if (value instanceof Ref && this.xref) {\n      value = this.xref.fetch(value, this.suppressEncryption);\n    }\n\n    if (Array.isArray(value)) {\n      value = value.slice(); // Ensure that we don't modify the Dict data.\n      for (let i = 0, ii = value.length; i < ii; i++) {\n        if (value[i] instanceof Ref && this.xref) {\n          value[i] = this.xref.fetch(value[i], this.suppressEncryption);\n        }\n      }\n    }\n    return value;\n  }\n\n  // No dereferencing.\n  getRaw(key) {\n    return this._map[key];\n  }\n\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  // No dereferencing.\n  getRawValues() {\n    return Object.values(this._map);\n  }\n\n  set(key, value) {\n    if (\n      (typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")) &&\n      value === undefined\n    ) {\n      unreachable('Dict.set: The \"value\" cannot be undefined.');\n    }\n    this._map[key] = value;\n  }\n\n  has(key) {\n    return this._map[key] !== undefined;\n  }\n\n  forEach(callback) {\n    for (const key in this._map) {\n      callback(key, this.get(key));\n    }\n  }\n\n  static get empty() {\n    const emptyDict = new Dict(null);\n\n    emptyDict.set = (key, value) => {\n      unreachable(\"Should not call `set` on the empty dictionary.\");\n    };\n    return shadow(this, \"empty\", emptyDict);\n  }\n\n  static merge({ xref, dictArray, mergeSubDicts = false }) {\n    const mergedDict = new Dict(xref);\n\n    if (!mergeSubDicts) {\n      for (const dict of dictArray) {\n        if (!(dict instanceof Dict)) {\n          continue;\n        }\n        for (const [key, value] of Object.entries(dict._map)) {\n          if (mergedDict._map[key] === undefined) {\n            mergedDict._map[key] = value;\n          }\n        }\n      }\n      return mergedDict.size > 0 ? mergedDict : Dict.empty;\n    }\n    const properties = new Map();\n\n    for (const dict of dictArray) {\n      if (!(dict instanceof Dict)) {\n        continue;\n      }\n      for (const [key, value] of Object.entries(dict._map)) {\n        let property = properties.get(key);\n        if (property === undefined) {\n          property = [];\n          properties.set(key, property);\n        }\n        property.push(value);\n      }\n    }\n    for (const [name, values] of properties) {\n      if (values.length === 1 || !(values[0] instanceof Dict)) {\n        mergedDict._map[name] = values[0];\n        continue;\n      }\n      const subDict = new Dict(xref);\n\n      for (const dict of values) {\n        if (!(dict instanceof Dict)) {\n          continue;\n        }\n        for (const [key, value] of Object.entries(dict._map)) {\n          if (subDict._map[key] === undefined) {\n            subDict._map[key] = value;\n          }\n        }\n      }\n      if (subDict.size > 0) {\n        mergedDict._map[name] = subDict;\n      }\n    }\n    properties.clear();\n\n    return mergedDict.size > 0 ? mergedDict : Dict.empty;\n  }\n}\n\nconst Ref = (function RefClosure() {\n  let refCache = Object.create(null);\n\n  // eslint-disable-next-line no-shadow\n  class Ref {\n    constructor(num, gen) {\n      this.num = num;\n      this.gen = gen;\n    }\n\n    toString() {\n      // This function is hot, so we make the string as compact as possible.\n      // |this.gen| is almost always zero, so we treat that case specially.\n      if (this.gen === 0) {\n        return `${this.num}R`;\n      }\n      return `${this.num}R${this.gen}`;\n    }\n\n    static get(num, gen) {\n      const key = gen === 0 ? `${num}R` : `${num}R${gen}`;\n      const refValue = refCache[key];\n      // eslint-disable-next-line no-restricted-syntax\n      return refValue ? refValue : (refCache[key] = new Ref(num, gen));\n    }\n\n    static _clearCache() {\n      refCache = Object.create(null);\n    }\n  }\n\n  return Ref;\n})();\n\n// The reference is identified by number and generation.\n// This structure stores only one instance of the reference.\nclass RefSet {\n  constructor(parent = null) {\n    if (\n      (typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"!PRODUCTION || TESTING\")) &&\n      parent &&\n      !(parent instanceof RefSet)\n    ) {\n      unreachable('RefSet: Invalid \"parent\" value.');\n    }\n    this._set = new Set(parent && parent._set);\n  }\n\n  has(ref) {\n    return this._set.has(ref.toString());\n  }\n\n  put(ref) {\n    this._set.add(ref.toString());\n  }\n\n  remove(ref) {\n    this._set.delete(ref.toString());\n  }\n\n  forEach(callback) {\n    for (const ref of this._set.values()) {\n      callback(ref);\n    }\n  }\n\n  clear() {\n    this._set.clear();\n  }\n}\n\nclass RefSetCache {\n  constructor() {\n    this._map = new Map();\n  }\n\n  get size() {\n    return this._map.size;\n  }\n\n  get(ref) {\n    return this._map.get(ref.toString());\n  }\n\n  has(ref) {\n    return this._map.has(ref.toString());\n  }\n\n  put(ref, obj) {\n    this._map.set(ref.toString(), obj);\n  }\n\n  putAlias(ref, aliasRef) {\n    this._map.set(ref.toString(), this.get(aliasRef));\n  }\n\n  forEach(callback) {\n    for (const value of this._map.values()) {\n      callback(value);\n    }\n  }\n\n  clear() {\n    this._map.clear();\n  }\n}\n\nfunction isEOF(v) {\n  return v === EOF;\n}\n\nfunction isName(v, name) {\n  return v instanceof Name && (name === undefined || v.name === name);\n}\n\nfunction isCmd(v, cmd) {\n  return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);\n}\n\nfunction isDict(v, type) {\n  return (\n    v instanceof Dict && (type === undefined || isName(v.get(\"Type\"), type))\n  );\n}\n\nfunction isRef(v) {\n  return v instanceof Ref;\n}\n\nfunction isRefsEqual(v1, v2) {\n  if (\n    typeof PDFJSDev === \"undefined\" ||\n    PDFJSDev.test(\"!PRODUCTION || TESTING\")\n  ) {\n    assert(\n      v1 instanceof Ref && v2 instanceof Ref,\n      \"isRefsEqual: Both parameters should be `Ref`s.\"\n    );\n  }\n  return v1.num === v2.num && v1.gen === v2.gen;\n}\n\nfunction isStream(v) {\n  return v instanceof BaseStream;\n}\n\nfunction clearPrimitiveCaches() {\n  Cmd._clearCache();\n  Name._clearCache();\n  Ref._clearCache();\n}\n\nexport {\n  clearPrimitiveCaches,\n  Cmd,\n  Dict,\n  EOF,\n  isCmd,\n  isDict,\n  isEOF,\n  isName,\n  isRef,\n  isRefsEqual,\n  isStream,\n  Name,\n  Ref,\n  RefSet,\n  RefSetCache,\n};\n","/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bytesToString, shadow, unreachable } from \"../shared/util.js\";\n\nclass BaseStream {\n  constructor() {\n    if (this.constructor === BaseStream) {\n      unreachable(\"Cannot initialize BaseStream.\");\n    }\n  }\n\n  // eslint-disable-next-line getter-return\n  get length() {\n    unreachable(\"Abstract getter `length` accessed\");\n  }\n\n  // eslint-disable-next-line getter-return\n  get isEmpty() {\n    unreachable(\"Abstract getter `isEmpty` accessed\");\n  }\n\n  get isDataLoaded() {\n    return shadow(this, \"isDataLoaded\", true);\n  }\n\n  getByte() {\n    unreachable(\"Abstract method `getByte` called\");\n  }\n\n  getBytes(length, forceClamped = false) {\n    unreachable(\"Abstract method `getBytes` called\");\n  }\n\n  peekByte() {\n    const peekedByte = this.getByte();\n    if (peekedByte !== -1) {\n      this.pos--;\n    }\n    return peekedByte;\n  }\n\n  peekBytes(length, forceClamped = false) {\n    const bytes = this.getBytes(length, forceClamped);\n    this.pos -= bytes.length;\n    return bytes;\n  }\n\n  getUint16() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    if (b0 === -1 || b1 === -1) {\n      return -1;\n    }\n    return (b0 << 8) + b1;\n  }\n\n  getInt32() {\n    const b0 = this.getByte();\n    const b1 = this.getByte();\n    const b2 = this.getByte();\n    const b3 = this.getByte();\n    return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n  }\n\n  getByteRange(begin, end) {\n    unreachable(\"Abstract method `getByteRange` called\");\n  }\n\n  getString(length) {\n    return bytesToString(this.getBytes(length, /* forceClamped = */ false));\n  }\n\n  skip(n) {\n    this.pos += n || 1;\n  }\n\n  reset() {\n    unreachable(\"Abstract method `reset` called\");\n  }\n\n  moveStart() {\n    unreachable(\"Abstract method `moveStart` called\");\n  }\n\n  makeSubStream(start, length, dict = null) {\n    unreachable(\"Abstract method `makeSubStream` called\");\n  }\n\n  /**\n   * @returns {Array | null}\n   */\n  getBaseStreams() {\n    return null;\n  }\n}\n\nexport { BaseStream };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// Table C-2\nconst QeTable = [\n  { qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1 },\n  { qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0 },\n  { qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0 },\n  { qe: 0x0ac1, nmps: 4, nlps: 12, switchFlag: 0 },\n  { qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0 },\n  { qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0 },\n  { qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1 },\n  { qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0 },\n  { qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0 },\n  { qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0 },\n  { qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0 },\n  { qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0 },\n  { qe: 0x1c01, nmps: 13, nlps: 20, switchFlag: 0 },\n  { qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0 },\n  { qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1 },\n  { qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0 },\n  { qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0 },\n  { qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0 },\n  { qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0 },\n  { qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0 },\n  { qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0 },\n  { qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0 },\n  { qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0 },\n  { qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0 },\n  { qe: 0x1c01, nmps: 25, nlps: 22, switchFlag: 0 },\n  { qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0 },\n  { qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0 },\n  { qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0 },\n  { qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0 },\n  { qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0 },\n  { qe: 0x0ac1, nmps: 31, nlps: 28, switchFlag: 0 },\n  { qe: 0x09c1, nmps: 32, nlps: 29, switchFlag: 0 },\n  { qe: 0x08a1, nmps: 33, nlps: 30, switchFlag: 0 },\n  { qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0 },\n  { qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0 },\n  { qe: 0x02a1, nmps: 36, nlps: 33, switchFlag: 0 },\n  { qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0 },\n  { qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0 },\n  { qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0 },\n  { qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0 },\n  { qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0 },\n  { qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0 },\n  { qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0 },\n  { qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0 },\n  { qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0 },\n  { qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0 },\n  { qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0 },\n];\n\n/**\n * This class implements the QM Coder decoding as defined in\n *   JPEG 2000 Part I Final Committee Draft Version 1.0\n *   Annex C.3 Arithmetic decoding procedure\n * available at http://www.jpeg.org/public/fcd15444-1.pdf\n *\n * The arithmetic decoder is used in conjunction with context models to decode\n * JPEG2000 and JBIG2 streams.\n */\nclass ArithmeticDecoder {\n  // C.3.5 Initialisation of the decoder (INITDEC)\n  constructor(data, start, end) {\n    this.data = data;\n    this.bp = start;\n    this.dataEnd = end;\n\n    this.chigh = data[start];\n    this.clow = 0;\n\n    this.byteIn();\n\n    this.chigh = ((this.chigh << 7) & 0xffff) | ((this.clow >> 9) & 0x7f);\n    this.clow = (this.clow << 7) & 0xffff;\n    this.ct -= 7;\n    this.a = 0x8000;\n  }\n\n  // C.3.4 Compressed data input (BYTEIN)\n  byteIn() {\n    const data = this.data;\n    let bp = this.bp;\n\n    if (data[bp] === 0xff) {\n      if (data[bp + 1] > 0x8f) {\n        this.clow += 0xff00;\n        this.ct = 8;\n      } else {\n        bp++;\n        this.clow += data[bp] << 9;\n        this.ct = 7;\n        this.bp = bp;\n      }\n    } else {\n      bp++;\n      this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;\n      this.ct = 8;\n      this.bp = bp;\n    }\n    if (this.clow > 0xffff) {\n      this.chigh += this.clow >> 16;\n      this.clow &= 0xffff;\n    }\n  }\n\n  // C.3.2 Decoding a decision (DECODE)\n  readBit(contexts, pos) {\n    // Contexts are packed into 1 byte:\n    // highest 7 bits carry cx.index, lowest bit carries cx.mps\n    let cx_index = contexts[pos] >> 1,\n      cx_mps = contexts[pos] & 1;\n    const qeTableIcx = QeTable[cx_index];\n    const qeIcx = qeTableIcx.qe;\n    let d;\n    let a = this.a - qeIcx;\n\n    if (this.chigh < qeIcx) {\n      // exchangeLps\n      if (a < qeIcx) {\n        a = qeIcx;\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      } else {\n        a = qeIcx;\n        d = 1 ^ cx_mps;\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n        cx_index = qeTableIcx.nlps;\n      }\n    } else {\n      this.chigh -= qeIcx;\n      if ((a & 0x8000) !== 0) {\n        this.a = a;\n        return cx_mps;\n      }\n      // exchangeMps\n      if (a < qeIcx) {\n        d = 1 ^ cx_mps;\n        if (qeTableIcx.switchFlag === 1) {\n          cx_mps = d;\n        }\n        cx_index = qeTableIcx.nlps;\n      } else {\n        d = cx_mps;\n        cx_index = qeTableIcx.nmps;\n      }\n    }\n    // C.3.3 renormD;\n    do {\n      if (this.ct === 0) {\n        this.byteIn();\n      }\n\n      a <<= 1;\n      this.chigh = ((this.chigh << 1) & 0xffff) | ((this.clow >> 15) & 1);\n      this.clow = (this.clow << 1) & 0xffff;\n      this.ct--;\n    } while ((a & 0x8000) === 0);\n    this.a = a;\n\n    contexts[pos] = (cx_index << 1) | cx_mps;\n    return d;\n  }\n}\n\nexport { ArithmeticDecoder };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* Copyright 1996-2003 Glyph & Cog, LLC\n *\n * The CCITT stream implementation contained in this file is a JavaScript port\n * of XPDF's implementation, made available under the Apache 2.0 open source\n * license.\n */\n\nimport { info } from \"../shared/util.js\";\n\n/**\n * @typedef {Object} CCITTFaxDecoderSource\n * @property {function} next - Method that return one byte of data for decoding,\n *   or -1 when EOF is reached.\n */\n\nconst ccittEOL = -2;\nconst ccittEOF = -1;\nconst twoDimPass = 0;\nconst twoDimHoriz = 1;\nconst twoDimVert0 = 2;\nconst twoDimVertR1 = 3;\nconst twoDimVertL1 = 4;\nconst twoDimVertR2 = 5;\nconst twoDimVertL2 = 6;\nconst twoDimVertR3 = 7;\nconst twoDimVertL3 = 8;\n\n// prettier-ignore\nconst twoDimTable = [\n  [-1, -1], [-1, -1],                   // 000000x\n  [7, twoDimVertL3],                    // 0000010\n  [7, twoDimVertR3],                    // 0000011\n  [6, twoDimVertL2], [6, twoDimVertL2], // 000010x\n  [6, twoDimVertR2], [6, twoDimVertR2], // 000011x\n  [4, twoDimPass], [4, twoDimPass],     // 0001xxx\n  [4, twoDimPass], [4, twoDimPass],\n  [4, twoDimPass], [4, twoDimPass],\n  [4, twoDimPass], [4, twoDimPass],\n  [3, twoDimHoriz], [3, twoDimHoriz],   // 001xxxx\n  [3, twoDimHoriz], [3, twoDimHoriz],\n  [3, twoDimHoriz], [3, twoDimHoriz],\n  [3, twoDimHoriz], [3, twoDimHoriz],\n  [3, twoDimHoriz], [3, twoDimHoriz],\n  [3, twoDimHoriz], [3, twoDimHoriz],\n  [3, twoDimHoriz], [3, twoDimHoriz],\n  [3, twoDimHoriz], [3, twoDimHoriz],\n  [3, twoDimVertL1], [3, twoDimVertL1], // 010xxxx\n  [3, twoDimVertL1], [3, twoDimVertL1],\n  [3, twoDimVertL1], [3, twoDimVertL1],\n  [3, twoDimVertL1], [3, twoDimVertL1],\n  [3, twoDimVertL1], [3, twoDimVertL1],\n  [3, twoDimVertL1], [3, twoDimVertL1],\n  [3, twoDimVertL1], [3, twoDimVertL1],\n  [3, twoDimVertL1], [3, twoDimVertL1],\n  [3, twoDimVertR1], [3, twoDimVertR1], // 011xxxx\n  [3, twoDimVertR1], [3, twoDimVertR1],\n  [3, twoDimVertR1], [3, twoDimVertR1],\n  [3, twoDimVertR1], [3, twoDimVertR1],\n  [3, twoDimVertR1], [3, twoDimVertR1],\n  [3, twoDimVertR1], [3, twoDimVertR1],\n  [3, twoDimVertR1], [3, twoDimVertR1],\n  [3, twoDimVertR1], [3, twoDimVertR1],\n  [1, twoDimVert0], [1, twoDimVert0],   // 1xxxxxx\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0],\n  [1, twoDimVert0], [1, twoDimVert0]\n];\n\n// prettier-ignore\nconst whiteTable1 = [\n  [-1, -1],                               // 00000\n  [12, ccittEOL],                         // 00001\n  [-1, -1], [-1, -1],                     // 0001x\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 001xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 010xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 011xx\n  [11, 1792], [11, 1792],                 // 1000x\n  [12, 1984],                             // 10010\n  [12, 2048],                             // 10011\n  [12, 2112],                             // 10100\n  [12, 2176],                             // 10101\n  [12, 2240],                             // 10110\n  [12, 2304],                             // 10111\n  [11, 1856], [11, 1856],                 // 1100x\n  [11, 1920], [11, 1920],                 // 1101x\n  [12, 2368],                             // 11100\n  [12, 2432],                             // 11101\n  [12, 2496],                             // 11110\n  [12, 2560]                              // 11111\n];\n\n// prettier-ignore\nconst whiteTable2 = [\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],     // 0000000xx\n  [8, 29], [8, 29],                           // 00000010x\n  [8, 30], [8, 30],                           // 00000011x\n  [8, 45], [8, 45],                           // 00000100x\n  [8, 46], [8, 46],                           // 00000101x\n  [7, 22], [7, 22], [7, 22], [7, 22],         // 0000011xx\n  [7, 23], [7, 23], [7, 23], [7, 23],         // 0000100xx\n  [8, 47], [8, 47],                           // 00001010x\n  [8, 48], [8, 48],                           // 00001011x\n  [6, 13], [6, 13], [6, 13], [6, 13],         // 000011xxx\n  [6, 13], [6, 13], [6, 13], [6, 13],\n  [7, 20], [7, 20], [7, 20], [7, 20],         // 0001000xx\n  [8, 33], [8, 33],                           // 00010010x\n  [8, 34], [8, 34],                           // 00010011x\n  [8, 35], [8, 35],                           // 00010100x\n  [8, 36], [8, 36],                           // 00010101x\n  [8, 37], [8, 37],                           // 00010110x\n  [8, 38], [8, 38],                           // 00010111x\n  [7, 19], [7, 19], [7, 19], [7, 19],         // 0001100xx\n  [8, 31], [8, 31],                           // 00011010x\n  [8, 32], [8, 32],                           // 00011011x\n  [6, 1], [6, 1], [6, 1], [6, 1],             // 000111xxx\n  [6, 1], [6, 1], [6, 1], [6, 1],\n  [6, 12], [6, 12], [6, 12], [6, 12],         // 001000xxx\n  [6, 12], [6, 12], [6, 12], [6, 12],\n  [8, 53], [8, 53],                           // 00100100x\n  [8, 54], [8, 54],                           // 00100101x\n  [7, 26], [7, 26], [7, 26], [7, 26],         // 0010011xx\n  [8, 39], [8, 39],                           // 00101000x\n  [8, 40], [8, 40],                           // 00101001x\n  [8, 41], [8, 41],                           // 00101010x\n  [8, 42], [8, 42],                           // 00101011x\n  [8, 43], [8, 43],                           // 00101100x\n  [8, 44], [8, 44],                           // 00101101x\n  [7, 21], [7, 21], [7, 21], [7, 21],         // 0010111xx\n  [7, 28], [7, 28], [7, 28], [7, 28],         // 0011000xx\n  [8, 61], [8, 61],                           // 00110010x\n  [8, 62], [8, 62],                           // 00110011x\n  [8, 63], [8, 63],                           // 00110100x\n  [8, 0], [8, 0],                             // 00110101x\n  [8, 320], [8, 320],                         // 00110110x\n  [8, 384], [8, 384],                         // 00110111x\n  [5, 10], [5, 10], [5, 10], [5, 10],         // 00111xxxx\n  [5, 10], [5, 10], [5, 10], [5, 10],\n  [5, 10], [5, 10], [5, 10], [5, 10],\n  [5, 10], [5, 10], [5, 10], [5, 10],\n  [5, 11], [5, 11], [5, 11], [5, 11],         // 01000xxxx\n  [5, 11], [5, 11], [5, 11], [5, 11],\n  [5, 11], [5, 11], [5, 11], [5, 11],\n  [5, 11], [5, 11], [5, 11], [5, 11],\n  [7, 27], [7, 27], [7, 27], [7, 27],         // 0100100xx\n  [8, 59], [8, 59],                           // 01001010x\n  [8, 60], [8, 60],                           // 01001011x\n  [9, 1472],                                  // 010011000\n  [9, 1536],                                  // 010011001\n  [9, 1600],                                  // 010011010\n  [9, 1728],                                  // 010011011\n  [7, 18], [7, 18], [7, 18], [7, 18],         // 0100111xx\n  [7, 24], [7, 24], [7, 24], [7, 24],         // 0101000xx\n  [8, 49], [8, 49],                           // 01010010x\n  [8, 50], [8, 50],                           // 01010011x\n  [8, 51], [8, 51],                           // 01010100x\n  [8, 52], [8, 52],                           // 01010101x\n  [7, 25], [7, 25], [7, 25], [7, 25],         // 0101011xx\n  [8, 55], [8, 55],                           // 01011000x\n  [8, 56], [8, 56],                           // 01011001x\n  [8, 57], [8, 57],                           // 01011010x\n  [8, 58], [8, 58],                           // 01011011x\n  [6, 192], [6, 192], [6, 192], [6, 192],     // 010111xxx\n  [6, 192], [6, 192], [6, 192], [6, 192],\n  [6, 1664], [6, 1664], [6, 1664], [6, 1664], // 011000xxx\n  [6, 1664], [6, 1664], [6, 1664], [6, 1664],\n  [8, 448], [8, 448],                         // 01100100x\n  [8, 512], [8, 512],                         // 01100101x\n  [9, 704],                                   // 011001100\n  [9, 768],                                   // 011001101\n  [8, 640], [8, 640],                         // 01100111x\n  [8, 576], [8, 576],                         // 01101000x\n  [9, 832],                                   // 011010010\n  [9, 896],                                   // 011010011\n  [9, 960],                                   // 011010100\n  [9, 1024],                                  // 011010101\n  [9, 1088],                                  // 011010110\n  [9, 1152],                                  // 011010111\n  [9, 1216],                                  // 011011000\n  [9, 1280],                                  // 011011001\n  [9, 1344],                                  // 011011010\n  [9, 1408],                                  // 011011011\n  [7, 256], [7, 256], [7, 256], [7, 256],     // 0110111xx\n  [4, 2], [4, 2], [4, 2], [4, 2],             // 0111xxxxx\n  [4, 2], [4, 2], [4, 2], [4, 2],\n  [4, 2], [4, 2], [4, 2], [4, 2],\n  [4, 2], [4, 2], [4, 2], [4, 2],\n  [4, 2], [4, 2], [4, 2], [4, 2],\n  [4, 2], [4, 2], [4, 2], [4, 2],\n  [4, 2], [4, 2], [4, 2], [4, 2],\n  [4, 2], [4, 2], [4, 2], [4, 2],\n  [4, 3], [4, 3], [4, 3], [4, 3],             // 1000xxxxx\n  [4, 3], [4, 3], [4, 3], [4, 3],\n  [4, 3], [4, 3], [4, 3], [4, 3],\n  [4, 3], [4, 3], [4, 3], [4, 3],\n  [4, 3], [4, 3], [4, 3], [4, 3],\n  [4, 3], [4, 3], [4, 3], [4, 3],\n  [4, 3], [4, 3], [4, 3], [4, 3],\n  [4, 3], [4, 3], [4, 3], [4, 3],\n  [5, 128], [5, 128], [5, 128], [5, 128],     // 10010xxxx\n  [5, 128], [5, 128], [5, 128], [5, 128],\n  [5, 128], [5, 128], [5, 128], [5, 128],\n  [5, 128], [5, 128], [5, 128], [5, 128],\n  [5, 8], [5, 8], [5, 8], [5, 8],             // 10011xxxx\n  [5, 8], [5, 8], [5, 8], [5, 8],\n  [5, 8], [5, 8], [5, 8], [5, 8],\n  [5, 8], [5, 8], [5, 8], [5, 8],\n  [5, 9], [5, 9], [5, 9], [5, 9],             // 10100xxxx\n  [5, 9], [5, 9], [5, 9], [5, 9],\n  [5, 9], [5, 9], [5, 9], [5, 9],\n  [5, 9], [5, 9], [5, 9], [5, 9],\n  [6, 16], [6, 16], [6, 16], [6, 16],         // 101010xxx\n  [6, 16], [6, 16], [6, 16], [6, 16],\n  [6, 17], [6, 17], [6, 17], [6, 17],         // 101011xxx\n  [6, 17], [6, 17], [6, 17], [6, 17],\n  [4, 4], [4, 4], [4, 4], [4, 4],             // 1011xxxxx\n  [4, 4], [4, 4], [4, 4], [4, 4],\n  [4, 4], [4, 4], [4, 4], [4, 4],\n  [4, 4], [4, 4], [4, 4], [4, 4],\n  [4, 4], [4, 4], [4, 4], [4, 4],\n  [4, 4], [4, 4], [4, 4], [4, 4],\n  [4, 4], [4, 4], [4, 4], [4, 4],\n  [4, 4], [4, 4], [4, 4], [4, 4],\n  [4, 5], [4, 5], [4, 5], [4, 5],             // 1100xxxxx\n  [4, 5], [4, 5], [4, 5], [4, 5],\n  [4, 5], [4, 5], [4, 5], [4, 5],\n  [4, 5], [4, 5], [4, 5], [4, 5],\n  [4, 5], [4, 5], [4, 5], [4, 5],\n  [4, 5], [4, 5], [4, 5], [4, 5],\n  [4, 5], [4, 5], [4, 5], [4, 5],\n  [4, 5], [4, 5], [4, 5], [4, 5],\n  [6, 14], [6, 14], [6, 14], [6, 14],         // 110100xxx\n  [6, 14], [6, 14], [6, 14], [6, 14],\n  [6, 15], [6, 15], [6, 15], [6, 15],         // 110101xxx\n  [6, 15], [6, 15], [6, 15], [6, 15],\n  [5, 64], [5, 64], [5, 64], [5, 64],         // 11011xxxx\n  [5, 64], [5, 64], [5, 64], [5, 64],\n  [5, 64], [5, 64], [5, 64], [5, 64],\n  [5, 64], [5, 64], [5, 64], [5, 64],\n  [4, 6], [4, 6], [4, 6], [4, 6],             // 1110xxxxx\n  [4, 6], [4, 6], [4, 6], [4, 6],\n  [4, 6], [4, 6], [4, 6], [4, 6],\n  [4, 6], [4, 6], [4, 6], [4, 6],\n  [4, 6], [4, 6], [4, 6], [4, 6],\n  [4, 6], [4, 6], [4, 6], [4, 6],\n  [4, 6], [4, 6], [4, 6], [4, 6],\n  [4, 6], [4, 6], [4, 6], [4, 6],\n  [4, 7], [4, 7], [4, 7], [4, 7],             // 1111xxxxx\n  [4, 7], [4, 7], [4, 7], [4, 7],\n  [4, 7], [4, 7], [4, 7], [4, 7],\n  [4, 7], [4, 7], [4, 7], [4, 7],\n  [4, 7], [4, 7], [4, 7], [4, 7],\n  [4, 7], [4, 7], [4, 7], [4, 7],\n  [4, 7], [4, 7], [4, 7], [4, 7],\n  [4, 7], [4, 7], [4, 7], [4, 7]\n];\n\n// prettier-ignore\nconst blackTable1 = [\n  [-1, -1], [-1, -1],                             // 000000000000x\n  [12, ccittEOL], [12, ccittEOL],                 // 000000000001x\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000001xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000010xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000011xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000100xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000101xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000110xx\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1],         // 00000000111xx\n  [11, 1792], [11, 1792], [11, 1792], [11, 1792], // 00000001000xx\n  [12, 1984], [12, 1984],                         // 000000010010x\n  [12, 2048], [12, 2048],                         // 000000010011x\n  [12, 2112], [12, 2112],                         // 000000010100x\n  [12, 2176], [12, 2176],                         // 000000010101x\n  [12, 2240], [12, 2240],                         // 000000010110x\n  [12, 2304], [12, 2304],                         // 000000010111x\n  [11, 1856], [11, 1856], [11, 1856], [11, 1856], // 00000001100xx\n  [11, 1920], [11, 1920], [11, 1920], [11, 1920], // 00000001101xx\n  [12, 2368], [12, 2368],                         // 000000011100x\n  [12, 2432], [12, 2432],                         // 000000011101x\n  [12, 2496], [12, 2496],                         // 000000011110x\n  [12, 2560], [12, 2560],                         // 000000011111x\n  [10, 18], [10, 18], [10, 18], [10, 18],         // 0000001000xxx\n  [10, 18], [10, 18], [10, 18], [10, 18],\n  [12, 52], [12, 52],                             // 000000100100x\n  [13, 640],                                      // 0000001001010\n  [13, 704],                                      // 0000001001011\n  [13, 768],                                      // 0000001001100\n  [13, 832],                                      // 0000001001101\n  [12, 55], [12, 55],                             // 000000100111x\n  [12, 56], [12, 56],                             // 000000101000x\n  [13, 1280],                                     // 0000001010010\n  [13, 1344],                                     // 0000001010011\n  [13, 1408],                                     // 0000001010100\n  [13, 1472],                                     // 0000001010101\n  [12, 59], [12, 59],                             // 000000101011x\n  [12, 60], [12, 60],                             // 000000101100x\n  [13, 1536],                                     // 0000001011010\n  [13, 1600],                                     // 0000001011011\n  [11, 24], [11, 24], [11, 24], [11, 24],         // 00000010111xx\n  [11, 25], [11, 25], [11, 25], [11, 25],         // 00000011000xx\n  [13, 1664],                                     // 0000001100100\n  [13, 1728],                                     // 0000001100101\n  [12, 320], [12, 320],                           // 000000110011x\n  [12, 384], [12, 384],                           // 000000110100x\n  [12, 448], [12, 448],                           // 000000110101x\n  [13, 512],                                      // 0000001101100\n  [13, 576],                                      // 0000001101101\n  [12, 53], [12, 53],                             // 000000110111x\n  [12, 54], [12, 54],                             // 000000111000x\n  [13, 896],                                      // 0000001110010\n  [13, 960],                                      // 0000001110011\n  [13, 1024],                                     // 0000001110100\n  [13, 1088],                                     // 0000001110101\n  [13, 1152],                                     // 0000001110110\n  [13, 1216],                                     // 0000001110111\n  [10, 64], [10, 64], [10, 64], [10, 64],         // 0000001111xxx\n  [10, 64], [10, 64], [10, 64], [10, 64]\n];\n\n// prettier-ignore\nconst blackTable2 = [\n  [8, 13], [8, 13], [8, 13], [8, 13],     // 00000100xxxx\n  [8, 13], [8, 13], [8, 13], [8, 13],\n  [8, 13], [8, 13], [8, 13], [8, 13],\n  [8, 13], [8, 13], [8, 13], [8, 13],\n  [11, 23], [11, 23],                     // 00000101000x\n  [12, 50],                               // 000001010010\n  [12, 51],                               // 000001010011\n  [12, 44],                               // 000001010100\n  [12, 45],                               // 000001010101\n  [12, 46],                               // 000001010110\n  [12, 47],                               // 000001010111\n  [12, 57],                               // 000001011000\n  [12, 58],                               // 000001011001\n  [12, 61],                               // 000001011010\n  [12, 256],                              // 000001011011\n  [10, 16], [10, 16], [10, 16], [10, 16], // 0000010111xx\n  [10, 17], [10, 17], [10, 17], [10, 17], // 0000011000xx\n  [12, 48],                               // 000001100100\n  [12, 49],                               // 000001100101\n  [12, 62],                               // 000001100110\n  [12, 63],                               // 000001100111\n  [12, 30],                               // 000001101000\n  [12, 31],                               // 000001101001\n  [12, 32],                               // 000001101010\n  [12, 33],                               // 000001101011\n  [12, 40],                               // 000001101100\n  [12, 41],                               // 000001101101\n  [11, 22], [11, 22],                     // 00000110111x\n  [8, 14], [8, 14], [8, 14], [8, 14],     // 00000111xxxx\n  [8, 14], [8, 14], [8, 14], [8, 14],\n  [8, 14], [8, 14], [8, 14], [8, 14],\n  [8, 14], [8, 14], [8, 14], [8, 14],\n  [7, 10], [7, 10], [7, 10], [7, 10],     // 0000100xxxxx\n  [7, 10], [7, 10], [7, 10], [7, 10],\n  [7, 10], [7, 10], [7, 10], [7, 10],\n  [7, 10], [7, 10], [7, 10], [7, 10],\n  [7, 10], [7, 10], [7, 10], [7, 10],\n  [7, 10], [7, 10], [7, 10], [7, 10],\n  [7, 10], [7, 10], [7, 10], [7, 10],\n  [7, 10], [7, 10], [7, 10], [7, 10],\n  [7, 11], [7, 11], [7, 11], [7, 11],     // 0000101xxxxx\n  [7, 11], [7, 11], [7, 11], [7, 11],\n  [7, 11], [7, 11], [7, 11], [7, 11],\n  [7, 11], [7, 11], [7, 11], [7, 11],\n  [7, 11], [7, 11], [7, 11], [7, 11],\n  [7, 11], [7, 11], [7, 11], [7, 11],\n  [7, 11], [7, 11], [7, 11], [7, 11],\n  [7, 11], [7, 11], [7, 11], [7, 11],\n  [9, 15], [9, 15], [9, 15], [9, 15],     // 000011000xxx\n  [9, 15], [9, 15], [9, 15], [9, 15],\n  [12, 128],                              // 000011001000\n  [12, 192],                              // 000011001001\n  [12, 26],                               // 000011001010\n  [12, 27],                               // 000011001011\n  [12, 28],                               // 000011001100\n  [12, 29],                               // 000011001101\n  [11, 19], [11, 19],                     // 00001100111x\n  [11, 20], [11, 20],                     // 00001101000x\n  [12, 34],                               // 000011010010\n  [12, 35],                               // 000011010011\n  [12, 36],                               // 000011010100\n  [12, 37],                               // 000011010101\n  [12, 38],                               // 000011010110\n  [12, 39],                               // 000011010111\n  [11, 21], [11, 21],                     // 00001101100x\n  [12, 42],                               // 000011011010\n  [12, 43],                               // 000011011011\n  [10, 0], [10, 0], [10, 0], [10, 0],     // 0000110111xx\n  [7, 12], [7, 12], [7, 12], [7, 12],     // 0000111xxxxx\n  [7, 12], [7, 12], [7, 12], [7, 12],\n  [7, 12], [7, 12], [7, 12], [7, 12],\n  [7, 12], [7, 12], [7, 12], [7, 12],\n  [7, 12], [7, 12], [7, 12], [7, 12],\n  [7, 12], [7, 12], [7, 12], [7, 12],\n  [7, 12], [7, 12], [7, 12], [7, 12],\n  [7, 12], [7, 12], [7, 12], [7, 12]\n];\n\n// prettier-ignore\nconst blackTable3 = [\n  [-1, -1], [-1, -1], [-1, -1], [-1, -1], // 0000xx\n  [6, 9],                                 // 000100\n  [6, 8],                                 // 000101\n  [5, 7], [5, 7],                         // 00011x\n  [4, 6], [4, 6], [4, 6], [4, 6],         // 0010xx\n  [4, 5], [4, 5], [4, 5], [4, 5],         // 0011xx\n  [3, 1], [3, 1], [3, 1], [3, 1],         // 010xxx\n  [3, 1], [3, 1], [3, 1], [3, 1],\n  [3, 4], [3, 4], [3, 4], [3, 4],         // 011xxx\n  [3, 4], [3, 4], [3, 4], [3, 4],\n  [2, 3], [2, 3], [2, 3], [2, 3],         // 10xxxx\n  [2, 3], [2, 3], [2, 3], [2, 3],\n  [2, 3], [2, 3], [2, 3], [2, 3],\n  [2, 3], [2, 3], [2, 3], [2, 3],\n  [2, 2], [2, 2], [2, 2], [2, 2],         // 11xxxx\n  [2, 2], [2, 2], [2, 2], [2, 2],\n  [2, 2], [2, 2], [2, 2], [2, 2],\n  [2, 2], [2, 2], [2, 2], [2, 2]\n];\n\n/**\n * @param {CCITTFaxDecoderSource} source - The data which should be decoded.\n * @param {Object} [options] - Decoding options.\n */\nclass CCITTFaxDecoder {\n  constructor(source, options = {}) {\n    if (!source || typeof source.next !== \"function\") {\n      throw new Error('CCITTFaxDecoder - invalid \"source\" parameter.');\n    }\n    this.source = source;\n    this.eof = false;\n\n    this.encoding = options.K || 0;\n    this.eoline = options.EndOfLine || false;\n    this.byteAlign = options.EncodedByteAlign || false;\n    this.columns = options.Columns || 1728;\n    this.rows = options.Rows || 0;\n    let eoblock = options.EndOfBlock;\n    if (eoblock === null || eoblock === undefined) {\n      eoblock = true;\n    }\n    this.eoblock = eoblock;\n    this.black = options.BlackIs1 || false;\n\n    this.codingLine = new Uint32Array(this.columns + 1);\n    this.refLine = new Uint32Array(this.columns + 2);\n\n    this.codingLine[0] = this.columns;\n    this.codingPos = 0;\n\n    this.row = 0;\n    this.nextLine2D = this.encoding < 0;\n    this.inputBits = 0;\n    this.inputBuf = 0;\n    this.outputBits = 0;\n    this.rowsDone = false;\n\n    let code1;\n    while ((code1 = this._lookBits(12)) === 0) {\n      this._eatBits(1);\n    }\n    if (code1 === 1) {\n      this._eatBits(12);\n    }\n    if (this.encoding > 0) {\n      this.nextLine2D = !this._lookBits(1);\n      this._eatBits(1);\n    }\n  }\n\n  readNextChar() {\n    if (this.eof) {\n      return -1;\n    }\n    const refLine = this.refLine;\n    const codingLine = this.codingLine;\n    const columns = this.columns;\n\n    let refPos, blackPixels, bits, i;\n\n    if (this.outputBits === 0) {\n      if (this.rowsDone) {\n        this.eof = true;\n      }\n      if (this.eof) {\n        return -1;\n      }\n      this.err = false;\n\n      let code1, code2, code3;\n      if (this.nextLine2D) {\n        for (i = 0; codingLine[i] < columns; ++i) {\n          refLine[i] = codingLine[i];\n        }\n        refLine[i++] = columns;\n        refLine[i] = columns;\n        codingLine[0] = 0;\n        this.codingPos = 0;\n        refPos = 0;\n        blackPixels = 0;\n\n        while (codingLine[this.codingPos] < columns) {\n          code1 = this._getTwoDimCode();\n          switch (code1) {\n            case twoDimPass:\n              this._addPixels(refLine[refPos + 1], blackPixels);\n              if (refLine[refPos + 1] < columns) {\n                refPos += 2;\n              }\n              break;\n            case twoDimHoriz:\n              code1 = code2 = 0;\n              if (blackPixels) {\n                do {\n                  code1 += code3 = this._getBlackCode();\n                } while (code3 >= 64);\n                do {\n                  code2 += code3 = this._getWhiteCode();\n                } while (code3 >= 64);\n              } else {\n                do {\n                  code1 += code3 = this._getWhiteCode();\n                } while (code3 >= 64);\n                do {\n                  code2 += code3 = this._getBlackCode();\n                } while (code3 >= 64);\n              }\n              this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n              if (codingLine[this.codingPos] < columns) {\n                this._addPixels(\n                  codingLine[this.codingPos] + code2,\n                  blackPixels ^ 1\n                );\n              }\n              while (\n                refLine[refPos] <= codingLine[this.codingPos] &&\n                refLine[refPos] < columns\n              ) {\n                refPos += 2;\n              }\n              break;\n            case twoDimVertR3:\n              this._addPixels(refLine[refPos] + 3, blackPixels);\n              blackPixels ^= 1;\n              if (codingLine[this.codingPos] < columns) {\n                ++refPos;\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n              }\n              break;\n            case twoDimVertR2:\n              this._addPixels(refLine[refPos] + 2, blackPixels);\n              blackPixels ^= 1;\n              if (codingLine[this.codingPos] < columns) {\n                ++refPos;\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n              }\n              break;\n            case twoDimVertR1:\n              this._addPixels(refLine[refPos] + 1, blackPixels);\n              blackPixels ^= 1;\n              if (codingLine[this.codingPos] < columns) {\n                ++refPos;\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n              }\n              break;\n            case twoDimVert0:\n              this._addPixels(refLine[refPos], blackPixels);\n              blackPixels ^= 1;\n              if (codingLine[this.codingPos] < columns) {\n                ++refPos;\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n              }\n              break;\n            case twoDimVertL3:\n              this._addPixelsNeg(refLine[refPos] - 3, blackPixels);\n              blackPixels ^= 1;\n              if (codingLine[this.codingPos] < columns) {\n                if (refPos > 0) {\n                  --refPos;\n                } else {\n                  ++refPos;\n                }\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n              }\n              break;\n            case twoDimVertL2:\n              this._addPixelsNeg(refLine[refPos] - 2, blackPixels);\n              blackPixels ^= 1;\n              if (codingLine[this.codingPos] < columns) {\n                if (refPos > 0) {\n                  --refPos;\n                } else {\n                  ++refPos;\n                }\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n              }\n              break;\n            case twoDimVertL1:\n              this._addPixelsNeg(refLine[refPos] - 1, blackPixels);\n              blackPixels ^= 1;\n              if (codingLine[this.codingPos] < columns) {\n                if (refPos > 0) {\n                  --refPos;\n                } else {\n                  ++refPos;\n                }\n                while (\n                  refLine[refPos] <= codingLine[this.codingPos] &&\n                  refLine[refPos] < columns\n                ) {\n                  refPos += 2;\n                }\n              }\n              break;\n            case ccittEOF:\n              this._addPixels(columns, 0);\n              this.eof = true;\n              break;\n            default:\n              info(\"bad 2d code\");\n              this._addPixels(columns, 0);\n              this.err = true;\n          }\n        }\n      } else {\n        codingLine[0] = 0;\n        this.codingPos = 0;\n        blackPixels = 0;\n        while (codingLine[this.codingPos] < columns) {\n          code1 = 0;\n          if (blackPixels) {\n            do {\n              code1 += code3 = this._getBlackCode();\n            } while (code3 >= 64);\n          } else {\n            do {\n              code1 += code3 = this._getWhiteCode();\n            } while (code3 >= 64);\n          }\n          this._addPixels(codingLine[this.codingPos] + code1, blackPixels);\n          blackPixels ^= 1;\n        }\n      }\n\n      let gotEOL = false;\n\n      if (this.byteAlign) {\n        this.inputBits &= ~7;\n      }\n\n      if (!this.eoblock && this.row === this.rows - 1) {\n        this.rowsDone = true;\n      } else {\n        code1 = this._lookBits(12);\n        if (this.eoline) {\n          while (code1 !== ccittEOF && code1 !== 1) {\n            this._eatBits(1);\n            code1 = this._lookBits(12);\n          }\n        } else {\n          while (code1 === 0) {\n            this._eatBits(1);\n            code1 = this._lookBits(12);\n          }\n        }\n        if (code1 === 1) {\n          this._eatBits(12);\n          gotEOL = true;\n        } else if (code1 === ccittEOF) {\n          this.eof = true;\n        }\n      }\n\n      if (!this.eof && this.encoding > 0 && !this.rowsDone) {\n        this.nextLine2D = !this._lookBits(1);\n        this._eatBits(1);\n      }\n\n      if (this.eoblock && gotEOL && this.byteAlign) {\n        code1 = this._lookBits(12);\n        if (code1 === 1) {\n          this._eatBits(12);\n          if (this.encoding > 0) {\n            this._lookBits(1);\n            this._eatBits(1);\n          }\n          if (this.encoding >= 0) {\n            for (i = 0; i < 4; ++i) {\n              code1 = this._lookBits(12);\n              if (code1 !== 1) {\n                info(\"bad rtc code: \" + code1);\n              }\n              this._eatBits(12);\n              if (this.encoding > 0) {\n                this._lookBits(1);\n                this._eatBits(1);\n              }\n            }\n          }\n          this.eof = true;\n        }\n      } else if (this.err && this.eoline) {\n        while (true) {\n          code1 = this._lookBits(13);\n          if (code1 === ccittEOF) {\n            this.eof = true;\n            return -1;\n          }\n          if (code1 >> 1 === 1) {\n            break;\n          }\n          this._eatBits(1);\n        }\n        this._eatBits(12);\n        if (this.encoding > 0) {\n          this._eatBits(1);\n          this.nextLine2D = !(code1 & 1);\n        }\n      }\n\n      if (codingLine[0] > 0) {\n        this.outputBits = codingLine[(this.codingPos = 0)];\n      } else {\n        this.outputBits = codingLine[(this.codingPos = 1)];\n      }\n      this.row++;\n    }\n\n    let c;\n    if (this.outputBits >= 8) {\n      c = this.codingPos & 1 ? 0 : 0xff;\n      this.outputBits -= 8;\n      if (this.outputBits === 0 && codingLine[this.codingPos] < columns) {\n        this.codingPos++;\n        this.outputBits =\n          codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n      }\n    } else {\n      bits = 8;\n      c = 0;\n      do {\n        if (this.outputBits > bits) {\n          c <<= bits;\n          if (!(this.codingPos & 1)) {\n            c |= 0xff >> (8 - bits);\n          }\n          this.outputBits -= bits;\n          bits = 0;\n        } else {\n          c <<= this.outputBits;\n          if (!(this.codingPos & 1)) {\n            c |= 0xff >> (8 - this.outputBits);\n          }\n          bits -= this.outputBits;\n          this.outputBits = 0;\n          if (codingLine[this.codingPos] < columns) {\n            this.codingPos++;\n            this.outputBits =\n              codingLine[this.codingPos] - codingLine[this.codingPos - 1];\n          } else if (bits > 0) {\n            c <<= bits;\n            bits = 0;\n          }\n        }\n      } while (bits);\n    }\n    if (this.black) {\n      c ^= 0xff;\n    }\n    return c;\n  }\n\n  /**\n   * @private\n   */\n  _addPixels(a1, blackPixels) {\n    const codingLine = this.codingLine;\n    let codingPos = this.codingPos;\n\n    if (a1 > codingLine[codingPos]) {\n      if (a1 > this.columns) {\n        info(\"row is wrong length\");\n        this.err = true;\n        a1 = this.columns;\n      }\n      if ((codingPos & 1) ^ blackPixels) {\n        ++codingPos;\n      }\n\n      codingLine[codingPos] = a1;\n    }\n    this.codingPos = codingPos;\n  }\n\n  /**\n   * @private\n   */\n  _addPixelsNeg(a1, blackPixels) {\n    const codingLine = this.codingLine;\n    let codingPos = this.codingPos;\n\n    if (a1 > codingLine[codingPos]) {\n      if (a1 > this.columns) {\n        info(\"row is wrong length\");\n        this.err = true;\n        a1 = this.columns;\n      }\n      if ((codingPos & 1) ^ blackPixels) {\n        ++codingPos;\n      }\n\n      codingLine[codingPos] = a1;\n    } else if (a1 < codingLine[codingPos]) {\n      if (a1 < 0) {\n        info(\"invalid code\");\n        this.err = true;\n        a1 = 0;\n      }\n      while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {\n        --codingPos;\n      }\n      codingLine[codingPos] = a1;\n    }\n\n    this.codingPos = codingPos;\n  }\n\n  /**\n   * This function returns the code found from the table.\n   * The start and end parameters set the boundaries for searching the table.\n   * The limit parameter is optional. Function returns an array with three\n   * values. The first array element indicates whether a valid code is being\n   * returned. The second array element is the actual code. The third array\n   * element indicates whether EOF was reached.\n   * @private\n   */\n  _findTableCode(start, end, table, limit) {\n    const limitValue = limit || 0;\n    for (let i = start; i <= end; ++i) {\n      let code = this._lookBits(i);\n      if (code === ccittEOF) {\n        return [true, 1, false];\n      }\n      if (i < end) {\n        code <<= end - i;\n      }\n      if (!limitValue || code >= limitValue) {\n        const p = table[code - limitValue];\n        if (p[0] === i) {\n          this._eatBits(i);\n          return [true, p[1], true];\n        }\n      }\n    }\n    return [false, 0, false];\n  }\n\n  /**\n   * @private\n   */\n  _getTwoDimCode() {\n    let code = 0;\n    let p;\n    if (this.eoblock) {\n      code = this._lookBits(7);\n      p = twoDimTable[code];\n      if (p && p[0] > 0) {\n        this._eatBits(p[0]);\n        return p[1];\n      }\n    } else {\n      const result = this._findTableCode(1, 7, twoDimTable);\n      if (result[0] && result[2]) {\n        return result[1];\n      }\n    }\n    info(\"Bad two dim code\");\n    return ccittEOF;\n  }\n\n  /**\n   * @private\n   */\n  _getWhiteCode() {\n    let code = 0;\n    let p;\n    if (this.eoblock) {\n      code = this._lookBits(12);\n      if (code === ccittEOF) {\n        return 1;\n      }\n\n      if (code >> 5 === 0) {\n        p = whiteTable1[code];\n      } else {\n        p = whiteTable2[code >> 3];\n      }\n\n      if (p[0] > 0) {\n        this._eatBits(p[0]);\n        return p[1];\n      }\n    } else {\n      let result = this._findTableCode(1, 9, whiteTable2);\n      if (result[0]) {\n        return result[1];\n      }\n\n      result = this._findTableCode(11, 12, whiteTable1);\n      if (result[0]) {\n        return result[1];\n      }\n    }\n    info(\"bad white code\");\n    this._eatBits(1);\n    return 1;\n  }\n\n  /**\n   * @private\n   */\n  _getBlackCode() {\n    let code, p;\n    if (this.eoblock) {\n      code = this._lookBits(13);\n      if (code === ccittEOF) {\n        return 1;\n      }\n      if (code >> 7 === 0) {\n        p = blackTable1[code];\n      } else if (code >> 9 === 0 && code >> 7 !== 0) {\n        p = blackTable2[(code >> 1) - 64];\n      } else {\n        p = blackTable3[code >> 7];\n      }\n\n      if (p[0] > 0) {\n        this._eatBits(p[0]);\n        return p[1];\n      }\n    } else {\n      let result = this._findTableCode(2, 6, blackTable3);\n      if (result[0]) {\n        return result[1];\n      }\n\n      result = this._findTableCode(7, 12, blackTable2, 64);\n      if (result[0]) {\n        return result[1];\n      }\n\n      result = this._findTableCode(10, 13, blackTable1);\n      if (result[0]) {\n        return result[1];\n      }\n    }\n    info(\"bad black code\");\n    this._eatBits(1);\n    return 1;\n  }\n\n  /**\n   * @private\n   */\n  _lookBits(n) {\n    let c;\n    while (this.inputBits < n) {\n      if ((c = this.source.next()) === -1) {\n        if (this.inputBits === 0) {\n          return ccittEOF;\n        }\n        return (this.inputBuf << (n - this.inputBits)) & (0xffff >> (16 - n));\n      }\n      this.inputBuf = (this.inputBuf << 8) | c;\n      this.inputBits += 8;\n    }\n    return (this.inputBuf >> (this.inputBits - n)) & (0xffff >> (16 - n));\n  }\n\n  /**\n   * @private\n   */\n  _eatBits(n) {\n    if ((this.inputBits -= n) < 0) {\n      this.inputBits = 0;\n    }\n  }\n}\n\nexport { CCITTFaxDecoder };\n","/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, BaseException, warn } from \"../shared/util.js\";\nimport { readUint16 } from \"./core_utils.js\";\n\nclass JpegError extends BaseException {\n  constructor(msg) {\n    super(`JPEG error: ${msg}`);\n  }\n}\n\nclass DNLMarkerError extends BaseException {\n  constructor(message, scanLines) {\n    super(message);\n    this.scanLines = scanLines;\n  }\n}\n\nclass EOIMarkerError extends BaseException {}\n\n/**\n * This code was forked from https://github.com/notmasteryet/jpgjs.\n * The original version was created by GitHub user notmasteryet.\n *\n * - The JPEG specification can be found in the ITU CCITT Recommendation T.81\n *   (www.w3.org/Graphics/JPEG/itu-t81.pdf)\n * - The JFIF specification can be found in the JPEG File Interchange Format\n *   (www.w3.org/Graphics/JPEG/jfif3.pdf)\n * - The Adobe Application-Specific JPEG markers in the\n *   Supporting the DCT Filters in PostScript Level 2, Technical Note #5116\n *   (partners.adobe.com/public/developer/en/ps/sdk/5116.DCT_Filter.pdf)\n */\n\n// prettier-ignore\nconst dctZigZag = new Uint8Array([\n   0,\n   1,  8,\n  16,  9,  2,\n   3, 10, 17, 24,\n  32, 25, 18, 11, 4,\n   5, 12, 19, 26, 33, 40,\n  48, 41, 34, 27, 20, 13,  6,\n   7, 14, 21, 28, 35, 42, 49, 56,\n  57, 50, 43, 36, 29, 22, 15,\n  23, 30, 37, 44, 51, 58,\n  59, 52, 45, 38, 31,\n  39, 46, 53, 60,\n  61, 54, 47,\n  55, 62,\n  63\n]);\n\nconst dctCos1 = 4017; // cos(pi/16)\nconst dctSin1 = 799; // sin(pi/16)\nconst dctCos3 = 3406; // cos(3*pi/16)\nconst dctSin3 = 2276; // sin(3*pi/16)\nconst dctCos6 = 1567; // cos(6*pi/16)\nconst dctSin6 = 3784; // sin(6*pi/16)\nconst dctSqrt2 = 5793; // sqrt(2)\nconst dctSqrt1d2 = 2896; // sqrt(2) / 2\n\nfunction buildHuffmanTable(codeLengths, values) {\n  let k = 0,\n    i,\n    j,\n    length = 16;\n  while (length > 0 && !codeLengths[length - 1]) {\n    length--;\n  }\n  const code = [{ children: [], index: 0 }];\n  let p = code[0],\n    q;\n  for (i = 0; i < length; i++) {\n    for (j = 0; j < codeLengths[i]; j++) {\n      p = code.pop();\n      p.children[p.index] = values[k];\n      while (p.index > 0) {\n        p = code.pop();\n      }\n      p.index++;\n      code.push(p);\n      while (code.length <= i) {\n        code.push((q = { children: [], index: 0 }));\n        p.children[p.index] = q.children;\n        p = q;\n      }\n      k++;\n    }\n    if (i + 1 < length) {\n      // p here points to last code\n      code.push((q = { children: [], index: 0 }));\n      p.children[p.index] = q.children;\n      p = q;\n    }\n  }\n  return code[0].children;\n}\n\nfunction getBlockBufferOffset(component, row, col) {\n  return 64 * ((component.blocksPerLine + 1) * row + col);\n}\n\nfunction decodeScan(\n  data,\n  offset,\n  frame,\n  components,\n  resetInterval,\n  spectralStart,\n  spectralEnd,\n  successivePrev,\n  successive,\n  parseDNLMarker = false\n) {\n  const mcusPerLine = frame.mcusPerLine;\n  const progressive = frame.progressive;\n\n  const startOffset = offset;\n  let bitsData = 0,\n    bitsCount = 0;\n\n  function readBit() {\n    if (bitsCount > 0) {\n      bitsCount--;\n      return (bitsData >> bitsCount) & 1;\n    }\n    bitsData = data[offset++];\n    if (bitsData === 0xff) {\n      const nextByte = data[offset++];\n      if (nextByte) {\n        if (nextByte === /* DNL = */ 0xdc && parseDNLMarker) {\n          offset += 2; // Skip marker length.\n\n          const scanLines = readUint16(data, offset);\n          offset += 2;\n          if (scanLines > 0 && scanLines !== frame.scanLines) {\n            throw new DNLMarkerError(\n              \"Found DNL marker (0xFFDC) while parsing scan data\",\n              scanLines\n            );\n          }\n        } else if (nextByte === /* EOI = */ 0xd9) {\n          if (parseDNLMarker) {\n            // NOTE: only 8-bit JPEG images are supported in this decoder.\n            const maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);\n            // Heuristic to attempt to handle corrupt JPEG images with too\n            // large `scanLines` parameter, by falling back to the currently\n            // parsed number of scanLines when it's at least (approximately)\n            // one order of magnitude smaller than expected (fixes\n            // issue10880.pdf and issue10989.pdf).\n            if (\n              maybeScanLines > 0 &&\n              Math.round(frame.scanLines / maybeScanLines) >= 10\n            ) {\n              throw new DNLMarkerError(\n                \"Found EOI marker (0xFFD9) while parsing scan data, \" +\n                  \"possibly caused by incorrect `scanLines` parameter\",\n                maybeScanLines\n              );\n            }\n          }\n          throw new EOIMarkerError(\n            \"Found EOI marker (0xFFD9) while parsing scan data\"\n          );\n        }\n        throw new JpegError(\n          `unexpected marker ${((bitsData << 8) | nextByte).toString(16)}`\n        );\n      }\n      // unstuff 0\n    }\n    bitsCount = 7;\n    return bitsData >>> 7;\n  }\n\n  function decodeHuffman(tree) {\n    let node = tree;\n    while (true) {\n      node = node[readBit()];\n      switch (typeof node) {\n        case \"number\":\n          return node;\n        case \"object\":\n          continue;\n      }\n      throw new JpegError(\"invalid huffman sequence\");\n    }\n  }\n\n  function receive(length) {\n    let n = 0;\n    while (length > 0) {\n      n = (n << 1) | readBit();\n      length--;\n    }\n    return n;\n  }\n\n  function receiveAndExtend(length) {\n    if (length === 1) {\n      return readBit() === 1 ? 1 : -1;\n    }\n    const n = receive(length);\n    if (n >= 1 << (length - 1)) {\n      return n;\n    }\n    return n + (-1 << length) + 1;\n  }\n\n  function decodeBaseline(component, blockOffset) {\n    const t = decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : receiveAndExtend(t);\n    component.blockData[blockOffset] = component.pred += diff;\n    let k = 1;\n    while (k < 64) {\n      const rs = decodeHuffman(component.huffmanTableAC);\n      const s = rs & 15,\n        r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          break;\n        }\n        k += 16;\n        continue;\n      }\n      k += r;\n      const z = dctZigZag[k];\n      component.blockData[blockOffset + z] = receiveAndExtend(s);\n      k++;\n    }\n  }\n\n  function decodeDCFirst(component, blockOffset) {\n    const t = decodeHuffman(component.huffmanTableDC);\n    const diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n    component.blockData[blockOffset] = component.pred += diff;\n  }\n\n  function decodeDCSuccessive(component, blockOffset) {\n    component.blockData[blockOffset] |= readBit() << successive;\n  }\n\n  let eobrun = 0;\n  function decodeACFirst(component, blockOffset) {\n    if (eobrun > 0) {\n      eobrun--;\n      return;\n    }\n    let k = spectralStart;\n    const e = spectralEnd;\n    while (k <= e) {\n      const rs = decodeHuffman(component.huffmanTableAC);\n      const s = rs & 15,\n        r = rs >> 4;\n      if (s === 0) {\n        if (r < 15) {\n          eobrun = receive(r) + (1 << r) - 1;\n          break;\n        }\n        k += 16;\n        continue;\n      }\n      k += r;\n      const z = dctZigZag[k];\n      component.blockData[blockOffset + z] =\n        receiveAndExtend(s) * (1 << successive);\n      k++;\n    }\n  }\n\n  let successiveACState = 0,\n    successiveACNextValue;\n  function decodeACSuccessive(component, blockOffset) {\n    let k = spectralStart;\n    const e = spectralEnd;\n    let r = 0;\n    let s;\n    let rs;\n    while (k <= e) {\n      const offsetZ = blockOffset + dctZigZag[k];\n      const sign = component.blockData[offsetZ] < 0 ? -1 : 1;\n      switch (successiveACState) {\n        case 0: // initial state\n          rs = decodeHuffman(component.huffmanTableAC);\n          s = rs & 15;\n          r = rs >> 4;\n          if (s === 0) {\n            if (r < 15) {\n              eobrun = receive(r) + (1 << r);\n              successiveACState = 4;\n            } else {\n              r = 16;\n              successiveACState = 1;\n            }\n          } else {\n            if (s !== 1) {\n              throw new JpegError(\"invalid ACn encoding\");\n            }\n            successiveACNextValue = receiveAndExtend(s);\n            successiveACState = r ? 2 : 3;\n          }\n          continue;\n        case 1: // skipping r zero items\n        case 2:\n          if (component.blockData[offsetZ]) {\n            component.blockData[offsetZ] += sign * (readBit() << successive);\n          } else {\n            r--;\n            if (r === 0) {\n              successiveACState = successiveACState === 2 ? 3 : 0;\n            }\n          }\n          break;\n        case 3: // set value for a zero item\n          if (component.blockData[offsetZ]) {\n            component.blockData[offsetZ] += sign * (readBit() << successive);\n          } else {\n            component.blockData[offsetZ] = successiveACNextValue << successive;\n            successiveACState = 0;\n          }\n          break;\n        case 4: // eob\n          if (component.blockData[offsetZ]) {\n            component.blockData[offsetZ] += sign * (readBit() << successive);\n          }\n          break;\n      }\n      k++;\n    }\n    if (successiveACState === 4) {\n      eobrun--;\n      if (eobrun === 0) {\n        successiveACState = 0;\n      }\n    }\n  }\n\n  let blockRow = 0;\n  function decodeMcu(component, decode, mcu, row, col) {\n    const mcuRow = (mcu / mcusPerLine) | 0;\n    const mcuCol = mcu % mcusPerLine;\n    blockRow = mcuRow * component.v + row;\n    const blockCol = mcuCol * component.h + col;\n    const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n    decode(component, blockOffset);\n  }\n\n  function decodeBlock(component, decode, mcu) {\n    blockRow = (mcu / component.blocksPerLine) | 0;\n    const blockCol = mcu % component.blocksPerLine;\n    const blockOffset = getBlockBufferOffset(component, blockRow, blockCol);\n    decode(component, blockOffset);\n  }\n\n  const componentsLength = components.length;\n  let component, i, j, k, n;\n  let decodeFn;\n  if (progressive) {\n    if (spectralStart === 0) {\n      decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n    } else {\n      decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    }\n  } else {\n    decodeFn = decodeBaseline;\n  }\n\n  let mcu = 0,\n    fileMarker;\n  let mcuExpected;\n  if (componentsLength === 1) {\n    mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n  } else {\n    mcuExpected = mcusPerLine * frame.mcusPerColumn;\n  }\n\n  let h, v;\n  while (mcu <= mcuExpected) {\n    // reset interval stuff\n    const mcuToRead = resetInterval\n      ? Math.min(mcuExpected - mcu, resetInterval)\n      : mcuExpected;\n\n    // The `mcuToRead === 0` case should only occur when all of the expected\n    // MCU data has been already parsed, i.e. when `mcu === mcuExpected`, but\n    // some corrupt JPEG images contain more data than intended and we thus\n    // want to skip over any extra RSTx markers below (fixes issue11794.pdf).\n    if (mcuToRead > 0) {\n      for (i = 0; i < componentsLength; i++) {\n        components[i].pred = 0;\n      }\n      eobrun = 0;\n\n      if (componentsLength === 1) {\n        component = components[0];\n        for (n = 0; n < mcuToRead; n++) {\n          decodeBlock(component, decodeFn, mcu);\n          mcu++;\n        }\n      } else {\n        for (n = 0; n < mcuToRead; n++) {\n          for (i = 0; i < componentsLength; i++) {\n            component = components[i];\n            h = component.h;\n            v = component.v;\n            for (j = 0; j < v; j++) {\n              for (k = 0; k < h; k++) {\n                decodeMcu(component, decodeFn, mcu, j, k);\n              }\n            }\n          }\n          mcu++;\n        }\n      }\n    }\n\n    // find marker\n    bitsCount = 0;\n    fileMarker = findNextFileMarker(data, offset);\n    if (!fileMarker) {\n      break; // Reached the end of the image data without finding any marker.\n    }\n    if (fileMarker.invalid) {\n      // Some bad images seem to pad Scan blocks with e.g. zero bytes, skip\n      // past those to attempt to find a valid marker (fixes issue4090.pdf).\n      const partialMsg = mcuToRead > 0 ? \"unexpected\" : \"excessive\";\n      warn(\n        `decodeScan - ${partialMsg} MCU data, current marker is: ${fileMarker.invalid}`\n      );\n      offset = fileMarker.offset;\n    }\n    if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {\n      // RSTx\n      offset += 2;\n    } else {\n      break;\n    }\n  }\n\n  return offset - startOffset;\n}\n\n// A port of poppler's IDCT method which in turn is taken from:\n//   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,\n//   'Practical Fast 1-D DCT Algorithms with 11 Multiplications',\n//   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,\n//   988-991.\nfunction quantizeAndInverse(component, blockBufferOffset, p) {\n  const qt = component.quantizationTable,\n    blockData = component.blockData;\n  let v0, v1, v2, v3, v4, v5, v6, v7;\n  let p0, p1, p2, p3, p4, p5, p6, p7;\n  let t;\n\n  if (!qt) {\n    throw new JpegError(\"missing required Quantization Table.\");\n  }\n\n  // inverse DCT on rows\n  for (let row = 0; row < 64; row += 8) {\n    // gather block data\n    p0 = blockData[blockBufferOffset + row];\n    p1 = blockData[blockBufferOffset + row + 1];\n    p2 = blockData[blockBufferOffset + row + 2];\n    p3 = blockData[blockBufferOffset + row + 3];\n    p4 = blockData[blockBufferOffset + row + 4];\n    p5 = blockData[blockBufferOffset + row + 5];\n    p6 = blockData[blockBufferOffset + row + 6];\n    p7 = blockData[blockBufferOffset + row + 7];\n\n    // dequant p0\n    p0 *= qt[row];\n\n    // check for all-zero AC coefficients\n    if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n      t = (dctSqrt2 * p0 + 512) >> 10;\n      p[row] = t;\n      p[row + 1] = t;\n      p[row + 2] = t;\n      p[row + 3] = t;\n      p[row + 4] = t;\n      p[row + 5] = t;\n      p[row + 6] = t;\n      p[row + 7] = t;\n      continue;\n    }\n    // dequant p1 ... p7\n    p1 *= qt[row + 1];\n    p2 *= qt[row + 2];\n    p3 *= qt[row + 3];\n    p4 *= qt[row + 4];\n    p5 *= qt[row + 5];\n    p6 *= qt[row + 6];\n    p7 *= qt[row + 7];\n\n    // stage 4\n    v0 = (dctSqrt2 * p0 + 128) >> 8;\n    v1 = (dctSqrt2 * p4 + 128) >> 8;\n    v2 = p2;\n    v3 = p6;\n    v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;\n    v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;\n    v5 = p3 << 4;\n    v6 = p5 << 4;\n\n    // stage 3\n    v0 = (v0 + v1 + 1) >> 1;\n    v1 = v0 - v1;\n    t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n    v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n    v3 = t;\n    v4 = (v4 + v6 + 1) >> 1;\n    v6 = v4 - v6;\n    v7 = (v7 + v5 + 1) >> 1;\n    v5 = v7 - v5;\n\n    // stage 2\n    v0 = (v0 + v3 + 1) >> 1;\n    v3 = v0 - v3;\n    v1 = (v1 + v2 + 1) >> 1;\n    v2 = v1 - v2;\n    t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n    v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n    v7 = t;\n    t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n    v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n    v6 = t;\n\n    // stage 1\n    p[row] = v0 + v7;\n    p[row + 7] = v0 - v7;\n    p[row + 1] = v1 + v6;\n    p[row + 6] = v1 - v6;\n    p[row + 2] = v2 + v5;\n    p[row + 5] = v2 - v5;\n    p[row + 3] = v3 + v4;\n    p[row + 4] = v3 - v4;\n  }\n\n  // inverse DCT on columns\n  for (let col = 0; col < 8; ++col) {\n    p0 = p[col];\n    p1 = p[col + 8];\n    p2 = p[col + 16];\n    p3 = p[col + 24];\n    p4 = p[col + 32];\n    p5 = p[col + 40];\n    p6 = p[col + 48];\n    p7 = p[col + 56];\n\n    // check for all-zero AC coefficients\n    if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n      t = (dctSqrt2 * p0 + 8192) >> 14;\n      // Convert to 8-bit.\n      if (t < -2040) {\n        t = 0;\n      } else if (t >= 2024) {\n        t = 255;\n      } else {\n        t = (t + 2056) >> 4;\n      }\n      blockData[blockBufferOffset + col] = t;\n      blockData[blockBufferOffset + col + 8] = t;\n      blockData[blockBufferOffset + col + 16] = t;\n      blockData[blockBufferOffset + col + 24] = t;\n      blockData[blockBufferOffset + col + 32] = t;\n      blockData[blockBufferOffset + col + 40] = t;\n      blockData[blockBufferOffset + col + 48] = t;\n      blockData[blockBufferOffset + col + 56] = t;\n      continue;\n    }\n\n    // stage 4\n    v0 = (dctSqrt2 * p0 + 2048) >> 12;\n    v1 = (dctSqrt2 * p4 + 2048) >> 12;\n    v2 = p2;\n    v3 = p6;\n    v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;\n    v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;\n    v5 = p3;\n    v6 = p5;\n\n    // stage 3\n    // Shift v0 by 128.5 << 5 here, so we don't need to shift p0...p7 when\n    // converting to UInt8 range later.\n    v0 = ((v0 + v1 + 1) >> 1) + 4112;\n    v1 = v0 - v1;\n    t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n    v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n    v3 = t;\n    v4 = (v4 + v6 + 1) >> 1;\n    v6 = v4 - v6;\n    v7 = (v7 + v5 + 1) >> 1;\n    v5 = v7 - v5;\n\n    // stage 2\n    v0 = (v0 + v3 + 1) >> 1;\n    v3 = v0 - v3;\n    v1 = (v1 + v2 + 1) >> 1;\n    v2 = v1 - v2;\n    t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n    v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n    v7 = t;\n    t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n    v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n    v6 = t;\n\n    // stage 1\n    p0 = v0 + v7;\n    p7 = v0 - v7;\n    p1 = v1 + v6;\n    p6 = v1 - v6;\n    p2 = v2 + v5;\n    p5 = v2 - v5;\n    p3 = v3 + v4;\n    p4 = v3 - v4;\n\n    // Convert to 8-bit integers.\n    if (p0 < 16) {\n      p0 = 0;\n    } else if (p0 >= 4080) {\n      p0 = 255;\n    } else {\n      p0 >>= 4;\n    }\n    if (p1 < 16) {\n      p1 = 0;\n    } else if (p1 >= 4080) {\n      p1 = 255;\n    } else {\n      p1 >>= 4;\n    }\n    if (p2 < 16) {\n      p2 = 0;\n    } else if (p2 >= 4080) {\n      p2 = 255;\n    } else {\n      p2 >>= 4;\n    }\n    if (p3 < 16) {\n      p3 = 0;\n    } else if (p3 >= 4080) {\n      p3 = 255;\n    } else {\n      p3 >>= 4;\n    }\n    if (p4 < 16) {\n      p4 = 0;\n    } else if (p4 >= 4080) {\n      p4 = 255;\n    } else {\n      p4 >>= 4;\n    }\n    if (p5 < 16) {\n      p5 = 0;\n    } else if (p5 >= 4080) {\n      p5 = 255;\n    } else {\n      p5 >>= 4;\n    }\n    if (p6 < 16) {\n      p6 = 0;\n    } else if (p6 >= 4080) {\n      p6 = 255;\n    } else {\n      p6 >>= 4;\n    }\n    if (p7 < 16) {\n      p7 = 0;\n    } else if (p7 >= 4080) {\n      p7 = 255;\n    } else {\n      p7 >>= 4;\n    }\n\n    // store block data\n    blockData[blockBufferOffset + col] = p0;\n    blockData[blockBufferOffset + col + 8] = p1;\n    blockData[blockBufferOffset + col + 16] = p2;\n    blockData[blockBufferOffset + col + 24] = p3;\n    blockData[blockBufferOffset + col + 32] = p4;\n    blockData[blockBufferOffset + col + 40] = p5;\n    blockData[blockBufferOffset + col + 48] = p6;\n    blockData[blockBufferOffset + col + 56] = p7;\n  }\n}\n\nfunction buildComponentData(frame, component) {\n  const blocksPerLine = component.blocksPerLine;\n  const blocksPerColumn = component.blocksPerColumn;\n  const computationBuffer = new Int16Array(64);\n\n  for (let blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n    for (let blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n      const offset = getBlockBufferOffset(component, blockRow, blockCol);\n      quantizeAndInverse(component, offset, computationBuffer);\n    }\n  }\n  return component.blockData;\n}\n\nfunction findNextFileMarker(data, currentPos, startPos = currentPos) {\n  const maxPos = data.length - 1;\n  let newPos = startPos < currentPos ? startPos : currentPos;\n\n  if (currentPos >= maxPos) {\n    return null; // Don't attempt to read non-existent data and just return.\n  }\n  const currentMarker = readUint16(data, currentPos);\n  if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {\n    return {\n      invalid: null,\n      marker: currentMarker,\n      offset: currentPos,\n    };\n  }\n  let newMarker = readUint16(data, newPos);\n  while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {\n    if (++newPos >= maxPos) {\n      return null; // Don't attempt to read non-existent data and just return.\n    }\n    newMarker = readUint16(data, newPos);\n  }\n  return {\n    invalid: currentMarker.toString(16),\n    marker: newMarker,\n    offset: newPos,\n  };\n}\n\nclass JpegImage {\n  constructor({ decodeTransform = null, colorTransform = -1 } = {}) {\n    this._decodeTransform = decodeTransform;\n    this._colorTransform = colorTransform;\n  }\n\n  parse(data, { dnlScanLines = null } = {}) {\n    function readDataBlock() {\n      const length = readUint16(data, offset);\n      offset += 2;\n      let endOffset = offset + length - 2;\n\n      const fileMarker = findNextFileMarker(data, endOffset, offset);\n      if (fileMarker && fileMarker.invalid) {\n        warn(\n          \"readDataBlock - incorrect length, current marker is: \" +\n            fileMarker.invalid\n        );\n        endOffset = fileMarker.offset;\n      }\n\n      const array = data.subarray(offset, endOffset);\n      offset += array.length;\n      return array;\n    }\n\n    function prepareComponents(frame) {\n      const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n      const mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n      for (let i = 0, ii = frame.components.length; i < ii; i++) {\n        const component = frame.components[i];\n        const blocksPerLine = Math.ceil(\n          (Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH\n        );\n        const blocksPerColumn = Math.ceil(\n          (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV\n        );\n        const blocksPerLineForMcu = mcusPerLine * component.h;\n        const blocksPerColumnForMcu = mcusPerColumn * component.v;\n\n        const blocksBufferSize =\n          64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n        component.blockData = new Int16Array(blocksBufferSize);\n        component.blocksPerLine = blocksPerLine;\n        component.blocksPerColumn = blocksPerColumn;\n      }\n      frame.mcusPerLine = mcusPerLine;\n      frame.mcusPerColumn = mcusPerColumn;\n    }\n\n    let offset = 0;\n    let jfif = null;\n    let adobe = null;\n    let frame, resetInterval;\n    let numSOSMarkers = 0;\n    const quantizationTables = [];\n    const huffmanTablesAC = [],\n      huffmanTablesDC = [];\n\n    let fileMarker = readUint16(data, offset);\n    offset += 2;\n    if (fileMarker !== /* SOI (Start of Image) = */ 0xffd8) {\n      throw new JpegError(\"SOI not found\");\n    }\n    fileMarker = readUint16(data, offset);\n    offset += 2;\n\n    markerLoop: while (fileMarker !== /* EOI (End of Image) = */ 0xffd9) {\n      let i, j, l;\n      switch (fileMarker) {\n        case 0xffe0: // APP0 (Application Specific)\n        case 0xffe1: // APP1\n        case 0xffe2: // APP2\n        case 0xffe3: // APP3\n        case 0xffe4: // APP4\n        case 0xffe5: // APP5\n        case 0xffe6: // APP6\n        case 0xffe7: // APP7\n        case 0xffe8: // APP8\n        case 0xffe9: // APP9\n        case 0xffea: // APP10\n        case 0xffeb: // APP11\n        case 0xffec: // APP12\n        case 0xffed: // APP13\n        case 0xffee: // APP14\n        case 0xffef: // APP15\n        case 0xfffe: // COM (Comment)\n          const appData = readDataBlock();\n\n          if (fileMarker === 0xffe0) {\n            // 'JFIF\\x00'\n            if (\n              appData[0] === 0x4a &&\n              appData[1] === 0x46 &&\n              appData[2] === 0x49 &&\n              appData[3] === 0x46 &&\n              appData[4] === 0\n            ) {\n              jfif = {\n                version: { major: appData[5], minor: appData[6] },\n                densityUnits: appData[7],\n                xDensity: (appData[8] << 8) | appData[9],\n                yDensity: (appData[10] << 8) | appData[11],\n                thumbWidth: appData[12],\n                thumbHeight: appData[13],\n                thumbData: appData.subarray(\n                  14,\n                  14 + 3 * appData[12] * appData[13]\n                ),\n              };\n            }\n          }\n          // TODO APP1 - Exif\n          if (fileMarker === 0xffee) {\n            // 'Adobe'\n            if (\n              appData[0] === 0x41 &&\n              appData[1] === 0x64 &&\n              appData[2] === 0x6f &&\n              appData[3] === 0x62 &&\n              appData[4] === 0x65\n            ) {\n              adobe = {\n                version: (appData[5] << 8) | appData[6],\n                flags0: (appData[7] << 8) | appData[8],\n                flags1: (appData[9] << 8) | appData[10],\n                transformCode: appData[11],\n              };\n            }\n          }\n          break;\n\n        case 0xffdb: // DQT (Define Quantization Tables)\n          const quantizationTablesLength = readUint16(data, offset);\n          offset += 2;\n          const quantizationTablesEnd = quantizationTablesLength + offset - 2;\n          let z;\n          while (offset < quantizationTablesEnd) {\n            const quantizationTableSpec = data[offset++];\n            const tableData = new Uint16Array(64);\n            if (quantizationTableSpec >> 4 === 0) {\n              // 8 bit values\n              for (j = 0; j < 64; j++) {\n                z = dctZigZag[j];\n                tableData[z] = data[offset++];\n              }\n            } else if (quantizationTableSpec >> 4 === 1) {\n              // 16 bit values\n              for (j = 0; j < 64; j++) {\n                z = dctZigZag[j];\n                tableData[z] = readUint16(data, offset);\n                offset += 2;\n              }\n            } else {\n              throw new JpegError(\"DQT - invalid table spec\");\n            }\n            quantizationTables[quantizationTableSpec & 15] = tableData;\n          }\n          break;\n\n        case 0xffc0: // SOF0 (Start of Frame, Baseline DCT)\n        case 0xffc1: // SOF1 (Start of Frame, Extended DCT)\n        case 0xffc2: // SOF2 (Start of Frame, Progressive DCT)\n          if (frame) {\n            throw new JpegError(\"Only single frame JPEGs supported\");\n          }\n          offset += 2; // Skip marker length.\n\n          frame = {};\n          frame.extended = fileMarker === 0xffc1;\n          frame.progressive = fileMarker === 0xffc2;\n          frame.precision = data[offset++];\n          const sofScanLines = readUint16(data, offset);\n          offset += 2;\n          frame.scanLines = dnlScanLines || sofScanLines;\n          frame.samplesPerLine = readUint16(data, offset);\n          offset += 2;\n          frame.components = [];\n          frame.componentIds = {};\n          const componentsCount = data[offset++];\n          let maxH = 0,\n            maxV = 0;\n          for (i = 0; i < componentsCount; i++) {\n            const componentId = data[offset];\n            const h = data[offset + 1] >> 4;\n            const v = data[offset + 1] & 15;\n            if (maxH < h) {\n              maxH = h;\n            }\n            if (maxV < v) {\n              maxV = v;\n            }\n            const qId = data[offset + 2];\n            l = frame.components.push({\n              h,\n              v,\n              quantizationId: qId,\n              quantizationTable: null, // See comment below.\n            });\n            frame.componentIds[componentId] = l - 1;\n            offset += 3;\n          }\n          frame.maxH = maxH;\n          frame.maxV = maxV;\n          prepareComponents(frame);\n          break;\n\n        case 0xffc4: // DHT (Define Huffman Tables)\n          const huffmanLength = readUint16(data, offset);\n          offset += 2;\n          for (i = 2; i < huffmanLength; ) {\n            const huffmanTableSpec = data[offset++];\n            const codeLengths = new Uint8Array(16);\n            let codeLengthSum = 0;\n            for (j = 0; j < 16; j++, offset++) {\n              codeLengthSum += codeLengths[j] = data[offset];\n            }\n            const huffmanValues = new Uint8Array(codeLengthSum);\n            for (j = 0; j < codeLengthSum; j++, offset++) {\n              huffmanValues[j] = data[offset];\n            }\n            i += 17 + codeLengthSum;\n\n            (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[\n              huffmanTableSpec & 15\n            ] = buildHuffmanTable(codeLengths, huffmanValues);\n          }\n          break;\n\n        case 0xffdd: // DRI (Define Restart Interval)\n          offset += 2; // Skip marker length.\n\n          resetInterval = readUint16(data, offset);\n          offset += 2;\n          break;\n\n        case 0xffda: // SOS (Start of Scan)\n          // A DNL marker (0xFFDC), if it exists, is only allowed at the end\n          // of the first scan segment and may only occur once in an image.\n          // Furthermore, to prevent an infinite loop, do *not* attempt to\n          // parse DNL markers during re-parsing of the JPEG scan data.\n          const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;\n\n          offset += 2; // Skip marker length.\n\n          const selectorsCount = data[offset++],\n            components = [];\n          for (i = 0; i < selectorsCount; i++) {\n            const index = data[offset++];\n            const componentIndex = frame.componentIds[index];\n            const component = frame.components[componentIndex];\n            component.index = index;\n            const tableSpec = data[offset++];\n            component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n            component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n            components.push(component);\n          }\n          const spectralStart = data[offset++],\n            spectralEnd = data[offset++],\n            successiveApproximation = data[offset++];\n          try {\n            const processed = decodeScan(\n              data,\n              offset,\n              frame,\n              components,\n              resetInterval,\n              spectralStart,\n              spectralEnd,\n              successiveApproximation >> 4,\n              successiveApproximation & 15,\n              parseDNLMarker\n            );\n            offset += processed;\n          } catch (ex) {\n            if (ex instanceof DNLMarkerError) {\n              warn(`${ex.message} -- attempting to re-parse the JPEG image.`);\n              return this.parse(data, { dnlScanLines: ex.scanLines });\n            } else if (ex instanceof EOIMarkerError) {\n              warn(`${ex.message} -- ignoring the rest of the image data.`);\n              break markerLoop;\n            }\n            throw ex;\n          }\n          break;\n\n        case 0xffdc: // DNL (Define Number of Lines)\n          // Ignore the marker, since it's being handled in `decodeScan`.\n          offset += 4;\n          break;\n\n        case 0xffff: // Fill bytes\n          if (data[offset] !== 0xff) {\n            // Avoid skipping a valid marker.\n            offset--;\n          }\n          break;\n\n        default:\n          // Could be incorrect encoding -- the last 0xFF byte of the previous\n          // block could have been eaten by the encoder, hence we fallback to\n          // `startPos = offset - 3` when looking for the next valid marker.\n          const nextFileMarker = findNextFileMarker(\n            data,\n            /* currentPos = */ offset - 2,\n            /* startPos = */ offset - 3\n          );\n          if (nextFileMarker && nextFileMarker.invalid) {\n            warn(\n              \"JpegImage.parse - unexpected data, current marker is: \" +\n                nextFileMarker.invalid\n            );\n            offset = nextFileMarker.offset;\n            break;\n          }\n          if (!nextFileMarker || offset >= data.length - 1) {\n            warn(\n              \"JpegImage.parse - reached the end of the image data \" +\n                \"without finding an EOI marker (0xFFD9).\"\n            );\n            break markerLoop;\n          }\n          throw new JpegError(\n            \"JpegImage.parse - unknown marker: \" + fileMarker.toString(16)\n          );\n      }\n      fileMarker = readUint16(data, offset);\n      offset += 2;\n    }\n\n    this.width = frame.samplesPerLine;\n    this.height = frame.scanLines;\n    this.jfif = jfif;\n    this.adobe = adobe;\n    this.components = [];\n    for (let i = 0, ii = frame.components.length; i < ii; i++) {\n      const component = frame.components[i];\n\n      // Prevent errors when DQT markers are placed after SOF{n} markers,\n      // by assigning the `quantizationTable` entry after the entire image\n      // has been parsed (fixes issue7406.pdf).\n      const quantizationTable = quantizationTables[component.quantizationId];\n      if (quantizationTable) {\n        component.quantizationTable = quantizationTable;\n      }\n\n      this.components.push({\n        index: component.index,\n        output: buildComponentData(frame, component),\n        scaleX: component.h / frame.maxH,\n        scaleY: component.v / frame.maxV,\n        blocksPerLine: component.blocksPerLine,\n        blocksPerColumn: component.blocksPerColumn,\n      });\n    }\n    this.numComponents = this.components.length;\n    return undefined;\n  }\n\n  _getLinearizedBlockData(width, height, isSourcePDF = false) {\n    const scaleX = this.width / width,\n      scaleY = this.height / height;\n\n    let component, componentScaleX, componentScaleY, blocksPerScanline;\n    let x, y, i, j, k;\n    let index;\n    let offset = 0;\n    let output;\n    const numComponents = this.components.length;\n    const dataLength = width * height * numComponents;\n    const data = new Uint8ClampedArray(dataLength);\n    const xScaleBlockOffset = new Uint32Array(width);\n    const mask3LSB = 0xfffffff8; // used to clear the 3 LSBs\n    let lastComponentScaleX;\n\n    for (i = 0; i < numComponents; i++) {\n      component = this.components[i];\n      componentScaleX = component.scaleX * scaleX;\n      componentScaleY = component.scaleY * scaleY;\n      offset = i;\n      output = component.output;\n      blocksPerScanline = (component.blocksPerLine + 1) << 3;\n      // Precalculate the `xScaleBlockOffset`. Since it doesn't depend on the\n      // component data, that's only necessary when `componentScaleX` changes.\n      if (componentScaleX !== lastComponentScaleX) {\n        for (x = 0; x < width; x++) {\n          j = 0 | (x * componentScaleX);\n          xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);\n        }\n        lastComponentScaleX = componentScaleX;\n      }\n      // linearize the blocks of the component\n      for (y = 0; y < height; y++) {\n        j = 0 | (y * componentScaleY);\n        index = (blocksPerScanline * (j & mask3LSB)) | ((j & 7) << 3);\n        for (x = 0; x < width; x++) {\n          data[offset] = output[index + xScaleBlockOffset[x]];\n          offset += numComponents;\n        }\n      }\n    }\n\n    // decodeTransform contains pairs of multiplier (-256..256) and additive\n    let transform = this._decodeTransform;\n\n    // In PDF files, JPEG images with CMYK colour spaces are usually inverted\n    // (this can be observed by extracting the raw image data).\n    // Since the conversion algorithms (see below) were written primarily for\n    // the PDF use-cases, attempting to use `JpegImage` to parse standalone\n    // JPEG (CMYK) images may thus result in inverted images (see issue 9513).\n    //\n    // Unfortunately it's not (always) possible to tell, from the image data\n    // alone, if it needs to be inverted. Thus in an attempt to provide better\n    // out-of-box behaviour when `JpegImage` is used standalone, default to\n    // inverting JPEG (CMYK) images if and only if the image data does *not*\n    // come from a PDF file and no `decodeTransform` was passed by the user.\n    if (!isSourcePDF && numComponents === 4 && !transform) {\n      transform = new Int32Array([-256, 255, -256, 255, -256, 255, -256, 255]);\n    }\n\n    if (transform) {\n      for (i = 0; i < dataLength; ) {\n        for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n          data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];\n        }\n      }\n    }\n    return data;\n  }\n\n  get _isColorConversionNeeded() {\n    if (this.adobe) {\n      // The adobe transform marker overrides any previous setting.\n      return !!this.adobe.transformCode;\n    }\n    if (this.numComponents === 3) {\n      if (this._colorTransform === 0) {\n        // If the Adobe transform marker is not present and the image\n        // dictionary has a 'ColorTransform' entry, explicitly set to `0`,\n        // then the colours should *not* be transformed.\n        return false;\n      } else if (\n        this.components[0].index === /* \"R\" = */ 0x52 &&\n        this.components[1].index === /* \"G\" = */ 0x47 &&\n        this.components[2].index === /* \"B\" = */ 0x42\n      ) {\n        // If the three components are indexed as RGB in ASCII\n        // then the colours should *not* be transformed.\n        return false;\n      }\n      return true;\n    }\n    // `this.numComponents !== 3`\n    if (this._colorTransform === 1) {\n      // If the Adobe transform marker is not present and the image\n      // dictionary has a 'ColorTransform' entry, explicitly set to `1`,\n      // then the colours should be transformed.\n      return true;\n    }\n    return false;\n  }\n\n  _convertYccToRgb(data) {\n    let Y, Cb, Cr;\n    for (let i = 0, length = data.length; i < length; i += 3) {\n      Y = data[i];\n      Cb = data[i + 1];\n      Cr = data[i + 2];\n      data[i] = Y - 179.456 + 1.402 * Cr;\n      data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;\n      data[i + 2] = Y - 226.816 + 1.772 * Cb;\n    }\n    return data;\n  }\n\n  _convertYcckToRgb(data) {\n    let Y, Cb, Cr, k;\n    let offset = 0;\n    for (let i = 0, length = data.length; i < length; i += 4) {\n      Y = data[i];\n      Cb = data[i + 1];\n      Cr = data[i + 2];\n      k = data[i + 3];\n\n      data[offset++] =\n        -122.67195406894 +\n        Cb *\n          (-6.60635669420364e-5 * Cb +\n            0.000437130475926232 * Cr -\n            5.4080610064599e-5 * Y +\n            0.00048449797120281 * k -\n            0.154362151871126) +\n        Cr *\n          (-0.000957964378445773 * Cr +\n            0.000817076911346625 * Y -\n            0.00477271405408747 * k +\n            1.53380253221734) +\n        Y *\n          (0.000961250184130688 * Y -\n            0.00266257332283933 * k +\n            0.48357088451265) +\n        k * (-0.000336197177618394 * k + 0.484791561490776);\n\n      data[offset++] =\n        107.268039397724 +\n        Cb *\n          (2.19927104525741e-5 * Cb -\n            0.000640992018297945 * Cr +\n            0.000659397001245577 * Y +\n            0.000426105652938837 * k -\n            0.176491792462875) +\n        Cr *\n          (-0.000778269941513683 * Cr +\n            0.00130872261408275 * Y +\n            0.000770482631801132 * k -\n            0.151051492775562) +\n        Y *\n          (0.00126935368114843 * Y -\n            0.00265090189010898 * k +\n            0.25802910206845) +\n        k * (-0.000318913117588328 * k - 0.213742400323665);\n\n      data[offset++] =\n        -20.810012546947 +\n        Cb *\n          (-0.000570115196973677 * Cb -\n            2.63409051004589e-5 * Cr +\n            0.0020741088115012 * Y -\n            0.00288260236853442 * k +\n            0.814272968359295) +\n        Cr *\n          (-1.53496057440975e-5 * Cr -\n            0.000132689043961446 * Y +\n            0.000560833691242812 * k -\n            0.195152027534049) +\n        Y *\n          (0.00174418132927582 * Y -\n            0.00255243321439347 * k +\n            0.116935020465145) +\n        k * (-0.000343531996510555 * k + 0.24165260232407);\n    }\n    // Ensure that only the converted RGB data is returned.\n    return data.subarray(0, offset);\n  }\n\n  _convertYcckToCmyk(data) {\n    let Y, Cb, Cr;\n    for (let i = 0, length = data.length; i < length; i += 4) {\n      Y = data[i];\n      Cb = data[i + 1];\n      Cr = data[i + 2];\n      data[i] = 434.456 - Y - 1.402 * Cr;\n      data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;\n      data[i + 2] = 481.816 - Y - 1.772 * Cb;\n      // K in data[i + 3] is unchanged\n    }\n    return data;\n  }\n\n  _convertCmykToRgb(data) {\n    let c, m, y, k;\n    let offset = 0;\n    for (let i = 0, length = data.length; i < length; i += 4) {\n      c = data[i];\n      m = data[i + 1];\n      y = data[i + 2];\n      k = data[i + 3];\n\n      data[offset++] =\n        255 +\n        c *\n          (-0.00006747147073602441 * c +\n            0.0008379262121013727 * m +\n            0.0002894718188643294 * y +\n            0.003264231057537806 * k -\n            1.1185611867203937) +\n        m *\n          (0.000026374107616089405 * m -\n            0.00008626949158638572 * y -\n            0.0002748769067499491 * k -\n            0.02155688794978967) +\n        y *\n          (-0.00003878099212869363 * y -\n            0.0003267808279485286 * k +\n            0.0686742238595345) -\n        k * (0.0003361971776183937 * k + 0.7430659151342254);\n\n      data[offset++] =\n        255 +\n        c *\n          (0.00013596372813588848 * c +\n            0.000924537132573585 * m +\n            0.00010567359618683593 * y +\n            0.0004791864687436512 * k -\n            0.3109689587515875) +\n        m *\n          (-0.00023545346108370344 * m +\n            0.0002702845253534714 * y +\n            0.0020200308977307156 * k -\n            0.7488052167015494) +\n        y *\n          (0.00006834815998235662 * y +\n            0.00015168452363460973 * k -\n            0.09751927774728933) -\n        k * (0.00031891311758832814 * k + 0.7364883807733168);\n\n      data[offset++] =\n        255 +\n        c *\n          (0.000013598650411385307 * c +\n            0.00012423956175490851 * m +\n            0.0004751985097583589 * y -\n            0.0000036729317476630422 * k -\n            0.05562186980264034) +\n        m *\n          (0.00016141380598724676 * m +\n            0.0009692239130725186 * y +\n            0.0007782692450036253 * k -\n            0.44015232367526463) +\n        y *\n          (5.068882914068769e-7 * y +\n            0.0017778369011375071 * k -\n            0.7591454649749609) -\n        k * (0.0003435319965105553 * k + 0.7063770186160144);\n    }\n    // Ensure that only the converted RGB data is returned.\n    return data.subarray(0, offset);\n  }\n\n  getData({ width, height, forceRGB = false, isSourcePDF = false }) {\n    if (\n      typeof PDFJSDev === \"undefined\" ||\n      PDFJSDev.test(\"!PRODUCTION || TESTING\")\n    ) {\n      assert(\n        isSourcePDF === true,\n        'JpegImage.getData: Unexpected \"isSourcePDF\" value for PDF files.'\n      );\n    }\n    if (this.numComponents > 4) {\n      throw new JpegError(\"Unsupported color mode\");\n    }\n    // Type of data: Uint8ClampedArray(width * height * numComponents)\n    const data = this._getLinearizedBlockData(width, height, isSourcePDF);\n\n    if (this.numComponents === 1 && forceRGB) {\n      const dataLength = data.length;\n      const rgbData = new Uint8ClampedArray(dataLength * 3);\n      let offset = 0;\n      for (let i = 0; i < dataLength; i++) {\n        const grayColor = data[i];\n        rgbData[offset++] = grayColor;\n        rgbData[offset++] = grayColor;\n        rgbData[offset++] = grayColor;\n      }\n      return rgbData;\n    } else if (this.numComponents === 3 && this._isColorConversionNeeded) {\n      return this._convertYccToRgb(data);\n    } else if (this.numComponents === 4) {\n      if (this._isColorConversionNeeded) {\n        if (forceRGB) {\n          return this._convertYcckToRgb(data);\n        }\n        return this._convertYcckToCmyk(data);\n      } else if (forceRGB) {\n        return this._convertCmykToRgb(data);\n      }\n    }\n    return data;\n  }\n}\n\nexport { JpegImage };\n","/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseException, info, unreachable, warn } from \"../shared/util.js\";\nimport { log2, readUint16, readUint32 } from \"./core_utils.js\";\nimport { ArithmeticDecoder } from \"./arithmetic_decoder.js\";\n\nclass JpxError extends BaseException {\n  constructor(msg) {\n    super(`JPX error: ${msg}`);\n  }\n}\n\n// Table E.1\nconst SubbandsGainLog2 = {\n  LL: 0,\n  LH: 1,\n  HL: 1,\n  HH: 2,\n};\n\nclass JpxImage {\n  constructor() {\n    this.failOnCorruptedImage = false;\n  }\n\n  parse(data) {\n    const head = readUint16(data, 0);\n    // No box header, immediate start of codestream (SOC)\n    if (head === 0xff4f) {\n      this.parseCodestream(data, 0, data.length);\n      return;\n    }\n\n    const length = data.length;\n    let position = 0;\n    while (position < length) {\n      let headerSize = 8;\n      let lbox = readUint32(data, position);\n      const tbox = readUint32(data, position + 4);\n      position += headerSize;\n      if (lbox === 1) {\n        // XLBox: read UInt64 according to spec.\n        // JavaScript's int precision of 53 bit should be sufficient here.\n        lbox =\n          readUint32(data, position) * 4294967296 +\n          readUint32(data, position + 4);\n        position += 8;\n        headerSize += 8;\n      }\n      if (lbox === 0) {\n        lbox = length - position + headerSize;\n      }\n      if (lbox < headerSize) {\n        throw new JpxError(\"Invalid box field size\");\n      }\n      const dataLength = lbox - headerSize;\n      let jumpDataLength = true;\n      switch (tbox) {\n        case 0x6a703268: // 'jp2h'\n          jumpDataLength = false; // parsing child boxes\n          break;\n        case 0x636f6c72: // 'colr'\n          // Colorspaces are not used, the CS from the PDF is used.\n          const method = data[position];\n          if (method === 1) {\n            // enumerated colorspace\n            const colorspace = readUint32(data, position + 3);\n            switch (colorspace) {\n              case 16: // this indicates a sRGB colorspace\n              case 17: // this indicates a grayscale colorspace\n              case 18: // this indicates a YUV colorspace\n                break;\n              default:\n                warn(\"Unknown colorspace \" + colorspace);\n                break;\n            }\n          } else if (method === 2) {\n            info(\"ICC profile not supported\");\n          }\n          break;\n        case 0x6a703263: // 'jp2c'\n          this.parseCodestream(data, position, position + dataLength);\n          break;\n        case 0x6a502020: // 'jP\\024\\024'\n          if (readUint32(data, position) !== 0x0d0a870a) {\n            warn(\"Invalid JP2 signature\");\n          }\n          break;\n        // The following header types are valid but currently not used:\n        case 0x6a501a1a: // 'jP\\032\\032'\n        case 0x66747970: // 'ftyp'\n        case 0x72726571: // 'rreq'\n        case 0x72657320: // 'res '\n        case 0x69686472: // 'ihdr'\n          break;\n        default:\n          const headerType = String.fromCharCode(\n            (tbox >> 24) & 0xff,\n            (tbox >> 16) & 0xff,\n            (tbox >> 8) & 0xff,\n            tbox & 0xff\n          );\n          warn(`Unsupported header type ${tbox} (${headerType}).`);\n          break;\n      }\n      if (jumpDataLength) {\n        position += dataLength;\n      }\n    }\n  }\n\n  parseImageProperties(stream) {\n    let newByte = stream.getByte();\n    while (newByte >= 0) {\n      const oldByte = newByte;\n      newByte = stream.getByte();\n      const code = (oldByte << 8) | newByte;\n      // Image and tile size (SIZ)\n      if (code === 0xff51) {\n        stream.skip(4);\n        const Xsiz = stream.getInt32() >>> 0; // Byte 4\n        const Ysiz = stream.getInt32() >>> 0; // Byte 8\n        const XOsiz = stream.getInt32() >>> 0; // Byte 12\n        const YOsiz = stream.getInt32() >>> 0; // Byte 16\n        stream.skip(16);\n        const Csiz = stream.getUint16(); // Byte 36\n        this.width = Xsiz - XOsiz;\n        this.height = Ysiz - YOsiz;\n        this.componentsCount = Csiz;\n        // Results are always returned as `Uint8ClampedArray`s.\n        this.bitsPerComponent = 8;\n        return;\n      }\n    }\n    throw new JpxError(\"No size marker found in JPX stream\");\n  }\n\n  parseCodestream(data, start, end) {\n    const context = {};\n    let doNotRecover = false;\n    try {\n      let position = start;\n      while (position + 1 < end) {\n        const code = readUint16(data, position);\n        position += 2;\n\n        let length = 0,\n          j,\n          sqcd,\n          spqcds,\n          spqcdSize,\n          scalarExpounded,\n          tile;\n        switch (code) {\n          case 0xff4f: // Start of codestream (SOC)\n            context.mainHeader = true;\n            break;\n          case 0xffd9: // End of codestream (EOC)\n            break;\n          case 0xff51: // Image and tile size (SIZ)\n            length = readUint16(data, position);\n            const siz = {};\n            siz.Xsiz = readUint32(data, position + 4);\n            siz.Ysiz = readUint32(data, position + 8);\n            siz.XOsiz = readUint32(data, position + 12);\n            siz.YOsiz = readUint32(data, position + 16);\n            siz.XTsiz = readUint32(data, position + 20);\n            siz.YTsiz = readUint32(data, position + 24);\n            siz.XTOsiz = readUint32(data, position + 28);\n            siz.YTOsiz = readUint32(data, position + 32);\n            const componentsCount = readUint16(data, position + 36);\n            siz.Csiz = componentsCount;\n            const components = [];\n            j = position + 38;\n            for (let i = 0; i < componentsCount; i++) {\n              const component = {\n                precision: (data[j] & 0x7f) + 1,\n                isSigned: !!(data[j] & 0x80),\n                XRsiz: data[j + 1],\n                YRsiz: data[j + 2],\n              };\n              j += 3;\n              calculateComponentDimensions(component, siz);\n              components.push(component);\n            }\n            context.SIZ = siz;\n            context.components = components;\n            calculateTileGrids(context, components);\n            context.QCC = [];\n            context.COC = [];\n            break;\n          case 0xff5c: // Quantization default (QCD)\n            length = readUint16(data, position);\n            const qcd = {};\n            j = position + 2;\n            sqcd = data[j++];\n            switch (sqcd & 0x1f) {\n              case 0:\n                spqcdSize = 8;\n                scalarExpounded = true;\n                break;\n              case 1:\n                spqcdSize = 16;\n                scalarExpounded = false;\n                break;\n              case 2:\n                spqcdSize = 16;\n                scalarExpounded = true;\n                break;\n              default:\n                throw new Error(\"Invalid SQcd value \" + sqcd);\n            }\n            qcd.noQuantization = spqcdSize === 8;\n            qcd.scalarExpounded = scalarExpounded;\n            qcd.guardBits = sqcd >> 5;\n            spqcds = [];\n            while (j < length + position) {\n              const spqcd = {};\n              if (spqcdSize === 8) {\n                spqcd.epsilon = data[j++] >> 3;\n                spqcd.mu = 0;\n              } else {\n                spqcd.epsilon = data[j] >> 3;\n                spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                j += 2;\n              }\n              spqcds.push(spqcd);\n            }\n            qcd.SPqcds = spqcds;\n            if (context.mainHeader) {\n              context.QCD = qcd;\n            } else {\n              context.currentTile.QCD = qcd;\n              context.currentTile.QCC = [];\n            }\n            break;\n          case 0xff5d: // Quantization component (QCC)\n            length = readUint16(data, position);\n            const qcc = {};\n            j = position + 2;\n            let cqcc;\n            if (context.SIZ.Csiz < 257) {\n              cqcc = data[j++];\n            } else {\n              cqcc = readUint16(data, j);\n              j += 2;\n            }\n            sqcd = data[j++];\n            switch (sqcd & 0x1f) {\n              case 0:\n                spqcdSize = 8;\n                scalarExpounded = true;\n                break;\n              case 1:\n                spqcdSize = 16;\n                scalarExpounded = false;\n                break;\n              case 2:\n                spqcdSize = 16;\n                scalarExpounded = true;\n                break;\n              default:\n                throw new Error(\"Invalid SQcd value \" + sqcd);\n            }\n            qcc.noQuantization = spqcdSize === 8;\n            qcc.scalarExpounded = scalarExpounded;\n            qcc.guardBits = sqcd >> 5;\n            spqcds = [];\n            while (j < length + position) {\n              const spqcd = {};\n              if (spqcdSize === 8) {\n                spqcd.epsilon = data[j++] >> 3;\n                spqcd.mu = 0;\n              } else {\n                spqcd.epsilon = data[j] >> 3;\n                spqcd.mu = ((data[j] & 0x7) << 8) | data[j + 1];\n                j += 2;\n              }\n              spqcds.push(spqcd);\n            }\n            qcc.SPqcds = spqcds;\n            if (context.mainHeader) {\n              context.QCC[cqcc] = qcc;\n            } else {\n              context.currentTile.QCC[cqcc] = qcc;\n            }\n            break;\n          case 0xff52: // Coding style default (COD)\n            length = readUint16(data, position);\n            const cod = {};\n            j = position + 2;\n            const scod = data[j++];\n            cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n            cod.sopMarkerUsed = !!(scod & 2);\n            cod.ephMarkerUsed = !!(scod & 4);\n            cod.progressionOrder = data[j++];\n            cod.layersCount = readUint16(data, j);\n            j += 2;\n            cod.multipleComponentTransform = data[j++];\n\n            cod.decompositionLevelsCount = data[j++];\n            cod.xcb = (data[j++] & 0xf) + 2;\n            cod.ycb = (data[j++] & 0xf) + 2;\n            const blockStyle = data[j++];\n            cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n            cod.resetContextProbabilities = !!(blockStyle & 2);\n            cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n            cod.verticallyStripe = !!(blockStyle & 8);\n            cod.predictableTermination = !!(blockStyle & 16);\n            cod.segmentationSymbolUsed = !!(blockStyle & 32);\n            cod.reversibleTransformation = data[j++];\n            if (cod.entropyCoderWithCustomPrecincts) {\n              const precinctsSizes = [];\n              while (j < length + position) {\n                const precinctsSize = data[j++];\n                precinctsSizes.push({\n                  PPx: precinctsSize & 0xf,\n                  PPy: precinctsSize >> 4,\n                });\n              }\n              cod.precinctsSizes = precinctsSizes;\n            }\n            const unsupported = [];\n            if (cod.selectiveArithmeticCodingBypass) {\n              unsupported.push(\"selectiveArithmeticCodingBypass\");\n            }\n            if (cod.resetContextProbabilities) {\n              unsupported.push(\"resetContextProbabilities\");\n            }\n            if (cod.terminationOnEachCodingPass) {\n              unsupported.push(\"terminationOnEachCodingPass\");\n            }\n            if (cod.verticallyStripe) {\n              unsupported.push(\"verticallyStripe\");\n            }\n            if (cod.predictableTermination) {\n              unsupported.push(\"predictableTermination\");\n            }\n            if (unsupported.length > 0) {\n              doNotRecover = true;\n              warn(`JPX: Unsupported COD options (${unsupported.join(\", \")}).`);\n            }\n            if (context.mainHeader) {\n              context.COD = cod;\n            } else {\n              context.currentTile.COD = cod;\n              context.currentTile.COC = [];\n            }\n            break;\n          case 0xff90: // Start of tile-part (SOT)\n            length = readUint16(data, position);\n            tile = {};\n            tile.index = readUint16(data, position + 2);\n            tile.length = readUint32(data, position + 4);\n            tile.dataEnd = tile.length + position - 2;\n            tile.partIndex = data[position + 8];\n            tile.partsCount = data[position + 9];\n\n            context.mainHeader = false;\n            if (tile.partIndex === 0) {\n              // reset component specific settings\n              tile.COD = context.COD;\n              tile.COC = context.COC.slice(0); // clone of the global COC\n              tile.QCD = context.QCD;\n              tile.QCC = context.QCC.slice(0); // clone of the global COC\n            }\n            context.currentTile = tile;\n            break;\n          case 0xff93: // Start of data (SOD)\n            tile = context.currentTile;\n            if (tile.partIndex === 0) {\n              initializeTile(context, tile.index);\n              buildPackets(context);\n            }\n\n            // moving to the end of the data\n            length = tile.dataEnd - position;\n            parseTilePackets(context, data, position, length);\n            break;\n          case 0xff53: // Coding style component (COC)\n            warn(\"JPX: Codestream code 0xFF53 (COC) is not implemented.\");\n          /* falls through */\n          case 0xff55: // Tile-part lengths, main header (TLM)\n          case 0xff57: // Packet length, main header (PLM)\n          case 0xff58: // Packet length, tile-part header (PLT)\n          case 0xff64: // Comment (COM)\n            length = readUint16(data, position);\n            // skipping content\n            break;\n          default:\n            throw new Error(\"Unknown codestream code: \" + code.toString(16));\n        }\n        position += length;\n      }\n    } catch (e) {\n      if (doNotRecover || this.failOnCorruptedImage) {\n        throw new JpxError(e.message);\n      } else {\n        warn(`JPX: Trying to recover from: \"${e.message}\".`);\n      }\n    }\n    this.tiles = transformComponents(context);\n    this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n    this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n    this.componentsCount = context.SIZ.Csiz;\n  }\n}\n\nfunction calculateComponentDimensions(component, siz) {\n  // Section B.2 Component mapping\n  component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n  component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n  component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n  component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n  component.width = component.x1 - component.x0;\n  component.height = component.y1 - component.y0;\n}\nfunction calculateTileGrids(context, components) {\n  const siz = context.SIZ;\n  // Section B.3 Division into tile and tile-components\n  const tiles = [];\n  let tile;\n  const numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n  const numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n  for (let q = 0; q < numYtiles; q++) {\n    for (let p = 0; p < numXtiles; p++) {\n      tile = {};\n      tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n      tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n      tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n      tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n      tile.width = tile.tx1 - tile.tx0;\n      tile.height = tile.ty1 - tile.ty0;\n      tile.components = [];\n      tiles.push(tile);\n    }\n  }\n  context.tiles = tiles;\n\n  const componentsCount = siz.Csiz;\n  for (let i = 0, ii = componentsCount; i < ii; i++) {\n    const component = components[i];\n    for (let j = 0, jj = tiles.length; j < jj; j++) {\n      const tileComponent = {};\n      tile = tiles[j];\n      tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n      tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n      tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n      tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n      tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n      tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n      tile.components[i] = tileComponent;\n    }\n  }\n}\nfunction getBlocksDimensions(context, component, r) {\n  const codOrCoc = component.codingStyleParameters;\n  const result = {};\n  if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n    result.PPx = 15;\n    result.PPy = 15;\n  } else {\n    result.PPx = codOrCoc.precinctsSizes[r].PPx;\n    result.PPy = codOrCoc.precinctsSizes[r].PPy;\n  }\n  // calculate codeblock size as described in section B.7\n  result.xcb_ =\n    r > 0\n      ? Math.min(codOrCoc.xcb, result.PPx - 1)\n      : Math.min(codOrCoc.xcb, result.PPx);\n  result.ycb_ =\n    r > 0\n      ? Math.min(codOrCoc.ycb, result.PPy - 1)\n      : Math.min(codOrCoc.ycb, result.PPy);\n  return result;\n}\nfunction buildPrecincts(context, resolution, dimensions) {\n  // Section B.6 Division resolution to precincts\n  const precinctWidth = 1 << dimensions.PPx;\n  const precinctHeight = 1 << dimensions.PPy;\n  // Jasper introduces codeblock groups for mapping each subband codeblocks\n  // to precincts. Precinct partition divides a resolution according to width\n  // and height parameters. The subband that belongs to the resolution level\n  // has a different size than the level, unless it is the zero resolution.\n\n  // From Jasper documentation: jpeg2000.pdf, section K: Tier-2 coding:\n  // The precinct partitioning for a particular subband is derived from a\n  // partitioning of its parent LL band (i.e., the LL band at the next higher\n  // resolution level)... The LL band associated with each resolution level is\n  // divided into precincts... Each of the resulting precinct regions is then\n  // mapped into its child subbands (if any) at the next lower resolution\n  // level. This is accomplished by using the coordinate transformation\n  // (u, v) = (ceil(x/2), ceil(y/2)) where (x, y) and (u, v) are the\n  // coordinates of a point in the LL band and child subband, respectively.\n  const isZeroRes = resolution.resLevel === 0;\n  const precinctWidthInSubband = 1 << (dimensions.PPx + (isZeroRes ? 0 : -1));\n  const precinctHeightInSubband = 1 << (dimensions.PPy + (isZeroRes ? 0 : -1));\n  const numprecinctswide =\n    resolution.trx1 > resolution.trx0\n      ? Math.ceil(resolution.trx1 / precinctWidth) -\n        Math.floor(resolution.trx0 / precinctWidth)\n      : 0;\n  const numprecinctshigh =\n    resolution.try1 > resolution.try0\n      ? Math.ceil(resolution.try1 / precinctHeight) -\n        Math.floor(resolution.try0 / precinctHeight)\n      : 0;\n  const numprecincts = numprecinctswide * numprecinctshigh;\n\n  resolution.precinctParameters = {\n    precinctWidth,\n    precinctHeight,\n    numprecinctswide,\n    numprecinctshigh,\n    numprecincts,\n    precinctWidthInSubband,\n    precinctHeightInSubband,\n  };\n}\nfunction buildCodeblocks(context, subband, dimensions) {\n  // Section B.7 Division sub-band into code-blocks\n  const xcb_ = dimensions.xcb_;\n  const ycb_ = dimensions.ycb_;\n  const codeblockWidth = 1 << xcb_;\n  const codeblockHeight = 1 << ycb_;\n  const cbx0 = subband.tbx0 >> xcb_;\n  const cby0 = subband.tby0 >> ycb_;\n  const cbx1 = (subband.tbx1 + codeblockWidth - 1) >> xcb_;\n  const cby1 = (subband.tby1 + codeblockHeight - 1) >> ycb_;\n  const precinctParameters = subband.resolution.precinctParameters;\n  const codeblocks = [];\n  const precincts = [];\n  let i, j, codeblock, precinctNumber;\n  for (j = cby0; j < cby1; j++) {\n    for (i = cbx0; i < cbx1; i++) {\n      codeblock = {\n        cbx: i,\n        cby: j,\n        tbx0: codeblockWidth * i,\n        tby0: codeblockHeight * j,\n        tbx1: codeblockWidth * (i + 1),\n        tby1: codeblockHeight * (j + 1),\n      };\n\n      codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n      codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n      codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n      codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n\n      // Calculate precinct number for this codeblock, codeblock position\n      // should be relative to its subband, use actual dimension and position\n      // See comment about codeblock group width and height\n      const pi = Math.floor(\n        (codeblock.tbx0_ - subband.tbx0) /\n          precinctParameters.precinctWidthInSubband\n      );\n      const pj = Math.floor(\n        (codeblock.tby0_ - subband.tby0) /\n          precinctParameters.precinctHeightInSubband\n      );\n      precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n\n      codeblock.precinctNumber = precinctNumber;\n      codeblock.subbandType = subband.type;\n      codeblock.Lblock = 3;\n\n      if (\n        codeblock.tbx1_ <= codeblock.tbx0_ ||\n        codeblock.tby1_ <= codeblock.tby0_\n      ) {\n        continue;\n      }\n      codeblocks.push(codeblock);\n      // building precinct for the sub-band\n      let precinct = precincts[precinctNumber];\n      if (precinct !== undefined) {\n        if (i < precinct.cbxMin) {\n          precinct.cbxMin = i;\n        } else if (i > precinct.cbxMax) {\n          precinct.cbxMax = i;\n        }\n        if (j < precinct.cbyMin) {\n          precinct.cbxMin = j;\n        } else if (j > precinct.cbyMax) {\n          precinct.cbyMax = j;\n        }\n      } else {\n        precincts[precinctNumber] = precinct = {\n          cbxMin: i,\n          cbyMin: j,\n          cbxMax: i,\n          cbyMax: j,\n        };\n      }\n      codeblock.precinct = precinct;\n    }\n  }\n  subband.codeblockParameters = {\n    codeblockWidth: xcb_,\n    codeblockHeight: ycb_,\n    numcodeblockwide: cbx1 - cbx0 + 1,\n    numcodeblockhigh: cby1 - cby0 + 1,\n  };\n  subband.codeblocks = codeblocks;\n  subband.precincts = precincts;\n}\nfunction createPacket(resolution, precinctNumber, layerNumber) {\n  const precinctCodeblocks = [];\n  // Section B.10.8 Order of info in packet\n  const subbands = resolution.subbands;\n  // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence\n  for (let i = 0, ii = subbands.length; i < ii; i++) {\n    const subband = subbands[i];\n    const codeblocks = subband.codeblocks;\n    for (let j = 0, jj = codeblocks.length; j < jj; j++) {\n      const codeblock = codeblocks[j];\n      if (codeblock.precinctNumber !== precinctNumber) {\n        continue;\n      }\n      precinctCodeblocks.push(codeblock);\n    }\n  }\n  return {\n    layerNumber,\n    codeblocks: precinctCodeblocks,\n  };\n}\nfunction LayerResolutionComponentPositionIterator(context) {\n  const siz = context.SIZ;\n  const tileIndex = context.currentTile.index;\n  const tile = context.tiles[tileIndex];\n  const layersCount = tile.codingStyleDefaultParameters.layersCount;\n  const componentsCount = siz.Csiz;\n  let maxDecompositionLevelsCount = 0;\n  for (let q = 0; q < componentsCount; q++) {\n    maxDecompositionLevelsCount = Math.max(\n      maxDecompositionLevelsCount,\n      tile.components[q].codingStyleParameters.decompositionLevelsCount\n    );\n  }\n\n  let l = 0,\n    r = 0,\n    i = 0,\n    k = 0;\n\n  this.nextPacket = function JpxImage_nextPacket() {\n    // Section B.12.1.1 Layer-resolution-component-position\n    for (; l < layersCount; l++) {\n      for (; r <= maxDecompositionLevelsCount; r++) {\n        for (; i < componentsCount; i++) {\n          const component = tile.components[i];\n          if (r > component.codingStyleParameters.decompositionLevelsCount) {\n            continue;\n          }\n\n          const resolution = component.resolutions[r];\n          const numprecincts = resolution.precinctParameters.numprecincts;\n          for (; k < numprecincts; ) {\n            const packet = createPacket(resolution, k, l);\n            k++;\n            return packet;\n          }\n          k = 0;\n        }\n        i = 0;\n      }\n      r = 0;\n    }\n    throw new JpxError(\"Out of packets\");\n  };\n}\nfunction ResolutionLayerComponentPositionIterator(context) {\n  const siz = context.SIZ;\n  const tileIndex = context.currentTile.index;\n  const tile = context.tiles[tileIndex];\n  const layersCount = tile.codingStyleDefaultParameters.layersCount;\n  const componentsCount = siz.Csiz;\n  let maxDecompositionLevelsCount = 0;\n  for (let q = 0; q < componentsCount; q++) {\n    maxDecompositionLevelsCount = Math.max(\n      maxDecompositionLevelsCount,\n      tile.components[q].codingStyleParameters.decompositionLevelsCount\n    );\n  }\n\n  let r = 0,\n    l = 0,\n    i = 0,\n    k = 0;\n\n  this.nextPacket = function JpxImage_nextPacket() {\n    // Section B.12.1.2 Resolution-layer-component-position\n    for (; r <= maxDecompositionLevelsCount; r++) {\n      for (; l < layersCount; l++) {\n        for (; i < componentsCount; i++) {\n          const component = tile.components[i];\n          if (r > component.codingStyleParameters.decompositionLevelsCount) {\n            continue;\n          }\n\n          const resolution = component.resolutions[r];\n          const numprecincts = resolution.precinctParameters.numprecincts;\n          for (; k < numprecincts; ) {\n            const packet = createPacket(resolution, k, l);\n            k++;\n            return packet;\n          }\n          k = 0;\n        }\n        i = 0;\n      }\n      l = 0;\n    }\n    throw new JpxError(\"Out of packets\");\n  };\n}\nfunction ResolutionPositionComponentLayerIterator(context) {\n  const siz = context.SIZ;\n  const tileIndex = context.currentTile.index;\n  const tile = context.tiles[tileIndex];\n  const layersCount = tile.codingStyleDefaultParameters.layersCount;\n  const componentsCount = siz.Csiz;\n  let l, r, c, p;\n  let maxDecompositionLevelsCount = 0;\n  for (c = 0; c < componentsCount; c++) {\n    const component = tile.components[c];\n    maxDecompositionLevelsCount = Math.max(\n      maxDecompositionLevelsCount,\n      component.codingStyleParameters.decompositionLevelsCount\n    );\n  }\n  const maxNumPrecinctsInLevel = new Int32Array(\n    maxDecompositionLevelsCount + 1\n  );\n  for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n    let maxNumPrecincts = 0;\n    for (c = 0; c < componentsCount; ++c) {\n      const resolutions = tile.components[c].resolutions;\n      if (r < resolutions.length) {\n        maxNumPrecincts = Math.max(\n          maxNumPrecincts,\n          resolutions[r].precinctParameters.numprecincts\n        );\n      }\n    }\n    maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n  }\n  l = 0;\n  r = 0;\n  c = 0;\n  p = 0;\n\n  this.nextPacket = function JpxImage_nextPacket() {\n    // Section B.12.1.3 Resolution-position-component-layer\n    for (; r <= maxDecompositionLevelsCount; r++) {\n      for (; p < maxNumPrecinctsInLevel[r]; p++) {\n        for (; c < componentsCount; c++) {\n          const component = tile.components[c];\n          if (r > component.codingStyleParameters.decompositionLevelsCount) {\n            continue;\n          }\n          const resolution = component.resolutions[r];\n          const numprecincts = resolution.precinctParameters.numprecincts;\n          if (p >= numprecincts) {\n            continue;\n          }\n          for (; l < layersCount; ) {\n            const packet = createPacket(resolution, p, l);\n            l++;\n            return packet;\n          }\n          l = 0;\n        }\n        c = 0;\n      }\n      p = 0;\n    }\n    throw new JpxError(\"Out of packets\");\n  };\n}\nfunction PositionComponentResolutionLayerIterator(context) {\n  const siz = context.SIZ;\n  const tileIndex = context.currentTile.index;\n  const tile = context.tiles[tileIndex];\n  const layersCount = tile.codingStyleDefaultParameters.layersCount;\n  const componentsCount = siz.Csiz;\n  const precinctsSizes = getPrecinctSizesInImageScale(tile);\n  const precinctsIterationSizes = precinctsSizes;\n  let l = 0,\n    r = 0,\n    c = 0,\n    px = 0,\n    py = 0;\n\n  this.nextPacket = function JpxImage_nextPacket() {\n    // Section B.12.1.4 Position-component-resolution-layer\n    for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n      for (; px < precinctsIterationSizes.maxNumWide; px++) {\n        for (; c < componentsCount; c++) {\n          const component = tile.components[c];\n          const decompositionLevelsCount =\n            component.codingStyleParameters.decompositionLevelsCount;\n          for (; r <= decompositionLevelsCount; r++) {\n            const resolution = component.resolutions[r];\n            const sizeInImageScale =\n              precinctsSizes.components[c].resolutions[r];\n            const k = getPrecinctIndexIfExist(\n              px,\n              py,\n              sizeInImageScale,\n              precinctsIterationSizes,\n              resolution\n            );\n            if (k === null) {\n              continue;\n            }\n            for (; l < layersCount; ) {\n              const packet = createPacket(resolution, k, l);\n              l++;\n              return packet;\n            }\n            l = 0;\n          }\n          r = 0;\n        }\n        c = 0;\n      }\n      px = 0;\n    }\n    throw new JpxError(\"Out of packets\");\n  };\n}\nfunction ComponentPositionResolutionLayerIterator(context) {\n  const siz = context.SIZ;\n  const tileIndex = context.currentTile.index;\n  const tile = context.tiles[tileIndex];\n  const layersCount = tile.codingStyleDefaultParameters.layersCount;\n  const componentsCount = siz.Csiz;\n  const precinctsSizes = getPrecinctSizesInImageScale(tile);\n  let l = 0,\n    r = 0,\n    c = 0,\n    px = 0,\n    py = 0;\n\n  this.nextPacket = function JpxImage_nextPacket() {\n    // Section B.12.1.5 Component-position-resolution-layer\n    for (; c < componentsCount; ++c) {\n      const component = tile.components[c];\n      const precinctsIterationSizes = precinctsSizes.components[c];\n      const decompositionLevelsCount =\n        component.codingStyleParameters.decompositionLevelsCount;\n      for (; py < precinctsIterationSizes.maxNumHigh; py++) {\n        for (; px < precinctsIterationSizes.maxNumWide; px++) {\n          for (; r <= decompositionLevelsCount; r++) {\n            const resolution = component.resolutions[r];\n            const sizeInImageScale = precinctsIterationSizes.resolutions[r];\n            const k = getPrecinctIndexIfExist(\n              px,\n              py,\n              sizeInImageScale,\n              precinctsIterationSizes,\n              resolution\n            );\n            if (k === null) {\n              continue;\n            }\n            for (; l < layersCount; ) {\n              const packet = createPacket(resolution, k, l);\n              l++;\n              return packet;\n            }\n            l = 0;\n          }\n          r = 0;\n        }\n        px = 0;\n      }\n      py = 0;\n    }\n    throw new JpxError(\"Out of packets\");\n  };\n}\nfunction getPrecinctIndexIfExist(\n  pxIndex,\n  pyIndex,\n  sizeInImageScale,\n  precinctIterationSizes,\n  resolution\n) {\n  const posX = pxIndex * precinctIterationSizes.minWidth;\n  const posY = pyIndex * precinctIterationSizes.minHeight;\n  if (\n    posX % sizeInImageScale.width !== 0 ||\n    posY % sizeInImageScale.height !== 0\n  ) {\n    return null;\n  }\n  const startPrecinctRowIndex =\n    (posY / sizeInImageScale.width) *\n    resolution.precinctParameters.numprecinctswide;\n  return posX / sizeInImageScale.height + startPrecinctRowIndex;\n}\nfunction getPrecinctSizesInImageScale(tile) {\n  const componentsCount = tile.components.length;\n  let minWidth = Number.MAX_VALUE;\n  let minHeight = Number.MAX_VALUE;\n  let maxNumWide = 0;\n  let maxNumHigh = 0;\n  const sizePerComponent = new Array(componentsCount);\n  for (let c = 0; c < componentsCount; c++) {\n    const component = tile.components[c];\n    const decompositionLevelsCount =\n      component.codingStyleParameters.decompositionLevelsCount;\n    const sizePerResolution = new Array(decompositionLevelsCount + 1);\n    let minWidthCurrentComponent = Number.MAX_VALUE;\n    let minHeightCurrentComponent = Number.MAX_VALUE;\n    let maxNumWideCurrentComponent = 0;\n    let maxNumHighCurrentComponent = 0;\n    let scale = 1;\n    for (let r = decompositionLevelsCount; r >= 0; --r) {\n      const resolution = component.resolutions[r];\n      const widthCurrentResolution =\n        scale * resolution.precinctParameters.precinctWidth;\n      const heightCurrentResolution =\n        scale * resolution.precinctParameters.precinctHeight;\n      minWidthCurrentComponent = Math.min(\n        minWidthCurrentComponent,\n        widthCurrentResolution\n      );\n      minHeightCurrentComponent = Math.min(\n        minHeightCurrentComponent,\n        heightCurrentResolution\n      );\n      maxNumWideCurrentComponent = Math.max(\n        maxNumWideCurrentComponent,\n        resolution.precinctParameters.numprecinctswide\n      );\n      maxNumHighCurrentComponent = Math.max(\n        maxNumHighCurrentComponent,\n        resolution.precinctParameters.numprecinctshigh\n      );\n      sizePerResolution[r] = {\n        width: widthCurrentResolution,\n        height: heightCurrentResolution,\n      };\n      scale <<= 1;\n    }\n    minWidth = Math.min(minWidth, minWidthCurrentComponent);\n    minHeight = Math.min(minHeight, minHeightCurrentComponent);\n    maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n    maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n    sizePerComponent[c] = {\n      resolutions: sizePerResolution,\n      minWidth: minWidthCurrentComponent,\n      minHeight: minHeightCurrentComponent,\n      maxNumWide: maxNumWideCurrentComponent,\n      maxNumHigh: maxNumHighCurrentComponent,\n    };\n  }\n  return {\n    components: sizePerComponent,\n    minWidth,\n    minHeight,\n    maxNumWide,\n    maxNumHigh,\n  };\n}\nfunction buildPackets(context) {\n  const siz = context.SIZ;\n  const tileIndex = context.currentTile.index;\n  const tile = context.tiles[tileIndex];\n  const componentsCount = siz.Csiz;\n  // Creating resolutions and sub-bands for each component\n  for (let c = 0; c < componentsCount; c++) {\n    const component = tile.components[c];\n    const decompositionLevelsCount =\n      component.codingStyleParameters.decompositionLevelsCount;\n    // Section B.5 Resolution levels and sub-bands\n    const resolutions = [];\n    const subbands = [];\n    for (let r = 0; r <= decompositionLevelsCount; r++) {\n      const blocksDimensions = getBlocksDimensions(context, component, r);\n      const resolution = {};\n      const scale = 1 << (decompositionLevelsCount - r);\n      resolution.trx0 = Math.ceil(component.tcx0 / scale);\n      resolution.try0 = Math.ceil(component.tcy0 / scale);\n      resolution.trx1 = Math.ceil(component.tcx1 / scale);\n      resolution.try1 = Math.ceil(component.tcy1 / scale);\n      resolution.resLevel = r;\n      buildPrecincts(context, resolution, blocksDimensions);\n      resolutions.push(resolution);\n\n      let subband;\n      if (r === 0) {\n        // one sub-band (LL) with last decomposition\n        subband = {};\n        subband.type = \"LL\";\n        subband.tbx0 = Math.ceil(component.tcx0 / scale);\n        subband.tby0 = Math.ceil(component.tcy0 / scale);\n        subband.tbx1 = Math.ceil(component.tcx1 / scale);\n        subband.tby1 = Math.ceil(component.tcy1 / scale);\n        subband.resolution = resolution;\n        buildCodeblocks(context, subband, blocksDimensions);\n        subbands.push(subband);\n        resolution.subbands = [subband];\n      } else {\n        const bscale = 1 << (decompositionLevelsCount - r + 1);\n        const resolutionSubbands = [];\n        // three sub-bands (HL, LH and HH) with rest of decompositions\n        subband = {};\n        subband.type = \"HL\";\n        subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n        subband.tby0 = Math.ceil(component.tcy0 / bscale);\n        subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n        subband.tby1 = Math.ceil(component.tcy1 / bscale);\n        subband.resolution = resolution;\n        buildCodeblocks(context, subband, blocksDimensions);\n        subbands.push(subband);\n        resolutionSubbands.push(subband);\n\n        subband = {};\n        subband.type = \"LH\";\n        subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n        subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n        subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n        subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n        subband.resolution = resolution;\n        buildCodeblocks(context, subband, blocksDimensions);\n        subbands.push(subband);\n        resolutionSubbands.push(subband);\n\n        subband = {};\n        subband.type = \"HH\";\n        subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);\n        subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);\n        subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);\n        subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);\n        subband.resolution = resolution;\n        buildCodeblocks(context, subband, blocksDimensions);\n        subbands.push(subband);\n        resolutionSubbands.push(subband);\n\n        resolution.subbands = resolutionSubbands;\n      }\n    }\n    component.resolutions = resolutions;\n    component.subbands = subbands;\n  }\n  // Generate the packets sequence\n  const progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n  switch (progressionOrder) {\n    case 0:\n      tile.packetsIterator = new LayerResolutionComponentPositionIterator(\n        context\n      );\n      break;\n    case 1:\n      tile.packetsIterator = new ResolutionLayerComponentPositionIterator(\n        context\n      );\n      break;\n    case 2:\n      tile.packetsIterator = new ResolutionPositionComponentLayerIterator(\n        context\n      );\n      break;\n    case 3:\n      tile.packetsIterator = new PositionComponentResolutionLayerIterator(\n        context\n      );\n      break;\n    case 4:\n      tile.packetsIterator = new ComponentPositionResolutionLayerIterator(\n        context\n      );\n      break;\n    default:\n      throw new JpxError(`Unsupported progression order ${progressionOrder}`);\n  }\n}\nfunction parseTilePackets(context, data, offset, dataLength) {\n  let position = 0;\n  let buffer,\n    bufferSize = 0,\n    skipNextBit = false;\n  function readBits(count) {\n    while (bufferSize < count) {\n      const b = data[offset + position];\n      position++;\n      if (skipNextBit) {\n        buffer = (buffer << 7) | b;\n        bufferSize += 7;\n        skipNextBit = false;\n      } else {\n        buffer = (buffer << 8) | b;\n        bufferSize += 8;\n      }\n      if (b === 0xff) {\n        skipNextBit = true;\n      }\n    }\n    bufferSize -= count;\n    return (buffer >>> bufferSize) & ((1 << count) - 1);\n  }\n  function skipMarkerIfEqual(value) {\n    if (\n      data[offset + position - 1] === 0xff &&\n      data[offset + position] === value\n    ) {\n      skipBytes(1);\n      return true;\n    } else if (\n      data[offset + position] === 0xff &&\n      data[offset + position + 1] === value\n    ) {\n      skipBytes(2);\n      return true;\n    }\n    return false;\n  }\n  function skipBytes(count) {\n    position += count;\n  }\n  function alignToByte() {\n    bufferSize = 0;\n    if (skipNextBit) {\n      position++;\n      skipNextBit = false;\n    }\n  }\n  function readCodingpasses() {\n    if (readBits(1) === 0) {\n      return 1;\n    }\n    if (readBits(1) === 0) {\n      return 2;\n    }\n    let value = readBits(2);\n    if (value < 3) {\n      return value + 3;\n    }\n    value = readBits(5);\n    if (value < 31) {\n      return value + 6;\n    }\n    value = readBits(7);\n    return value + 37;\n  }\n  const tileIndex = context.currentTile.index;\n  const tile = context.tiles[tileIndex];\n  const sopMarkerUsed = context.COD.sopMarkerUsed;\n  const ephMarkerUsed = context.COD.ephMarkerUsed;\n  const packetsIterator = tile.packetsIterator;\n  while (position < dataLength) {\n    alignToByte();\n    if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {\n      // Skip also marker segment length and packet sequence ID\n      skipBytes(4);\n    }\n    const packet = packetsIterator.nextPacket();\n    if (!readBits(1)) {\n      continue;\n    }\n    const layerNumber = packet.layerNumber,\n      queue = [];\n    let codeblock;\n    for (let i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n      codeblock = packet.codeblocks[i];\n      let precinct = codeblock.precinct;\n      const codeblockColumn = codeblock.cbx - precinct.cbxMin;\n      const codeblockRow = codeblock.cby - precinct.cbyMin;\n      let codeblockIncluded = false;\n      let firstTimeInclusion = false;\n      let valueReady, zeroBitPlanesTree;\n      if (codeblock.included !== undefined) {\n        codeblockIncluded = !!readBits(1);\n      } else {\n        // reading inclusion tree\n        precinct = codeblock.precinct;\n        let inclusionTree;\n        if (precinct.inclusionTree !== undefined) {\n          inclusionTree = precinct.inclusionTree;\n        } else {\n          // building inclusion and zero bit-planes trees\n          const width = precinct.cbxMax - precinct.cbxMin + 1;\n          const height = precinct.cbyMax - precinct.cbyMin + 1;\n          inclusionTree = new InclusionTree(width, height, layerNumber);\n          zeroBitPlanesTree = new TagTree(width, height);\n          precinct.inclusionTree = inclusionTree;\n          precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n        }\n\n        if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n          while (true) {\n            if (readBits(1)) {\n              valueReady = !inclusionTree.nextLevel();\n              if (valueReady) {\n                codeblock.included = true;\n                codeblockIncluded = firstTimeInclusion = true;\n                break;\n              }\n            } else {\n              inclusionTree.incrementValue(layerNumber);\n              break;\n            }\n          }\n        }\n      }\n      if (!codeblockIncluded) {\n        continue;\n      }\n      if (firstTimeInclusion) {\n        zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n        zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n        while (true) {\n          if (readBits(1)) {\n            valueReady = !zeroBitPlanesTree.nextLevel();\n            if (valueReady) {\n              break;\n            }\n          } else {\n            zeroBitPlanesTree.incrementValue();\n          }\n        }\n        codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n      }\n      const codingpasses = readCodingpasses();\n      while (readBits(1)) {\n        codeblock.Lblock++;\n      }\n      const codingpassesLog2 = log2(codingpasses);\n      // rounding down log2\n      const bits =\n        (codingpasses < 1 << codingpassesLog2\n          ? codingpassesLog2 - 1\n          : codingpassesLog2) + codeblock.Lblock;\n      const codedDataLength = readBits(bits);\n      queue.push({\n        codeblock,\n        codingpasses,\n        dataLength: codedDataLength,\n      });\n    }\n    alignToByte();\n    if (ephMarkerUsed) {\n      skipMarkerIfEqual(0x92);\n    }\n    while (queue.length > 0) {\n      const packetItem = queue.shift();\n      codeblock = packetItem.codeblock;\n      if (codeblock.data === undefined) {\n        codeblock.data = [];\n      }\n      codeblock.data.push({\n        data,\n        start: offset + position,\n        end: offset + position + packetItem.dataLength,\n        codingpasses: packetItem.codingpasses,\n      });\n      position += packetItem.dataLength;\n    }\n  }\n  return position;\n}\nfunction copyCoefficients(\n  coefficients,\n  levelWidth,\n  levelHeight,\n  subband,\n  delta,\n  mb,\n  reversible,\n  segmentationSymbolUsed\n) {\n  const x0 = subband.tbx0;\n  const y0 = subband.tby0;\n  const width = subband.tbx1 - subband.tbx0;\n  const codeblocks = subband.codeblocks;\n  const right = subband.type.charAt(0) === \"H\" ? 1 : 0;\n  const bottom = subband.type.charAt(1) === \"H\" ? levelWidth : 0;\n\n  for (let i = 0, ii = codeblocks.length; i < ii; ++i) {\n    const codeblock = codeblocks[i];\n    const blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n    const blockHeight = codeblock.tby1_ - codeblock.tby0_;\n    if (blockWidth === 0 || blockHeight === 0) {\n      continue;\n    }\n    if (codeblock.data === undefined) {\n      continue;\n    }\n\n    const bitModel = new BitModel(\n      blockWidth,\n      blockHeight,\n      codeblock.subbandType,\n      codeblock.zeroBitPlanes,\n      mb\n    );\n    let currentCodingpassType = 2; // first bit plane starts from cleanup\n\n    // collect data\n    const data = codeblock.data;\n    let totalLength = 0,\n      codingpasses = 0;\n    let j, jj, dataItem;\n    for (j = 0, jj = data.length; j < jj; j++) {\n      dataItem = data[j];\n      totalLength += dataItem.end - dataItem.start;\n      codingpasses += dataItem.codingpasses;\n    }\n    const encodedData = new Uint8Array(totalLength);\n    let position = 0;\n    for (j = 0, jj = data.length; j < jj; j++) {\n      dataItem = data[j];\n      const chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n      encodedData.set(chunk, position);\n      position += chunk.length;\n    }\n    // decoding the item\n    const decoder = new ArithmeticDecoder(encodedData, 0, totalLength);\n    bitModel.setDecoder(decoder);\n\n    for (j = 0; j < codingpasses; j++) {\n      switch (currentCodingpassType) {\n        case 0:\n          bitModel.runSignificancePropagationPass();\n          break;\n        case 1:\n          bitModel.runMagnitudeRefinementPass();\n          break;\n        case 2:\n          bitModel.runCleanupPass();\n          if (segmentationSymbolUsed) {\n            bitModel.checkSegmentationSymbol();\n          }\n          break;\n      }\n      currentCodingpassType = (currentCodingpassType + 1) % 3;\n    }\n\n    let offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n    const sign = bitModel.coefficentsSign;\n    const magnitude = bitModel.coefficentsMagnitude;\n    const bitsDecoded = bitModel.bitsDecoded;\n    const magnitudeCorrection = reversible ? 0 : 0.5;\n    let k, n, nb;\n    position = 0;\n    // Do the interleaving of Section F.3.3 here, so we do not need\n    // to copy later. LL level is not interleaved, just copied.\n    const interleave = subband.type !== \"LL\";\n    for (j = 0; j < blockHeight; j++) {\n      const row = (offset / width) | 0; // row in the non-interleaved subband\n      const levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n      for (k = 0; k < blockWidth; k++) {\n        n = magnitude[position];\n        if (n !== 0) {\n          n = (n + magnitudeCorrection) * delta;\n          if (sign[position] !== 0) {\n            n = -n;\n          }\n          nb = bitsDecoded[position];\n          const pos = interleave ? levelOffset + (offset << 1) : offset;\n          if (reversible && nb >= mb) {\n            coefficients[pos] = n;\n          } else {\n            coefficients[pos] = n * (1 << (mb - nb));\n          }\n        }\n        offset++;\n        position++;\n      }\n      offset += width - blockWidth;\n    }\n  }\n}\nfunction transformTile(context, tile, c) {\n  const component = tile.components[c];\n  const codingStyleParameters = component.codingStyleParameters;\n  const quantizationParameters = component.quantizationParameters;\n  const decompositionLevelsCount =\n    codingStyleParameters.decompositionLevelsCount;\n  const spqcds = quantizationParameters.SPqcds;\n  const scalarExpounded = quantizationParameters.scalarExpounded;\n  const guardBits = quantizationParameters.guardBits;\n  const segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n  const precision = context.components[c].precision;\n\n  const reversible = codingStyleParameters.reversibleTransformation;\n  const transform = reversible\n    ? new ReversibleTransform()\n    : new IrreversibleTransform();\n\n  const subbandCoefficients = [];\n  let b = 0;\n  for (let i = 0; i <= decompositionLevelsCount; i++) {\n    const resolution = component.resolutions[i];\n\n    const width = resolution.trx1 - resolution.trx0;\n    const height = resolution.try1 - resolution.try0;\n    // Allocate space for the whole sublevel.\n    const coefficients = new Float32Array(width * height);\n\n    for (let j = 0, jj = resolution.subbands.length; j < jj; j++) {\n      let mu, epsilon;\n      if (!scalarExpounded) {\n        // formula E-5\n        mu = spqcds[0].mu;\n        epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n      } else {\n        mu = spqcds[b].mu;\n        epsilon = spqcds[b].epsilon;\n        b++;\n      }\n\n      const subband = resolution.subbands[j];\n      const gainLog2 = SubbandsGainLog2[subband.type];\n\n      // calculate quantization coefficient (Section E.1.1.1)\n      const delta = reversible\n        ? 1\n        : 2 ** (precision + gainLog2 - epsilon) * (1 + mu / 2048);\n      const mb = guardBits + epsilon - 1;\n\n      // In the first resolution level, copyCoefficients will fill the\n      // whole array with coefficients. In the succeeding passes,\n      // copyCoefficients will consecutively fill in the values that belong\n      // to the interleaved positions of the HL, LH, and HH coefficients.\n      // The LL coefficients will then be interleaved in Transform.iterate().\n      copyCoefficients(\n        coefficients,\n        width,\n        height,\n        subband,\n        delta,\n        mb,\n        reversible,\n        segmentationSymbolUsed\n      );\n    }\n    subbandCoefficients.push({\n      width,\n      height,\n      items: coefficients,\n    });\n  }\n\n  const result = transform.calculate(\n    subbandCoefficients,\n    component.tcx0,\n    component.tcy0\n  );\n  return {\n    left: component.tcx0,\n    top: component.tcy0,\n    width: result.width,\n    height: result.height,\n    items: result.items,\n  };\n}\nfunction transformComponents(context) {\n  const siz = context.SIZ;\n  const components = context.components;\n  const componentsCount = siz.Csiz;\n  const resultImages = [];\n  for (let i = 0, ii = context.tiles.length; i < ii; i++) {\n    const tile = context.tiles[i];\n    const transformedTiles = [];\n    for (let c = 0; c < componentsCount; c++) {\n      transformedTiles[c] = transformTile(context, tile, c);\n    }\n    const tile0 = transformedTiles[0];\n    const out = new Uint8ClampedArray(tile0.items.length * componentsCount);\n    const result = {\n      left: tile0.left,\n      top: tile0.top,\n      width: tile0.width,\n      height: tile0.height,\n      items: out,\n    };\n\n    // Section G.2.2 Inverse multi component transform\n    let shift, offset;\n    let pos = 0,\n      j,\n      jj,\n      y0,\n      y1,\n      y2;\n    if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n      const fourComponents = componentsCount === 4;\n      const y0items = transformedTiles[0].items;\n      const y1items = transformedTiles[1].items;\n      const y2items = transformedTiles[2].items;\n      const y3items = fourComponents ? transformedTiles[3].items : null;\n\n      // HACK: The multiple component transform formulas below assume that\n      // all components have the same precision. With this in mind, we\n      // compute shift and offset only once.\n      shift = components[0].precision - 8;\n      offset = (128 << shift) + 0.5;\n\n      const component0 = tile.components[0];\n      const alpha01 = componentsCount - 3;\n      jj = y0items.length;\n      if (!component0.codingStyleParameters.reversibleTransformation) {\n        // inverse irreversible multiple component transform\n        for (j = 0; j < jj; j++, pos += alpha01) {\n          y0 = y0items[j] + offset;\n          y1 = y1items[j];\n          y2 = y2items[j];\n          out[pos++] = (y0 + 1.402 * y2) >> shift;\n          out[pos++] = (y0 - 0.34413 * y1 - 0.71414 * y2) >> shift;\n          out[pos++] = (y0 + 1.772 * y1) >> shift;\n        }\n      } else {\n        // inverse reversible multiple component transform\n        for (j = 0; j < jj; j++, pos += alpha01) {\n          y0 = y0items[j] + offset;\n          y1 = y1items[j];\n          y2 = y2items[j];\n          const g = y0 - ((y2 + y1) >> 2);\n\n          out[pos++] = (g + y2) >> shift;\n          out[pos++] = g >> shift;\n          out[pos++] = (g + y1) >> shift;\n        }\n      }\n      if (fourComponents) {\n        for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n          out[pos] = (y3items[j] + offset) >> shift;\n        }\n      }\n    } else {\n      // no multi-component transform\n      for (let c = 0; c < componentsCount; c++) {\n        const items = transformedTiles[c].items;\n        shift = components[c].precision - 8;\n        offset = (128 << shift) + 0.5;\n        for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n          out[pos] = (items[j] + offset) >> shift;\n          pos += componentsCount;\n        }\n      }\n    }\n    resultImages.push(result);\n  }\n  return resultImages;\n}\nfunction initializeTile(context, tileIndex) {\n  const siz = context.SIZ;\n  const componentsCount = siz.Csiz;\n  const tile = context.tiles[tileIndex];\n  for (let c = 0; c < componentsCount; c++) {\n    const component = tile.components[c];\n    const qcdOrQcc =\n      context.currentTile.QCC[c] !== undefined\n        ? context.currentTile.QCC[c]\n        : context.currentTile.QCD;\n    component.quantizationParameters = qcdOrQcc;\n    const codOrCoc =\n      context.currentTile.COC[c] !== undefined\n        ? context.currentTile.COC[c]\n        : context.currentTile.COD;\n    component.codingStyleParameters = codOrCoc;\n  }\n  tile.codingStyleDefaultParameters = context.currentTile.COD;\n}\n\n// Section B.10.2 Tag trees\nclass TagTree {\n  constructor(width, height) {\n    const levelsLength = log2(Math.max(width, height)) + 1;\n    this.levels = [];\n    for (let i = 0; i < levelsLength; i++) {\n      const level = {\n        width,\n        height,\n        items: [],\n      };\n      this.levels.push(level);\n      width = Math.ceil(width / 2);\n      height = Math.ceil(height / 2);\n    }\n  }\n\n  reset(i, j) {\n    let currentLevel = 0,\n      value = 0,\n      level;\n    while (currentLevel < this.levels.length) {\n      level = this.levels[currentLevel];\n      const index = i + j * level.width;\n      if (level.items[index] !== undefined) {\n        value = level.items[index];\n        break;\n      }\n      level.index = index;\n      i >>= 1;\n      j >>= 1;\n      currentLevel++;\n    }\n    currentLevel--;\n    level = this.levels[currentLevel];\n    level.items[level.index] = value;\n    this.currentLevel = currentLevel;\n    delete this.value;\n  }\n\n  incrementValue() {\n    const level = this.levels[this.currentLevel];\n    level.items[level.index]++;\n  }\n\n  nextLevel() {\n    let currentLevel = this.currentLevel;\n    let level = this.levels[currentLevel];\n    const value = level.items[level.index];\n    currentLevel--;\n    if (currentLevel < 0) {\n      this.value = value;\n      return false;\n    }\n\n    this.currentLevel = currentLevel;\n    level = this.levels[currentLevel];\n    level.items[level.index] = value;\n    return true;\n  }\n}\n\nclass InclusionTree {\n  constructor(width, height, defaultValue) {\n    const levelsLength = log2(Math.max(width, height)) + 1;\n    this.levels = [];\n    for (let i = 0; i < levelsLength; i++) {\n      const items = new Uint8Array(width * height);\n      for (let j = 0, jj = items.length; j < jj; j++) {\n        items[j] = defaultValue;\n      }\n\n      const level = {\n        width,\n        height,\n        items,\n      };\n      this.levels.push(level);\n\n      width = Math.ceil(width / 2);\n      height = Math.ceil(height / 2);\n    }\n  }\n\n  reset(i, j, stopValue) {\n    let currentLevel = 0;\n    while (currentLevel < this.levels.length) {\n      const level = this.levels[currentLevel];\n      const index = i + j * level.width;\n      level.index = index;\n      const value = level.items[index];\n\n      if (value === 0xff) {\n        break;\n      }\n\n      if (value > stopValue) {\n        this.currentLevel = currentLevel;\n        // already know about this one, propagating the value to top levels\n        this.propagateValues();\n        return false;\n      }\n\n      i >>= 1;\n      j >>= 1;\n      currentLevel++;\n    }\n    this.currentLevel = currentLevel - 1;\n    return true;\n  }\n\n  incrementValue(stopValue) {\n    const level = this.levels[this.currentLevel];\n    level.items[level.index] = stopValue + 1;\n    this.propagateValues();\n  }\n\n  propagateValues() {\n    let levelIndex = this.currentLevel;\n    let level = this.levels[levelIndex];\n    const currentValue = level.items[level.index];\n    while (--levelIndex >= 0) {\n      level = this.levels[levelIndex];\n      level.items[level.index] = currentValue;\n    }\n  }\n\n  nextLevel() {\n    let currentLevel = this.currentLevel;\n    let level = this.levels[currentLevel];\n    const value = level.items[level.index];\n    level.items[level.index] = 0xff;\n    currentLevel--;\n    if (currentLevel < 0) {\n      return false;\n    }\n\n    this.currentLevel = currentLevel;\n    level = this.levels[currentLevel];\n    level.items[level.index] = value;\n    return true;\n  }\n}\n\n// Section D. Coefficient bit modeling\nconst BitModel = (function BitModelClosure() {\n  const UNIFORM_CONTEXT = 17;\n  const RUNLENGTH_CONTEXT = 18;\n  // Table D-1\n  // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),\n  // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)\n  const LLAndLHContextsLabel = new Uint8Array([\n    0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4,\n    7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6,\n    8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8,\n  ]);\n  const HLContextLabel = new Uint8Array([\n    0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8,\n    8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3,\n    4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8,\n  ]);\n  const HHContextLabel = new Uint8Array([\n    0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5,\n    5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8,\n    8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8,\n  ]);\n\n  // eslint-disable-next-line no-shadow\n  class BitModel {\n    constructor(width, height, subband, zeroBitPlanes, mb) {\n      this.width = width;\n      this.height = height;\n\n      let contextLabelTable;\n      if (subband === \"HH\") {\n        contextLabelTable = HHContextLabel;\n      } else if (subband === \"HL\") {\n        contextLabelTable = HLContextLabel;\n      } else {\n        contextLabelTable = LLAndLHContextsLabel;\n      }\n      this.contextLabelTable = contextLabelTable;\n\n      const coefficientCount = width * height;\n\n      // coefficients outside the encoding region treated as insignificant\n      // add border state cells for significanceState\n      this.neighborsSignificance = new Uint8Array(coefficientCount);\n      this.coefficentsSign = new Uint8Array(coefficientCount);\n      let coefficentsMagnitude;\n      if (mb > 14) {\n        coefficentsMagnitude = new Uint32Array(coefficientCount);\n      } else if (mb > 6) {\n        coefficentsMagnitude = new Uint16Array(coefficientCount);\n      } else {\n        coefficentsMagnitude = new Uint8Array(coefficientCount);\n      }\n      this.coefficentsMagnitude = coefficentsMagnitude;\n      this.processingFlags = new Uint8Array(coefficientCount);\n\n      const bitsDecoded = new Uint8Array(coefficientCount);\n      if (zeroBitPlanes !== 0) {\n        for (let i = 0; i < coefficientCount; i++) {\n          bitsDecoded[i] = zeroBitPlanes;\n        }\n      }\n      this.bitsDecoded = bitsDecoded;\n\n      this.reset();\n    }\n\n    setDecoder(decoder) {\n      this.decoder = decoder;\n    }\n\n    reset() {\n      // We have 17 contexts that are accessed via context labels,\n      // plus the uniform and runlength context.\n      this.contexts = new Int8Array(19);\n\n      // Contexts are packed into 1 byte:\n      // highest 7 bits carry the index, lowest bit carries mps\n      this.contexts[0] = (4 << 1) | 0;\n      this.contexts[UNIFORM_CONTEXT] = (46 << 1) | 0;\n      this.contexts[RUNLENGTH_CONTEXT] = (3 << 1) | 0;\n    }\n\n    setNeighborsSignificance(row, column, index) {\n      const neighborsSignificance = this.neighborsSignificance;\n      const width = this.width,\n        height = this.height;\n      const left = column > 0;\n      const right = column + 1 < width;\n      let i;\n\n      if (row > 0) {\n        i = index - width;\n        if (left) {\n          neighborsSignificance[i - 1] += 0x10;\n        }\n        if (right) {\n          neighborsSignificance[i + 1] += 0x10;\n        }\n        neighborsSignificance[i] += 0x04;\n      }\n\n      if (row + 1 < height) {\n        i = index + width;\n        if (left) {\n          neighborsSignificance[i - 1] += 0x10;\n        }\n        if (right) {\n          neighborsSignificance[i + 1] += 0x10;\n        }\n        neighborsSignificance[i] += 0x04;\n      }\n\n      if (left) {\n        neighborsSignificance[index - 1] += 0x01;\n      }\n      if (right) {\n        neighborsSignificance[index + 1] += 0x01;\n      }\n      neighborsSignificance[index] |= 0x80;\n    }\n\n    runSignificancePropagationPass() {\n      const decoder = this.decoder;\n      const width = this.width,\n        height = this.height;\n      const coefficentsMagnitude = this.coefficentsMagnitude;\n      const coefficentsSign = this.coefficentsSign;\n      const neighborsSignificance = this.neighborsSignificance;\n      const processingFlags = this.processingFlags;\n      const contexts = this.contexts;\n      const labels = this.contextLabelTable;\n      const bitsDecoded = this.bitsDecoded;\n      const processedInverseMask = ~1;\n      const processedMask = 1;\n      const firstMagnitudeBitMask = 2;\n\n      for (let i0 = 0; i0 < height; i0 += 4) {\n        for (let j = 0; j < width; j++) {\n          let index = i0 * width + j;\n          for (let i1 = 0; i1 < 4; i1++, index += width) {\n            const i = i0 + i1;\n            if (i >= height) {\n              break;\n            }\n            // clear processed flag first\n            processingFlags[index] &= processedInverseMask;\n\n            if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {\n              continue;\n            }\n\n            const contextLabel = labels[neighborsSignificance[index]];\n            const decision = decoder.readBit(contexts, contextLabel);\n            if (decision) {\n              const sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n            }\n            bitsDecoded[index]++;\n            processingFlags[index] |= processedMask;\n          }\n        }\n      }\n    }\n\n    decodeSignBit(row, column, index) {\n      const width = this.width,\n        height = this.height;\n      const coefficentsMagnitude = this.coefficentsMagnitude;\n      const coefficentsSign = this.coefficentsSign;\n      let contribution, sign0, sign1, significance1;\n      let contextLabel, decoded;\n\n      // calculate horizontal contribution\n      significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n      if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n        sign1 = coefficentsSign[index + 1];\n        if (significance1) {\n          sign0 = coefficentsSign[index - 1];\n          contribution = 1 - sign1 - sign0;\n        } else {\n          contribution = 1 - sign1 - sign1;\n        }\n      } else if (significance1) {\n        sign0 = coefficentsSign[index - 1];\n        contribution = 1 - sign0 - sign0;\n      } else {\n        contribution = 0;\n      }\n      const horizontalContribution = 3 * contribution;\n\n      // calculate vertical contribution and combine with the horizontal\n      significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n      if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n        sign1 = coefficentsSign[index + width];\n        if (significance1) {\n          sign0 = coefficentsSign[index - width];\n          contribution = 1 - sign1 - sign0 + horizontalContribution;\n        } else {\n          contribution = 1 - sign1 - sign1 + horizontalContribution;\n        }\n      } else if (significance1) {\n        sign0 = coefficentsSign[index - width];\n        contribution = 1 - sign0 - sign0 + horizontalContribution;\n      } else {\n        contribution = horizontalContribution;\n      }\n\n      if (contribution >= 0) {\n        contextLabel = 9 + contribution;\n        decoded = this.decoder.readBit(this.contexts, contextLabel);\n      } else {\n        contextLabel = 9 - contribution;\n        decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n      }\n      return decoded;\n    }\n\n    runMagnitudeRefinementPass() {\n      const decoder = this.decoder;\n      const width = this.width,\n        height = this.height;\n      const coefficentsMagnitude = this.coefficentsMagnitude;\n      const neighborsSignificance = this.neighborsSignificance;\n      const contexts = this.contexts;\n      const bitsDecoded = this.bitsDecoded;\n      const processingFlags = this.processingFlags;\n      const processedMask = 1;\n      const firstMagnitudeBitMask = 2;\n      const length = width * height;\n      const width4 = width * 4;\n\n      for (let index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n        indexNext = Math.min(length, index0 + width4);\n        for (let j = 0; j < width; j++) {\n          for (let index = index0 + j; index < indexNext; index += width) {\n            // significant but not those that have just become\n            if (\n              !coefficentsMagnitude[index] ||\n              (processingFlags[index] & processedMask) !== 0\n            ) {\n              continue;\n            }\n\n            let contextLabel = 16;\n            if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n              processingFlags[index] ^= firstMagnitudeBitMask;\n              // first refinement\n              const significance = neighborsSignificance[index] & 127;\n              contextLabel = significance === 0 ? 15 : 14;\n            }\n\n            const bit = decoder.readBit(contexts, contextLabel);\n            coefficentsMagnitude[index] =\n              (coefficentsMagnitude[index] << 1) | bit;\n            bitsDecoded[index]++;\n            processingFlags[index] |= processedMask;\n          }\n        }\n      }\n    }\n\n    runCleanupPass() {\n      const decoder = this.decoder;\n      const width = this.width,\n        height = this.height;\n      const neighborsSignificance = this.neighborsSignificance;\n      const coefficentsMagnitude = this.coefficentsMagnitude;\n      const coefficentsSign = this.coefficentsSign;\n      const contexts = this.contexts;\n      const labels = this.contextLabelTable;\n      const bitsDecoded = this.bitsDecoded;\n      const processingFlags = this.processingFlags;\n      const processedMask = 1;\n      const firstMagnitudeBitMask = 2;\n      const oneRowDown = width;\n      const twoRowsDown = width * 2;\n      const threeRowsDown = width * 3;\n      let iNext;\n      for (let i0 = 0; i0 < height; i0 = iNext) {\n        iNext = Math.min(i0 + 4, height);\n        const indexBase = i0 * width;\n        const checkAllEmpty = i0 + 3 < height;\n        for (let j = 0; j < width; j++) {\n          const index0 = indexBase + j;\n          // using the property: labels[neighborsSignificance[index]] === 0\n          // when neighborsSignificance[index] === 0\n          const allEmpty =\n            checkAllEmpty &&\n            processingFlags[index0] === 0 &&\n            processingFlags[index0 + oneRowDown] === 0 &&\n            processingFlags[index0 + twoRowsDown] === 0 &&\n            processingFlags[index0 + threeRowsDown] === 0 &&\n            neighborsSignificance[index0] === 0 &&\n            neighborsSignificance[index0 + oneRowDown] === 0 &&\n            neighborsSignificance[index0 + twoRowsDown] === 0 &&\n            neighborsSignificance[index0 + threeRowsDown] === 0;\n          let i1 = 0,\n            index = index0;\n          let i = i0,\n            sign;\n          if (allEmpty) {\n            const hasSignificantCoefficent = decoder.readBit(\n              contexts,\n              RUNLENGTH_CONTEXT\n            );\n            if (!hasSignificantCoefficent) {\n              bitsDecoded[index0]++;\n              bitsDecoded[index0 + oneRowDown]++;\n              bitsDecoded[index0 + twoRowsDown]++;\n              bitsDecoded[index0 + threeRowsDown]++;\n              continue; // next column\n            }\n            i1 =\n              (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n              decoder.readBit(contexts, UNIFORM_CONTEXT);\n            if (i1 !== 0) {\n              i = i0 + i1;\n              index += i1 * width;\n            }\n\n            sign = this.decodeSignBit(i, j, index);\n            coefficentsSign[index] = sign;\n            coefficentsMagnitude[index] = 1;\n            this.setNeighborsSignificance(i, j, index);\n            processingFlags[index] |= firstMagnitudeBitMask;\n\n            index = index0;\n            for (let i2 = i0; i2 <= i; i2++, index += width) {\n              bitsDecoded[index]++;\n            }\n\n            i1++;\n          }\n          for (i = i0 + i1; i < iNext; i++, index += width) {\n            if (\n              coefficentsMagnitude[index] ||\n              (processingFlags[index] & processedMask) !== 0\n            ) {\n              continue;\n            }\n\n            const contextLabel = labels[neighborsSignificance[index]];\n            const decision = decoder.readBit(contexts, contextLabel);\n            if (decision === 1) {\n              sign = this.decodeSignBit(i, j, index);\n              coefficentsSign[index] = sign;\n              coefficentsMagnitude[index] = 1;\n              this.setNeighborsSignificance(i, j, index);\n              processingFlags[index] |= firstMagnitudeBitMask;\n            }\n            bitsDecoded[index]++;\n          }\n        }\n      }\n    }\n\n    checkSegmentationSymbol() {\n      const decoder = this.decoder;\n      const contexts = this.contexts;\n      const symbol =\n        (decoder.readBit(contexts, UNIFORM_CONTEXT) << 3) |\n        (decoder.readBit(contexts, UNIFORM_CONTEXT) << 2) |\n        (decoder.readBit(contexts, UNIFORM_CONTEXT) << 1) |\n        decoder.readBit(contexts, UNIFORM_CONTEXT);\n      if (symbol !== 0xa) {\n        throw new JpxError(\"Invalid segmentation symbol\");\n      }\n    }\n  }\n\n  return BitModel;\n})();\n\n// Section F, Discrete wavelet transformation\nclass Transform {\n  constructor() {\n    if (this.constructor === Transform) {\n      unreachable(\"Cannot initialize Transform.\");\n    }\n  }\n\n  calculate(subbands, u0, v0) {\n    let ll = subbands[0];\n    for (let i = 1, ii = subbands.length; i < ii; i++) {\n      ll = this.iterate(ll, subbands[i], u0, v0);\n    }\n    return ll;\n  }\n\n  extend(buffer, offset, size) {\n    // Section F.3.7 extending... using max extension of 4\n    let i1 = offset - 1,\n      j1 = offset + 1;\n    let i2 = offset + size - 2,\n      j2 = offset + size;\n    buffer[i1--] = buffer[j1++];\n    buffer[j2++] = buffer[i2--];\n    buffer[i1--] = buffer[j1++];\n    buffer[j2++] = buffer[i2--];\n    buffer[i1--] = buffer[j1++];\n    buffer[j2++] = buffer[i2--];\n    buffer[i1] = buffer[j1];\n    buffer[j2] = buffer[i2];\n  }\n\n  filter(x, offset, length) {\n    unreachable(\"Abstract method `filter` called\");\n  }\n\n  iterate(ll, hl_lh_hh, u0, v0) {\n    const llWidth = ll.width,\n      llHeight = ll.height;\n    let llItems = ll.items;\n    const width = hl_lh_hh.width;\n    const height = hl_lh_hh.height;\n    const items = hl_lh_hh.items;\n    let i, j, k, l, u, v;\n\n    // Interleave LL according to Section F.3.3\n    for (k = 0, i = 0; i < llHeight; i++) {\n      l = i * 2 * width;\n      for (j = 0; j < llWidth; j++, k++, l += 2) {\n        items[l] = llItems[k];\n      }\n    }\n    // The LL band is not needed anymore.\n    llItems = ll.items = null;\n\n    const bufferPadding = 4;\n    const rowBuffer = new Float32Array(width + 2 * bufferPadding);\n\n    // Section F.3.4 HOR_SR\n    if (width === 1) {\n      // if width = 1, when u0 even keep items as is, when odd divide by 2\n      if ((u0 & 1) !== 0) {\n        for (v = 0, k = 0; v < height; v++, k += width) {\n          items[k] *= 0.5;\n        }\n      }\n    } else {\n      for (v = 0, k = 0; v < height; v++, k += width) {\n        rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n\n        this.extend(rowBuffer, bufferPadding, width);\n        this.filter(rowBuffer, bufferPadding, width);\n\n        items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);\n      }\n    }\n\n    // Accesses to the items array can take long, because it may not fit into\n    // CPU cache and has to be fetched from main memory. Since subsequent\n    // accesses to the items array are not local when reading columns, we\n    // have a cache miss every time. To reduce cache misses, get up to\n    // 'numBuffers' items at a time and store them into the individual\n    // buffers. The colBuffers should be small enough to fit into CPU cache.\n    let numBuffers = 16;\n    const colBuffers = [];\n    for (i = 0; i < numBuffers; i++) {\n      colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n    }\n    let b,\n      currentBuffer = 0;\n    ll = bufferPadding + height;\n\n    // Section F.3.5 VER_SR\n    if (height === 1) {\n      // if height = 1, when v0 even keep items as is, when odd divide by 2\n      if ((v0 & 1) !== 0) {\n        for (u = 0; u < width; u++) {\n          items[u] *= 0.5;\n        }\n      }\n    } else {\n      for (u = 0; u < width; u++) {\n        // if we ran out of buffers, copy several image columns at once\n        if (currentBuffer === 0) {\n          numBuffers = Math.min(width - u, numBuffers);\n          for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n            for (b = 0; b < numBuffers; b++) {\n              colBuffers[b][l] = items[k + b];\n            }\n          }\n          currentBuffer = numBuffers;\n        }\n\n        currentBuffer--;\n        const buffer = colBuffers[currentBuffer];\n        this.extend(buffer, bufferPadding, height);\n        this.filter(buffer, bufferPadding, height);\n\n        // If this is last buffer in this group of buffers, flush all buffers.\n        if (currentBuffer === 0) {\n          k = u - numBuffers + 1;\n          for (l = bufferPadding; l < ll; k += width, l++) {\n            for (b = 0; b < numBuffers; b++) {\n              items[k + b] = colBuffers[b][l];\n            }\n          }\n        }\n      }\n    }\n\n    return { width, height, items };\n  }\n}\n\n// Section 3.8.2 Irreversible 9-7 filter\nclass IrreversibleTransform extends Transform {\n  filter(x, offset, length) {\n    const len = length >> 1;\n    offset = offset | 0;\n    let j, n, current, next;\n\n    const alpha = -1.586134342059924;\n    const beta = -0.052980118572961;\n    const gamma = 0.882911075530934;\n    const delta = 0.443506852043971;\n    const K = 1.230174104914001;\n    const K_ = 1 / K;\n\n    // step 1 is combined with step 3\n\n    // step 2\n    j = offset - 3;\n    for (n = len + 4; n--; j += 2) {\n      x[j] *= K_;\n    }\n\n    // step 1 & 3\n    j = offset - 2;\n    current = delta * x[j - 1];\n    for (n = len + 3; n--; j += 2) {\n      next = delta * x[j + 1];\n      x[j] = K * x[j] - current - next;\n      if (n--) {\n        j += 2;\n        current = delta * x[j + 1];\n        x[j] = K * x[j] - current - next;\n      } else {\n        break;\n      }\n    }\n\n    // step 4\n    j = offset - 1;\n    current = gamma * x[j - 1];\n    for (n = len + 2; n--; j += 2) {\n      next = gamma * x[j + 1];\n      x[j] -= current + next;\n      if (n--) {\n        j += 2;\n        current = gamma * x[j + 1];\n        x[j] -= current + next;\n      } else {\n        break;\n      }\n    }\n\n    // step 5\n    j = offset;\n    current = beta * x[j - 1];\n    for (n = len + 1; n--; j += 2) {\n      next = beta * x[j + 1];\n      x[j] -= current + next;\n      if (n--) {\n        j += 2;\n        current = beta * x[j + 1];\n        x[j] -= current + next;\n      } else {\n        break;\n      }\n    }\n\n    // step 6\n    if (len !== 0) {\n      j = offset + 1;\n      current = alpha * x[j - 1];\n      for (n = len; n--; j += 2) {\n        next = alpha * x[j + 1];\n        x[j] -= current + next;\n        if (n--) {\n          j += 2;\n          current = alpha * x[j + 1];\n          x[j] -= current + next;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n}\n\n// Section 3.8.1 Reversible 5-3 filter\nclass ReversibleTransform extends Transform {\n  filter(x, offset, length) {\n    const len = length >> 1;\n    offset = offset | 0;\n    let j, n;\n\n    for (j = offset, n = len + 1; n--; j += 2) {\n      x[j] -= (x[j - 1] + x[j + 1] + 2) >> 2;\n    }\n\n    for (j = offset + 1, n = len; n--; j += 2) {\n      x[j] += (x[j - 1] + x[j + 1]) >> 1;\n    }\n  }\n}\n\nexport { JpxImage };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getVerbosityLevel, setVerbosityLevel } from \"./shared/util.js\";\nimport { Jbig2Image } from \"./core/jbig2.js\";\nimport { JpegImage } from \"./core/jpg.js\";\nimport { JpxImage } from \"./core/jpx.js\";\n\n// To ensure that the standalone PDF.js image decoders have the same\n// browser/environment compatibility as the regular PDF.js library,\n// the standard set of polyfills are thus included in this build as well.\n//\n// Given that the (current) image decoders don't use all of the features\n// of the complete PDF.js library, e.g. they are completely synchronous,\n// some of the larger polyfills are thus unnecessary.\n//\n// In an attempt to reduce the size of the standalone PDF.js image decoders,\n// the following polyfills are currently being excluded:\n//  - ReadableStream\n//  - Promise\n//  - URL\n\n// eslint-disable-next-line no-unused-vars\nconst pdfjsVersion = PDFJSDev.eval(\"BUNDLE_VERSION\");\n// eslint-disable-next-line no-unused-vars\nconst pdfjsBuild = PDFJSDev.eval(\"BUNDLE_BUILD\");\n\nexport {\n  getVerbosityLevel,\n  Jbig2Image,\n  JpegImage,\n  JpxImage,\n  setVerbosityLevel,\n};\n"],"sourceRoot":""}